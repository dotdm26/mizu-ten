
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0e8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800b228  0800b228  0001b228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b888  0800b888  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b890  0800b890  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001e0  0800ba80  000201e0  2**2
                  ALLOC
 10 RAM1_region   00000000  20000400  20000400  000201e0  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  000201e0  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000400  20000400  00020400  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026338  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a9c  00000000  00000000  00046542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f90  00000000  00000000  0004afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001de8  00000000  00000000  0004cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000070a1  00000000  00000000  0004ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f4e9  00000000  00000000  00055df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4c1d  00000000  00000000  000752e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00149eff  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009a48  00000000  00000000  00149f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b210 	.word	0x0800b210

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800b210 	.word	0x0800b210

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_uldivmod>:
 8000e54:	b953      	cbnz	r3, 8000e6c <__aeabi_uldivmod+0x18>
 8000e56:	b94a      	cbnz	r2, 8000e6c <__aeabi_uldivmod+0x18>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	bf08      	it	eq
 8000e5c:	2800      	cmpeq	r0, #0
 8000e5e:	bf1c      	itt	ne
 8000e60:	f04f 31ff 	movne.w	r1, #4294967295
 8000e64:	f04f 30ff 	movne.w	r0, #4294967295
 8000e68:	f000 b9a4 	b.w	80011b4 <__aeabi_idiv0>
 8000e6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e74:	f000 f83e 	bl	8000ef4 <__udivmoddi4>
 8000e78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e80:	b004      	add	sp, #16
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_d2lz>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4605      	mov	r5, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2300      	movs	r3, #0
 8000e92:	f7ff fdfb 	bl	8000a8c <__aeabi_dcmplt>
 8000e96:	b928      	cbnz	r0, 8000ea4 <__aeabi_d2lz+0x20>
 8000e98:	4628      	mov	r0, r5
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ea0:	f000 b80a 	b.w	8000eb8 <__aeabi_d2ulz>
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eaa:	f000 f805 	bl	8000eb8 <__aeabi_d2ulz>
 8000eae:	4240      	negs	r0, r0
 8000eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb4:	bd38      	pop	{r3, r4, r5, pc}
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_d2ulz>:
 8000eb8:	b5d0      	push	{r4, r6, r7, lr}
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__aeabi_d2ulz+0x34>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4606      	mov	r6, r0
 8000ec0:	460f      	mov	r7, r1
 8000ec2:	f7ff fb71 	bl	80005a8 <__aeabi_dmul>
 8000ec6:	f7ff fe47 	bl	8000b58 <__aeabi_d2uiz>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	f7ff faf2 	bl	80004b4 <__aeabi_ui2d>
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <__aeabi_d2ulz+0x38>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f7ff fb68 	bl	80005a8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4630      	mov	r0, r6
 8000ede:	4639      	mov	r1, r7
 8000ee0:	f7ff f9aa 	bl	8000238 <__aeabi_dsub>
 8000ee4:	f7ff fe38 	bl	8000b58 <__aeabi_d2uiz>
 8000ee8:	4621      	mov	r1, r4
 8000eea:	bdd0      	pop	{r4, r6, r7, pc}
 8000eec:	3df00000 	.word	0x3df00000
 8000ef0:	41f00000 	.word	0x41f00000

08000ef4 <__udivmoddi4>:
 8000ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef8:	9e08      	ldr	r6, [sp, #32]
 8000efa:	460d      	mov	r5, r1
 8000efc:	4604      	mov	r4, r0
 8000efe:	468e      	mov	lr, r1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 8082 	bne.w	800100a <__udivmoddi4+0x116>
 8000f06:	428a      	cmp	r2, r1
 8000f08:	4617      	mov	r7, r2
 8000f0a:	d946      	bls.n	8000f9a <__udivmoddi4+0xa6>
 8000f0c:	fab2 f282 	clz	r2, r2
 8000f10:	b14a      	cbz	r2, 8000f26 <__udivmoddi4+0x32>
 8000f12:	f1c2 0120 	rsb	r1, r2, #32
 8000f16:	fa05 f302 	lsl.w	r3, r5, r2
 8000f1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f1e:	4097      	lsls	r7, r2
 8000f20:	ea41 0e03 	orr.w	lr, r1, r3
 8000f24:	4094      	lsls	r4, r2
 8000f26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f2a:	0c23      	lsrs	r3, r4, #16
 8000f2c:	fbbe fcf8 	udiv	ip, lr, r8
 8000f30:	b2b9      	uxth	r1, r7
 8000f32:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000f36:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f3a:	fb0c f001 	mul.w	r0, ip, r1
 8000f3e:	4298      	cmp	r0, r3
 8000f40:	d90a      	bls.n	8000f58 <__udivmoddi4+0x64>
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000f48:	f080 8116 	bcs.w	8001178 <__udivmoddi4+0x284>
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	f240 8113 	bls.w	8001178 <__udivmoddi4+0x284>
 8000f52:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f56:	443b      	add	r3, r7
 8000f58:	1a1b      	subs	r3, r3, r0
 8000f5a:	b2a4      	uxth	r4, r4
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3310 	mls	r3, r8, r0, r3
 8000f64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f68:	fb00 f101 	mul.w	r1, r0, r1
 8000f6c:	42a1      	cmp	r1, r4
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x90>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f76:	f080 8101 	bcs.w	800117c <__udivmoddi4+0x288>
 8000f7a:	42a1      	cmp	r1, r4
 8000f7c:	f240 80fe 	bls.w	800117c <__udivmoddi4+0x288>
 8000f80:	3802      	subs	r0, #2
 8000f82:	443c      	add	r4, r7
 8000f84:	1a64      	subs	r4, r4, r1
 8000f86:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	b11e      	cbz	r6, 8000f96 <__udivmoddi4+0xa2>
 8000f8e:	40d4      	lsrs	r4, r2
 8000f90:	2300      	movs	r3, #0
 8000f92:	e9c6 4300 	strd	r4, r3, [r6]
 8000f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9a:	b902      	cbnz	r2, 8000f9e <__udivmoddi4+0xaa>
 8000f9c:	deff      	udf	#255	; 0xff
 8000f9e:	fab2 f282 	clz	r2, r2
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d14f      	bne.n	8001046 <__udivmoddi4+0x152>
 8000fa6:	1bcb      	subs	r3, r1, r7
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	fa1f f887 	uxth.w	r8, r7
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000fb6:	0c25      	lsrs	r5, r4, #16
 8000fb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000fbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000fc0:	fb08 f30c 	mul.w	r3, r8, ip
 8000fc4:	42ab      	cmp	r3, r5
 8000fc6:	d907      	bls.n	8000fd8 <__udivmoddi4+0xe4>
 8000fc8:	197d      	adds	r5, r7, r5
 8000fca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fce:	d202      	bcs.n	8000fd6 <__udivmoddi4+0xe2>
 8000fd0:	42ab      	cmp	r3, r5
 8000fd2:	f200 80e7 	bhi.w	80011a4 <__udivmoddi4+0x2b0>
 8000fd6:	4684      	mov	ip, r0
 8000fd8:	1aed      	subs	r5, r5, r3
 8000fda:	b2a3      	uxth	r3, r4
 8000fdc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000fe0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000fe4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000fe8:	fb08 f800 	mul.w	r8, r8, r0
 8000fec:	45a0      	cmp	r8, r4
 8000fee:	d907      	bls.n	8001000 <__udivmoddi4+0x10c>
 8000ff0:	193c      	adds	r4, r7, r4
 8000ff2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ff6:	d202      	bcs.n	8000ffe <__udivmoddi4+0x10a>
 8000ff8:	45a0      	cmp	r8, r4
 8000ffa:	f200 80d7 	bhi.w	80011ac <__udivmoddi4+0x2b8>
 8000ffe:	4618      	mov	r0, r3
 8001000:	eba4 0408 	sub.w	r4, r4, r8
 8001004:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001008:	e7c0      	b.n	8000f8c <__udivmoddi4+0x98>
 800100a:	428b      	cmp	r3, r1
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x12c>
 800100e:	2e00      	cmp	r6, #0
 8001010:	f000 80af 	beq.w	8001172 <__udivmoddi4+0x27e>
 8001014:	2100      	movs	r1, #0
 8001016:	e9c6 0500 	strd	r0, r5, [r6]
 800101a:	4608      	mov	r0, r1
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001020:	fab3 f183 	clz	r1, r3
 8001024:	2900      	cmp	r1, #0
 8001026:	d14b      	bne.n	80010c0 <__udivmoddi4+0x1cc>
 8001028:	42ab      	cmp	r3, r5
 800102a:	d302      	bcc.n	8001032 <__udivmoddi4+0x13e>
 800102c:	4282      	cmp	r2, r0
 800102e:	f200 80b7 	bhi.w	80011a0 <__udivmoddi4+0x2ac>
 8001032:	1a84      	subs	r4, r0, r2
 8001034:	eb65 0303 	sbc.w	r3, r5, r3
 8001038:	2001      	movs	r0, #1
 800103a:	469e      	mov	lr, r3
 800103c:	2e00      	cmp	r6, #0
 800103e:	d0aa      	beq.n	8000f96 <__udivmoddi4+0xa2>
 8001040:	e9c6 4e00 	strd	r4, lr, [r6]
 8001044:	e7a7      	b.n	8000f96 <__udivmoddi4+0xa2>
 8001046:	f1c2 0c20 	rsb	ip, r2, #32
 800104a:	fa01 f302 	lsl.w	r3, r1, r2
 800104e:	4097      	lsls	r7, r2
 8001050:	fa20 f00c 	lsr.w	r0, r0, ip
 8001054:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001058:	fa21 fc0c 	lsr.w	ip, r1, ip
 800105c:	4318      	orrs	r0, r3
 800105e:	fbbc f1fe 	udiv	r1, ip, lr
 8001062:	0c05      	lsrs	r5, r0, #16
 8001064:	fb0e cc11 	mls	ip, lr, r1, ip
 8001068:	fa1f f887 	uxth.w	r8, r7
 800106c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001070:	fb01 f308 	mul.w	r3, r1, r8
 8001074:	42ab      	cmp	r3, r5
 8001076:	fa04 f402 	lsl.w	r4, r4, r2
 800107a:	d909      	bls.n	8001090 <__udivmoddi4+0x19c>
 800107c:	197d      	adds	r5, r7, r5
 800107e:	f101 3cff 	add.w	ip, r1, #4294967295
 8001082:	f080 808b 	bcs.w	800119c <__udivmoddi4+0x2a8>
 8001086:	42ab      	cmp	r3, r5
 8001088:	f240 8088 	bls.w	800119c <__udivmoddi4+0x2a8>
 800108c:	3902      	subs	r1, #2
 800108e:	443d      	add	r5, r7
 8001090:	1aeb      	subs	r3, r5, r3
 8001092:	b285      	uxth	r5, r0
 8001094:	fbb3 f0fe 	udiv	r0, r3, lr
 8001098:	fb0e 3310 	mls	r3, lr, r0, r3
 800109c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010a0:	fb00 f308 	mul.w	r3, r0, r8
 80010a4:	42ab      	cmp	r3, r5
 80010a6:	d907      	bls.n	80010b8 <__udivmoddi4+0x1c4>
 80010a8:	197d      	adds	r5, r7, r5
 80010aa:	f100 3cff 	add.w	ip, r0, #4294967295
 80010ae:	d271      	bcs.n	8001194 <__udivmoddi4+0x2a0>
 80010b0:	42ab      	cmp	r3, r5
 80010b2:	d96f      	bls.n	8001194 <__udivmoddi4+0x2a0>
 80010b4:	3802      	subs	r0, #2
 80010b6:	443d      	add	r5, r7
 80010b8:	1aeb      	subs	r3, r5, r3
 80010ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010be:	e778      	b.n	8000fb2 <__udivmoddi4+0xbe>
 80010c0:	f1c1 0c20 	rsb	ip, r1, #32
 80010c4:	408b      	lsls	r3, r1
 80010c6:	fa22 f70c 	lsr.w	r7, r2, ip
 80010ca:	431f      	orrs	r7, r3
 80010cc:	fa20 f40c 	lsr.w	r4, r0, ip
 80010d0:	fa05 f301 	lsl.w	r3, r5, r1
 80010d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010d8:	fa25 f50c 	lsr.w	r5, r5, ip
 80010dc:	431c      	orrs	r4, r3
 80010de:	0c23      	lsrs	r3, r4, #16
 80010e0:	fbb5 f9fe 	udiv	r9, r5, lr
 80010e4:	fa1f f887 	uxth.w	r8, r7
 80010e8:	fb0e 5519 	mls	r5, lr, r9, r5
 80010ec:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80010f0:	fb09 fa08 	mul.w	sl, r9, r8
 80010f4:	45aa      	cmp	sl, r5
 80010f6:	fa02 f201 	lsl.w	r2, r2, r1
 80010fa:	fa00 f301 	lsl.w	r3, r0, r1
 80010fe:	d908      	bls.n	8001112 <__udivmoddi4+0x21e>
 8001100:	197d      	adds	r5, r7, r5
 8001102:	f109 30ff 	add.w	r0, r9, #4294967295
 8001106:	d247      	bcs.n	8001198 <__udivmoddi4+0x2a4>
 8001108:	45aa      	cmp	sl, r5
 800110a:	d945      	bls.n	8001198 <__udivmoddi4+0x2a4>
 800110c:	f1a9 0902 	sub.w	r9, r9, #2
 8001110:	443d      	add	r5, r7
 8001112:	eba5 050a 	sub.w	r5, r5, sl
 8001116:	b2a4      	uxth	r4, r4
 8001118:	fbb5 f0fe 	udiv	r0, r5, lr
 800111c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001120:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001124:	fb00 f808 	mul.w	r8, r0, r8
 8001128:	45a0      	cmp	r8, r4
 800112a:	d907      	bls.n	800113c <__udivmoddi4+0x248>
 800112c:	193c      	adds	r4, r7, r4
 800112e:	f100 35ff 	add.w	r5, r0, #4294967295
 8001132:	d22d      	bcs.n	8001190 <__udivmoddi4+0x29c>
 8001134:	45a0      	cmp	r8, r4
 8001136:	d92b      	bls.n	8001190 <__udivmoddi4+0x29c>
 8001138:	3802      	subs	r0, #2
 800113a:	443c      	add	r4, r7
 800113c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001140:	eba4 0408 	sub.w	r4, r4, r8
 8001144:	fba0 8902 	umull	r8, r9, r0, r2
 8001148:	454c      	cmp	r4, r9
 800114a:	46c6      	mov	lr, r8
 800114c:	464d      	mov	r5, r9
 800114e:	d319      	bcc.n	8001184 <__udivmoddi4+0x290>
 8001150:	d016      	beq.n	8001180 <__udivmoddi4+0x28c>
 8001152:	b15e      	cbz	r6, 800116c <__udivmoddi4+0x278>
 8001154:	ebb3 020e 	subs.w	r2, r3, lr
 8001158:	eb64 0405 	sbc.w	r4, r4, r5
 800115c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001160:	40ca      	lsrs	r2, r1
 8001162:	ea4c 0202 	orr.w	r2, ip, r2
 8001166:	40cc      	lsrs	r4, r1
 8001168:	e9c6 2400 	strd	r2, r4, [r6]
 800116c:	2100      	movs	r1, #0
 800116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001172:	4631      	mov	r1, r6
 8001174:	4630      	mov	r0, r6
 8001176:	e70e      	b.n	8000f96 <__udivmoddi4+0xa2>
 8001178:	46ac      	mov	ip, r5
 800117a:	e6ed      	b.n	8000f58 <__udivmoddi4+0x64>
 800117c:	4618      	mov	r0, r3
 800117e:	e701      	b.n	8000f84 <__udivmoddi4+0x90>
 8001180:	4543      	cmp	r3, r8
 8001182:	d2e6      	bcs.n	8001152 <__udivmoddi4+0x25e>
 8001184:	ebb8 0e02 	subs.w	lr, r8, r2
 8001188:	eb69 0507 	sbc.w	r5, r9, r7
 800118c:	3801      	subs	r0, #1
 800118e:	e7e0      	b.n	8001152 <__udivmoddi4+0x25e>
 8001190:	4628      	mov	r0, r5
 8001192:	e7d3      	b.n	800113c <__udivmoddi4+0x248>
 8001194:	4660      	mov	r0, ip
 8001196:	e78f      	b.n	80010b8 <__udivmoddi4+0x1c4>
 8001198:	4681      	mov	r9, r0
 800119a:	e7ba      	b.n	8001112 <__udivmoddi4+0x21e>
 800119c:	4661      	mov	r1, ip
 800119e:	e777      	b.n	8001090 <__udivmoddi4+0x19c>
 80011a0:	4608      	mov	r0, r1
 80011a2:	e74b      	b.n	800103c <__udivmoddi4+0x148>
 80011a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80011a8:	443d      	add	r5, r7
 80011aa:	e715      	b.n	8000fd8 <__udivmoddi4+0xe4>
 80011ac:	3802      	subs	r0, #2
 80011ae:	443c      	add	r4, r7
 80011b0:	e726      	b.n	8001000 <__udivmoddi4+0x10c>
 80011b2:	bf00      	nop

080011b4 <__aeabi_idiv0>:
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c8:	f023 0218 	bic.w	r2, r3, #24
 80011cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <DWT_Delay_Init>:
static void MX_TIM2_Init(void);
static void MX_GPIO_Init(void);
void DHT11_GetData(DHT_DataTypedef *DHT_Data);

uint32_t DWT_Delay_Init(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <DWT_Delay_Init+0x58>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4a13      	ldr	r2, [pc, #76]	; (800126c <DWT_Delay_Init+0x58>)
 800121e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001222:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <DWT_Delay_Init+0x58>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <DWT_Delay_Init+0x58>)
 800122a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122e:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <DWT_Delay_Init+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <DWT_Delay_Init+0x5c>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <DWT_Delay_Init+0x5c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <DWT_Delay_Init+0x5c>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <DWT_Delay_Init+0x5c>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 800124e:	bf00      	nop
	__ASM volatile ("NOP");
 8001250:	bf00      	nop
	__ASM volatile ("NOP");
 8001252:	bf00      	nop

	/* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <DWT_Delay_Init+0x5c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <DWT_Delay_Init+0x4c>
	{
		return 0; /*clock cycle counter started*/
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <DWT_Delay_Init+0x4e>
	}
	else
	{
		return 1; /*clock cycle counter not started*/
 8001260:	2301      	movs	r3, #1
	}
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000edf0 	.word	0xe000edf0
 8001270:	e0001000 	.word	0xe0001000

08001274 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <delay+0x40>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001282:	f002 fd61 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8001286:	4603      	mov	r3, r0
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <delay+0x44>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9b      	lsrs	r3, r3, #18
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001298:	bf00      	nop
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <delay+0x40>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad2      	subs	r2, r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3f8      	bcc.n	800129a <delay+0x26>
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e0001000 	.word	0xe0001000
 80012b8:	431bde83 	.word	0x431bde83

080012bc <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f001 fb50 	bl	8002990 <HAL_GPIO_Init>
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
	// or it could be PULLDOWN if dosent work with PULLUP------------------------- note
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f001 fb32 	bl	8002990 <HAL_GPIO_Init>
}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <DHT11_Start>:

void DHT11_Start(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001338:	f7ff ff6c 	bl	8001214 <DWT_Delay_Init>
	//SIG connected to PB10 (Digital)
	Set_Pin_Output(GPIOB, GPIO_PIN_10);           // set the pin as output
 800133c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001340:	4815      	ldr	r0, [pc, #84]	; (8001398 <DHT11_Start+0x64>)
 8001342:	f7ff ffbb 	bl	80012bc <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);    // pull the pin low
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <DHT11_Start+0x64>)
 800134e:	f001 fc96 	bl	8002c7e <HAL_GPIO_WritePin>
	delay(18000);
 8001352:	f244 6050 	movw	r0, #18000	; 0x4650
 8001356:	f7ff ff8d 	bl	8001274 <delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);   // pull the pin high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <DHT11_Start+0x64>)
 8001362:	f001 fc8c 	bl	8002c7e <HAL_GPIO_WritePin>
	delay(20);
 8001366:	2014      	movs	r0, #20
 8001368:	f7ff ff84 	bl	8001274 <delay>
	Set_Pin_Input(GPIOB, GPIO_PIN_10);            // set as input
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <DHT11_Start+0x64>)
 8001372:	f7ff ffc1 	bl	80012f8 <Set_Pin_Input>

	sprintf(buffer,"Start done\r\n");
 8001376:	4909      	ldr	r1, [pc, #36]	; (800139c <DHT11_Start+0x68>)
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <DHT11_Start+0x6c>)
 800137a:	f006 f9c9 	bl	8007710 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <DHT11_Start+0x6c>)
 8001380:	f7fe fefe 	bl	8000180 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	4904      	ldr	r1, [pc, #16]	; (80013a0 <DHT11_Start+0x6c>)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <DHT11_Start+0x70>)
 8001390:	f004 f8d5 	bl	800553e <HAL_UART_Transmit>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	48000400 	.word	0x48000400
 800139c:	0800b228 	.word	0x0800b228
 80013a0:	200002c4 	.word	0x200002c4
 80013a4:	20000228 	.word	0x20000228

080013a8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
	delay(40);
 80013b2:	2028      	movs	r0, #40	; 0x28
 80013b4:	f7ff ff5e 	bl	8001274 <delay>
	if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)))
 80013b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013bc:	4819      	ldr	r0, [pc, #100]	; (8001424 <DHT11_Check_Response+0x7c>)
 80013be:	f001 fc47 	bl	8002c50 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10f      	bne.n	80013e8 <DHT11_Check_Response+0x40>
	{
		delay(80);
 80013c8:	2050      	movs	r0, #80	; 0x50
 80013ca:	f7ff ff53 	bl	8001274 <delay>
		if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))) response = 1;
 80013ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <DHT11_Check_Response+0x7c>)
 80013d4:	f001 fc3c 	bl	8002c50 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <DHT11_Check_Response+0x3c>
 80013de:	2301      	movs	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e001      	b.n	80013e8 <DHT11_Check_Response+0x40>
		else response = -1;                         // 255
 80013e4:	23ff      	movs	r3, #255	; 0xff
 80013e6:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)));   // wait for the pin to go low
 80013e8:	bf00      	nop
 80013ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <DHT11_Check_Response+0x7c>)
 80013f0:	f001 fc2e 	bl	8002c50 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f7      	bne.n	80013ea <DHT11_Check_Response+0x42>

	sprintf(buffer,"Received response\r\n");
 80013fa:	490b      	ldr	r1, [pc, #44]	; (8001428 <DHT11_Check_Response+0x80>)
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <DHT11_Check_Response+0x84>)
 80013fe:	f006 f987 	bl	8007710 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <DHT11_Check_Response+0x84>)
 8001404:	f7fe febc 	bl	8000180 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <DHT11_Check_Response+0x84>)
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <DHT11_Check_Response+0x88>)
 8001414:	f004 f893 	bl	800553e <HAL_UART_Transmit>

	return response;
 8001418:	79fb      	ldrb	r3, [r7, #7]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	48000400 	.word	0x48000400
 8001428:	0800b238 	.word	0x0800b238
 800142c:	200002c4 	.word	0x200002c4
 8001430:	20000228 	.word	0x20000228

08001434 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	uint8_t i, j;					   // "i" is our desiered value = one bit of DHT11 payload in each time the function will be called

	for (j = 0; j < 8; j++)                                  //Loop executes 8 times to receive 8 bits payload so each time function called 8 bit of data will be read
 800143a:	2300      	movs	r3, #0
 800143c:	71bb      	strb	r3, [r7, #6]
 800143e:	e031      	b.n	80014a4 <DHT11_Read+0x70>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)));   // wait for the pin to go high
 8001440:	bf00      	nop
 8001442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <DHT11_Read+0x80>)
 8001448:	f001 fc02 	bl	8002c50 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f7      	beq.n	8001442 <DHT11_Read+0xe>
		delay (50);   // wait for 40 us
 8001452:	2032      	movs	r0, #50	; 0x32
 8001454:	f7ff ff0e 	bl	8001274 <delay>
		if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)))       // if the pin is low
 8001458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145c:	4815      	ldr	r0, [pc, #84]	; (80014b4 <DHT11_Read+0x80>)
 800145e:	f001 fbf7 	bl	8002c50 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10e      	bne.n	8001486 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));                             // write 0    (These are bitwise operators. Means write left bit of "j" to right bit of "i")
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2201      	movs	r2, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	b25b      	sxtb	r3, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	b25a      	sxtb	r2, r3
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	4013      	ands	r3, r2
 8001480:	b25b      	sxtb	r3, r3
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	e00b      	b.n	800149e <DHT11_Read+0x6a>
		}
		else {
			i|= (1<<(7-j));                                 // if the pin is high, write 1
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	f1c3 0307 	rsb	r3, r3, #7
 800148c:	2201      	movs	r2, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	b25a      	sxtb	r2, r3
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4313      	orrs	r3, r2
 800149a:	b25b      	sxtb	r3, r3
 800149c:	71fb      	strb	r3, [r7, #7]
	for (j = 0; j < 8; j++)                                  //Loop executes 8 times to receive 8 bits payload so each time function called 8 bit of data will be read
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	3301      	adds	r3, #1
 80014a2:	71bb      	strb	r3, [r7, #6]
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	d9ca      	bls.n	8001440 <DHT11_Read+0xc>
		}
	}

	return i;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000400 	.word	0x48000400

080014b8 <DHT11_GetData>:

void DHT11_GetData (DHT_DataTypedef *DHT_Data)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af02      	add	r7, sp, #8
 80014be:	6078      	str	r0, [r7, #4]
	DHT11_Start();
 80014c0:	f7ff ff38 	bl	8001334 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80014c4:	f7ff ff70 	bl	80013a8 <DHT11_Check_Response>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <DHT11_GetData+0xf8>)
 80014ce:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read ();
 80014d0:	f7ff ffb0 	bl	8001434 <DHT11_Read>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <DHT11_GetData+0xfc>)
 80014da:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80014dc:	f7ff ffaa 	bl	8001434 <DHT11_Read>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <DHT11_GetData+0x100>)
 80014e6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80014e8:	f7ff ffa4 	bl	8001434 <DHT11_Read>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <DHT11_GetData+0x104>)
 80014f2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 80014f4:	f7ff ff9e 	bl	8001434 <DHT11_Read>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <DHT11_GetData+0x108>)
 80014fe:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8001500:	f7ff ff98 	bl	8001434 <DHT11_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <DHT11_GetData+0x10c>)
 800150a:	801a      	strh	r2, [r3, #0]

	sprintf(buffer,"Completed read\r\n");
 800150c:	492e      	ldr	r1, [pc, #184]	; (80015c8 <DHT11_GetData+0x110>)
 800150e:	482f      	ldr	r0, [pc, #188]	; (80015cc <DHT11_GetData+0x114>)
 8001510:	f006 f8fe 	bl	8007710 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001514:	482d      	ldr	r0, [pc, #180]	; (80015cc <DHT11_GetData+0x114>)
 8001516:	f7fe fe33 	bl	8000180 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	492a      	ldr	r1, [pc, #168]	; (80015cc <DHT11_GetData+0x114>)
 8001524:	482a      	ldr	r0, [pc, #168]	; (80015d0 <DHT11_GetData+0x118>)
 8001526:	f004 f80a 	bl	800553e <HAL_UART_Transmit>


	sprintf(buffer,"Values are %d %d %d %d\r\n", Temp_byte1, Temp_byte2, Rh_byte1, Rh_byte2);
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <DHT11_GetData+0x104>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <DHT11_GetData+0x108>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <DHT11_GetData+0xfc>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <DHT11_GetData+0x100>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	9200      	str	r2, [sp, #0]
 8001544:	4603      	mov	r3, r0
 8001546:	460a      	mov	r2, r1
 8001548:	4922      	ldr	r1, [pc, #136]	; (80015d4 <DHT11_GetData+0x11c>)
 800154a:	4820      	ldr	r0, [pc, #128]	; (80015cc <DHT11_GetData+0x114>)
 800154c:	f006 f8e0 	bl	8007710 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001550:	481e      	ldr	r0, [pc, #120]	; (80015cc <DHT11_GetData+0x114>)
 8001552:	f7fe fe15 	bl	8000180 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	491b      	ldr	r1, [pc, #108]	; (80015cc <DHT11_GetData+0x114>)
 8001560:	481b      	ldr	r0, [pc, #108]	; (80015d0 <DHT11_GetData+0x118>)
 8001562:	f003 ffec 	bl	800553e <HAL_UART_Transmit>

	if (SUM == (Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2))
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <DHT11_GetData+0x10c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <DHT11_GetData+0xfc>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <DHT11_GetData+0x100>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <DHT11_GetData+0x104>)
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	4413      	add	r3, r2
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <DHT11_GetData+0x108>)
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4299      	cmp	r1, r3
 8001586:	d10f      	bne.n	80015a8 <DHT11_GetData+0xf0>
	{
		DHT_Data->Temperature = Temp_byte1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <DHT11_GetData+0x104>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fc09 	bl	8000da4 <__aeabi_ui2f>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
		DHT_Data->Humidity = Rh_byte1;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <DHT11_GetData+0xfc>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc01 	bl	8000da4 <__aeabi_ui2f>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	605a      	str	r2, [r3, #4]
	}
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001fc 	.word	0x200001fc
 80015b4:	20000220 	.word	0x20000220
 80015b8:	200002f6 	.word	0x200002f6
 80015bc:	200002c0 	.word	0x200002c0
 80015c0:	20000346 	.word	0x20000346
 80015c4:	20000344 	.word	0x20000344
 80015c8:	0800b24c 	.word	0x0800b24c
 80015cc:	200002c4 	.word	0x200002c4
 80015d0:	20000228 	.word	0x20000228
 80015d4:	0800b260 	.word	0x0800b260

080015d8 <main>:
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
  ctrl3
 */

int main(void)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af02      	add	r7, sp, #8
	HAL_Init();
 80015de:	f000 fdff 	bl	80021e0 <HAL_Init>

	SystemClock_Config();
 80015e2:	f000 f8ed 	bl	80017c0 <SystemClock_Config>

	MX_GPIO_Init();
 80015e6:	f000 f84d 	bl	8001684 <MX_GPIO_Init>
	//MX_LoRaWAN_Init();
	MX_USART1_UART_Init();
 80015ea:	f000 fceb 	bl	8001fc4 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80015ee:	f000 f897 	bl	8001720 <MX_TIM2_Init>
	HAL_TIM_Base_Start(&htim2);
 80015f2:	481d      	ldr	r0, [pc, #116]	; (8001668 <main+0x90>)
 80015f4:	f003 fcde 	bl	8004fb4 <HAL_TIM_Base_Start>

	sprintf(buffer,"Initialization complete\r\n");
 80015f8:	491c      	ldr	r1, [pc, #112]	; (800166c <main+0x94>)
 80015fa:	481d      	ldr	r0, [pc, #116]	; (8001670 <main+0x98>)
 80015fc:	f006 f888 	bl	8007710 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001600:	481b      	ldr	r0, [pc, #108]	; (8001670 <main+0x98>)
 8001602:	f7fe fdbd 	bl	8000180 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	4918      	ldr	r1, [pc, #96]	; (8001670 <main+0x98>)
 8001610:	4818      	ldr	r0, [pc, #96]	; (8001674 <main+0x9c>)
 8001612:	f003 ff94 	bl	800553e <HAL_UART_Transmit>
		//MX_LoRaWAN_Process();

		//red LED
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);

		DHT11_GetData(&DHT11_Data);
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <main+0xa0>)
 8001618:	f7ff ff4e 	bl	80014b8 <DHT11_GetData>

		sprintf(buffer,"Temperature: %f \r\n Humidity: %f\n\r", DHT11_Data.Temperature, DHT11_Data.Humidity);
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <main+0xa0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff69 	bl	80004f8 <__aeabi_f2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <main+0xa0>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff62 	bl	80004f8 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9cd 2300 	strd	r2, r3, [sp]
 800163c:	4622      	mov	r2, r4
 800163e:	462b      	mov	r3, r5
 8001640:	490e      	ldr	r1, [pc, #56]	; (800167c <main+0xa4>)
 8001642:	480b      	ldr	r0, [pc, #44]	; (8001670 <main+0x98>)
 8001644:	f006 f864 	bl	8007710 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <main+0x98>)
 800164a:	f7fe fd99 	bl	8000180 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	4906      	ldr	r1, [pc, #24]	; (8001670 <main+0x98>)
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <main+0x9c>)
 800165a:	f003 ff70 	bl	800553e <HAL_UART_Transmit>

		delay(3000000);
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <main+0xa8>)
 8001660:	f7ff fe08 	bl	8001274 <delay>
		DHT11_GetData(&DHT11_Data);
 8001664:	e7d7      	b.n	8001616 <main+0x3e>
 8001666:	bf00      	nop
 8001668:	200002f8 	.word	0x200002f8
 800166c:	0800b27c 	.word	0x0800b27c
 8001670:	200002c4 	.word	0x200002c4
 8001674:	20000228 	.word	0x20000228
 8001678:	200002b8 	.word	0x200002b8
 800167c:	0800b298 	.word	0x0800b298
 8001680:	002dc6c0 	.word	0x002dc6c0

08001684 <MX_GPIO_Init>:
	}
}

static void MX_GPIO_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	2004      	movs	r0, #4
 800169a:	f7ff fda2 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2080      	movs	r0, #128	; 0x80
 80016a0:	f7ff fd9f 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff fd9c 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fd99 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2120      	movs	r1, #32
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <MX_GPIO_Init+0x98>)
 80016b6:	f001 fae2 	bl	8002c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c0:	4816      	ldr	r0, [pc, #88]	; (800171c <MX_GPIO_Init+0x98>)
 80016c2:	f001 fadc 	bl	8002c7e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Button_Pin */
	GPIO_InitStruct.Pin = BUT1_Pin;
 80016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <MX_GPIO_Init+0x98>)
 80016da:	f001 f959 	bl	8002990 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_Pin PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016de:	2320      	movs	r3, #32
 80016e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <MX_GPIO_Init+0x98>)
 80016f4:	f001 f94c 	bl	8002990 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_GPIO_Init+0x98>)
 8001710:	f001 f93e 	bl	8002990 <HAL_GPIO_Init>

}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	48000400 	.word	0x48000400

08001720 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]

	htim2.Instance = TIM2;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_TIM2_Init+0x9c>)
 8001742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001746:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80-1;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM2_Init+0x9c>)
 800174a:	224f      	movs	r2, #79	; 0x4f
 800174c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_TIM2_Init+0x9c>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM2_Init+0x9c>)
 8001756:	f04f 32ff 	mov.w	r2, #4294967295
 800175a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_TIM2_Init+0x9c>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_TIM2_Init+0x9c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001768:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_TIM2_Init+0x9c>)
 800176a:	f003 fbc3 	bl	8004ef4 <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8001774:	f000 f87a 	bl	800186c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM2_Init+0x9c>)
 8001788:	f003 fc58 	bl	800503c <HAL_TIM_SlaveConfigSynchro>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x76>
	{
		Error_Handler();
 8001792:	f000 f86b 	bl	800186c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM2_Init+0x9c>)
 80017a4:	f003 fdfc 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x92>
	{
		Error_Handler();
 80017ae:	f000 f85d 	bl	800186c <Error_Handler>
	}

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002f8 	.word	0x200002f8

080017c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09a      	sub	sp, #104	; 0x68
 80017c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	2248      	movs	r2, #72	; 0x48
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f005 f926 	bl	8006a20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fce6 	bl	80011b8 <LL_RCC_LSE_SetDriveCapability>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <SystemClock_Config+0xa8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <SystemClock_Config+0xa8>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <SystemClock_Config+0xa8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001808:	2324      	movs	r3, #36	; 0x24
 800180a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800180c:	2381      	movs	r3, #129	; 0x81
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001814:	2300      	movs	r3, #0
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001818:	23b0      	movs	r3, #176	; 0xb0
 800181a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800181c:	2300      	movs	r3, #0
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fd13 	bl	8003250 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x74>
	{
		Error_Handler();
 8001830:	f000 f81c 	bl	800186c <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001834:	234f      	movs	r3, #79	; 0x4f
 8001836:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2102      	movs	r1, #2
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f897 	bl	8003984 <HAL_RCC_ClockConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 800185c:	f000 f806 	bl	800186c <Error_Handler>
	}
}
 8001860:	bf00      	nop
 8001862:	3768      	adds	r7, #104	; 0x68
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	58000400 	.word	0x58000400

0800186c <Error_Handler>:

void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x4>

08001872 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0
  RTC_AlarmTypeDef sAlarm = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	222c      	movs	r2, #44	; 0x2c
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f005 f8a5 	bl	8006a20 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <MX_RTC_Init+0x9c>)
 80018d8:	4a22      	ldr	r2, [pc, #136]	; (8001964 <MX_RTC_Init+0xa0>)
 80018da:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_RTC_Init+0x9c>)
 80018de:	221f      	movs	r2, #31
 80018e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_RTC_Init+0x9c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_RTC_Init+0x9c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_RTC_Init+0x9c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_RTC_Init+0x9c>)
 80018f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_RTC_Init+0x9c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_RTC_Init+0x9c>)
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800190a:	4815      	ldr	r0, [pc, #84]	; (8001960 <MX_RTC_Init+0x9c>)
 800190c:	f002 fd18 	bl	8004340 <HAL_RTC_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001916:	f7ff ffa9 	bl	800186c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800191a:	4811      	ldr	r0, [pc, #68]	; (8001960 <MX_RTC_Init+0x9c>)
 800191c:	f002 fff2 	bl	8004904 <HAL_RTCEx_SetSSRU_IT>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001926:	f7ff ffa1 	bl	800186c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001936:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800193a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800193c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2201      	movs	r2, #1
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_RTC_Init+0x9c>)
 800194a:	f002 fd73 	bl	8004434 <HAL_RTC_SetAlarm_IT>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001954:	f7ff ff8a 	bl	800186c <Error_Handler>
  }

}
 8001958:	bf00      	nop
 800195a:	3730      	adds	r7, #48	; 0x30
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000348 	.word	0x20000348
 8001964:	40002800 	.word	0x40002800

08001968 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b090      	sub	sp, #64	; 0x40
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	2238      	movs	r2, #56	; 0x38
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f005 f851 	bl	8006a20 <memset>
  if(rtcHandle->Instance==RTC)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_RTC_MspInit+0x74>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d125      	bne.n	80019d4 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800198c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fbb7 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80019a4:	f7ff ff62 	bl	800186c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a8:	f7ff ff63 	bl	8001872 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019b0:	f7ff ff6f 	bl	8001892 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2002      	movs	r0, #2
 80019ba:	f000 fcf8 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80019be:	2002      	movs	r0, #2
 80019c0:	f000 fd0f 	bl	80023e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	202a      	movs	r0, #42	; 0x2a
 80019ca:	f000 fcf0 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019ce:	202a      	movs	r0, #42	; 0x2a
 80019d0:	f000 fd07 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019d4:	bf00      	nop
 80019d6:	3740      	adds	r7, #64	; 0x40
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40002800 	.word	0x40002800

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <HardFault_Handler+0x4>

080019fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <MemManage_Handler+0x4>

08001a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <BusFault_Handler+0x4>

08001a0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <UsageFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 fbf2 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001a46:	f002 ff99 	bl	800497c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000348 	.word	0x20000348

08001a54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <DMA1_Channel1_IRQHandler+0x10>)
 8001a5a:	f000 fe37 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000038c 	.word	0x2000038c

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f003 fdfd 	bl	800566c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000228 	.word	0x20000228

08001a7c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <RTC_Alarm_IRQHandler+0x10>)
 8001a82:	f002 fe2b 	bl	80046dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000348 	.word	0x20000348

08001a90 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001a96:	f003 f8ba 	bl	8004c0e <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000380 	.word	0x20000380

08001aa4 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based onother counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001abc:	f000 f984 	bl	8001dc8 <TIMER_IF_GetTimerValue>
 8001ac0:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based onother counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f9e7 	bl	8001ea4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
	return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <_kill>:

int _kill(int pid, int sig)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001af6:	f004 ff69 	bl	80069cc <__errno>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2216      	movs	r2, #22
 8001afe:	601a      	str	r2, [r3, #0]
	return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_exit>:

void _exit (int status)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffe7 	bl	8001aec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b1e:	e7fe      	b.n	8001b1e <_exit+0x12>

08001b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e00a      	b.n	8001b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b32:	f3af 8000 	nop.w
 8001b36:	4601      	mov	r1, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf0      	blt.n	8001b32 <_read+0x12>
	}

return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e009      	b.n	8001b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf1      	blt.n	8001b6c <_write+0x12>
	}
	return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_close>:

int _close(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	return -1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb8:	605a      	str	r2, [r3, #4]
	return 0;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <_isatty>:

int _isatty(int file)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
	return 0;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize  heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f004 fed2 	bl	80069cc <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20008000 	.word	0x20008000
 8001c54:	00000800 	.word	0x00000800
 8001c58:	20000200 	.word	0x20000200
 8001c5c:	20000400 	.word	0x20000400

08001c60 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
	...

08001c78 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init_1 */

  /* USER CODE END TIMER_IF_Init_1 */
  if (RTC_Initialized == false)
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <TIMER_IF_Init+0x5c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <TIMER_IF_Init+0x60>)
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001c98:	f7ff fe14 	bl	80018c4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001c9c:	f000 f856 	bl	8001d4c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by MX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <TIMER_IF_Init+0x60>)
 8001ca6:	f002 fcc3 	bl	8004630 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <TIMER_IF_Init+0x60>)
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <TIMER_IF_Init+0x60>)
 8001cb4:	f002 fdf4 	bl	80048a0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialise MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f000 f927 	bl	8001f0c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001cbe:	f000 f85f 	bl	8001d80 <TIMER_IF_SetTimerContext>

    RTC_Initialized = true;
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <TIMER_IF_Init+0x5c>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000204 	.word	0x20000204
 8001cd8:	20000348 	.word	0x20000348

08001cdc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	222c      	movs	r2, #44	; 0x2c
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 fe94 	bl	8006a20 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001cf8:	f000 f828 	bl	8001d4c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <TIMER_IF_StartTimer+0x68>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d18:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	2201      	movs	r2, #1
 8001d26:	4619      	mov	r1, r3
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <TIMER_IF_StartTimer+0x6c>)
 8001d2a:	f002 fb83 	bl	8004434 <HAL_RTC_SetAlarm_IT>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001d34:	f7ff fd9a 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3738      	adds	r7, #56	; 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000208 	.word	0x20000208
 8001d48:	20000348 	.word	0x20000348

08001d4c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <TIMER_IF_StopTimer+0x2c>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <TIMER_IF_StopTimer+0x30>)
 8001d62:	f002 fc65 	bl	8004630 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <TIMER_IF_StopTimer+0x30>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40002800 	.word	0x40002800
 8001d7c:	20000348 	.word	0x20000348

08001d80 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001d84:	f000 f8e2 	bl	8001f4c <GetTimerTicks>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <TIMER_IF_SetTimerContext+0x18>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001d8e:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <TIMER_IF_SetTimerContext+0x18>)
 8001d90:	681b      	ldr	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000208 	.word	0x20000208

08001d9c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <TIMER_IF_GetTimerContext+0x10>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000208 	.word	0x20000208

08001db0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001db4:	f000 f8ca 	bl	8001f4c <GetTimerTicks>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <TIMER_IF_GetTimerElapsedTime+0x14>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	1ad3      	subs	r3, r2, r3
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000208 	.word	0x20000208

08001dc8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <TIMER_IF_GetTimerValue+0x1c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <TIMER_IF_GetTimerValue+0x14>
  {
    return GetTimerTicks();
 8001dd4:	f000 f8ba 	bl	8001f4c <GetTimerTicks>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	e000      	b.n	8001dde <TIMER_IF_GetTimerValue+0x16>
  }
  else
  {
    return 0;
 8001ddc:	2300      	movs	r3, #0
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000204 	.word	0x20000204

08001de8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return (MIN_ALARM_DELAY);
 8001dec:	2303      	movs	r3, #3
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001df6:	b5b0      	push	{r4, r5, r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	0d95      	lsrs	r5, r2, #22
 8001e08:	0294      	lsls	r4, r2, #10
 8001e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7ff f81d 	bl	8000e54 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4613      	mov	r3, r2
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bdb0      	pop	{r4, r5, r7, pc}

08001e28 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001e28:	b4b0      	push	{r4, r5, r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	f04f 0400 	mov.w	r4, #0
 8001e40:	f04f 0500 	mov.w	r5, #0
 8001e44:	015d      	lsls	r5, r3, #5
 8001e46:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e4a:	0154      	lsls	r4, r2, #5
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	462b      	mov	r3, r5
 8001e50:	1a12      	subs	r2, r2, r0
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	f04f 0400 	mov.w	r4, #0
 8001e5a:	f04f 0500 	mov.w	r5, #0
 8001e5e:	009d      	lsls	r5, r3, #2
 8001e60:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001e64:	0094      	lsls	r4, r2, #2
 8001e66:	4622      	mov	r2, r4
 8001e68:	462b      	mov	r3, r5
 8001e6a:	1812      	adds	r2, r2, r0
 8001e6c:	eb41 0303 	adc.w	r3, r1, r3
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	00d9      	lsls	r1, r3, #3
 8001e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e7e:	00d0      	lsls	r0, r2, #3
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	0a82      	lsrs	r2, r0, #10
 8001e92:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001e96:	0a8b      	lsrs	r3, r1, #10
 8001e98:	4613      	mov	r3, r2
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bcb0      	pop	{r4, r5, r7}
 8001ea2:	4770      	bx	lr

08001ea4 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffa2 	bl	8001df6 <TIMER_IF_Convert_ms2Tick>
 8001eb2:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001eb4:	f000 f84a 	bl	8001f4c <GetTimerTicks>
 8001eb8:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001eba:	e000      	b.n	8001ebe <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001ebc:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001ebe:	f000 f845 	bl	8001f4c <GetTimerTicks>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d8f6      	bhi.n	8001ebc <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_Handler();
 8001ee0:	f004 fc60 	bl	80067a4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001ef4:	f000 f81a 	bl	8001f2c <TIMER_IF_BkUp_Read_MSBticks>
 8001ef8:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f804 	bl	8001f0c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	2102      	movs	r1, #2
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001f1a:	f002 fd53 	bl	80049c4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000348 	.word	0x20000348

08001f2c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001f32:	2102      	movs	r1, #2
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001f36:	f002 fd5d 	bl	80049f4 <HAL_RTCEx_BKUPRead>
 8001f3a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001f3c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000348 	.word	0x20000348

08001f4c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <GetTimerTicks+0x14>)
 8001f52:	f7ff fe85 	bl	8001c60 <LL_RTC_TIME_GetSubSecond>
 8001f56:	4603      	mov	r3, r0
 8001f58:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40002800 	.word	0x40002800

08001f64 <LL_AHB2_GRP1_EnableClock>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f88:	68fb      	ldr	r3, [r7, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001fca:	4a23      	ldr	r2, [pc, #140]	; (8002058 <MX_USART1_UART_Init+0x94>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = USART_BAUDRATE;
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800200c:	4811      	ldr	r0, [pc, #68]	; (8002054 <MX_USART1_UART_Init+0x90>)
 800200e:	f003 fa46 	bl	800549e <HAL_UART_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002018:	f7ff fc28 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201c:	2100      	movs	r1, #0
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8002020:	f004 f9df 	bl	80063e2 <HAL_UARTEx_SetTxFifoThreshold>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800202a:	f7ff fc1f 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	4808      	ldr	r0, [pc, #32]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8002032:	f004 fa14 	bl	800645e <HAL_UARTEx_SetRxFifoThreshold>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800203c:	f7ff fc16 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_USART1_UART_Init+0x90>)
 8002042:	f004 f993 	bl	800636c <HAL_UARTEx_EnableFifoMode>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800204c:	f7ff fc0e 	bl	800186c <Error_Handler>
  }

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000228 	.word	0x20000228
 8002058:	40013800 	.word	0x40013800

0800205c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b096      	sub	sp, #88	; 0x58
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2238      	movs	r2, #56	; 0x38
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f004 fccf 	bl	8006a20 <memset>
  if(uartHandle->Instance==USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a33      	ldr	r2, [pc, #204]	; (8002154 <HAL_UART_MspInit+0xf8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d15f      	bne.n	800214c <HAL_UART_MspInit+0xf0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800208c:	2301      	movs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002090:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002094:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	4618      	mov	r0, r3
 800209c:	f002 f836 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020a6:	f7ff fbe1 	bl	800186c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ae:	f7ff ff71 	bl	8001f94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2002      	movs	r0, #2
 80020b4:	f7ff ff56 	bl	8001f64 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c8:	2307      	movs	r3, #7
 80020ca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020d0:	4619      	mov	r1, r3
 80020d2:	4821      	ldr	r0, [pc, #132]	; (8002158 <HAL_UART_MspInit+0xfc>)
 80020d4:	f000 fc5c 	bl	8002990 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_UART_MspInit+0x100>)
 80020da:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_UART_MspInit+0x104>)
 80020dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_UART_MspInit+0x100>)
 80020e0:	2212      	movs	r2, #18
 80020e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_UART_MspInit+0x100>)
 80020e6:	2210      	movs	r2, #16
 80020e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_UART_MspInit+0x100>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_UART_MspInit+0x100>)
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_UART_MspInit+0x100>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_UART_MspInit+0x100>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_UART_MspInit+0x100>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_UART_MspInit+0x100>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800210e:	4813      	ldr	r0, [pc, #76]	; (800215c <HAL_UART_MspInit+0x100>)
 8002110:	f000 f976 	bl	8002400 <HAL_DMA_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800211a:	f7ff fba7 	bl	800186c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800211e:	2110      	movs	r1, #16
 8002120:	480e      	ldr	r0, [pc, #56]	; (800215c <HAL_UART_MspInit+0x100>)
 8002122:	f000 fb99 	bl	8002858 <HAL_DMA_ConfigChannelAttributes>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 800212c:	f7ff fb9e 	bl	800186c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_UART_MspInit+0x100>)
 8002134:	679a      	str	r2, [r3, #120]	; 0x78
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_UART_MspInit+0x100>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2024      	movs	r0, #36	; 0x24
 8002142:	f000 f934 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002146:	2024      	movs	r0, #36	; 0x24
 8002148:	f000 f94b 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800214c:	bf00      	nop
 800214e:	3758      	adds	r7, #88	; 0x58
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013800 	.word	0x40013800
 8002158:	48000400 	.word	0x48000400
 800215c:	2000038c 	.word	0x2000038c
 8002160:	40020008 	.word	0x40020008

08002164 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_UART_TxCpltCallback+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2000      	movs	r0, #0
 8002172:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000020c 	.word	0x2000020c

08002180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002182:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002184:	f000 f825 	bl	80021d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	; (80021cc <LoopForever+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ae:	f004 fc13 	bl	80069d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7ff fa11 	bl	80015d8 <main>

080021b6 <LoopForever>:

LoopForever:
    b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   r0, =_estack
 80021b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021c4:	0800b8a0 	.word	0x0800b8a0
  ldr r2, =_sbss
 80021c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021cc:	20000400 	.word	0x20000400

080021d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>

080021d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ea:	2003      	movs	r0, #3
 80021ec:	f000 f8d4 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021f0:	f001 fdaa 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_Init+0x3c>)
 80021f8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fa:	200f      	movs	r0, #15
 80021fc:	f7ff fc52 	bl	8001aa4 <HAL_InitTick>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	e001      	b.n	8002210 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800220c:	f7ff fbe8 	bl	80019e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002210:	79fb      	ldrb	r3, [r7, #7]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000000 	.word	0x20000000

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_IncTick+0x1c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_IncTick+0x20>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_IncTick+0x20>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000008 	.word	0x20000008
 8002240:	200003ec 	.word	0x200003ec

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4906      	ldr	r1, [pc, #24]	; (80022dc <__NVIC_EnableIRQ+0x34>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff4f 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff66 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ffb4 	bl	8002334 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff83 	bl	80022e0 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff59 	bl	80022a8 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e08e      	b.n	8002530 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_DMA_Init+0x138>)
 800241a:	429a      	cmp	r2, r3
 800241c:	d80f      	bhi.n	800243e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_DMA_Init+0x13c>)
 8002426:	4413      	add	r3, r2
 8002428:	4a45      	ldr	r2, [pc, #276]	; (8002540 <HAL_DMA_Init+0x140>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	009a      	lsls	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_DMA_Init+0x144>)
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
 800243c:	e00e      	b.n	800245c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b40      	ldr	r3, [pc, #256]	; (8002548 <HAL_DMA_Init+0x148>)
 8002446:	4413      	add	r3, r2
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <HAL_DMA_Init+0x140>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a3c      	ldr	r2, [pc, #240]	; (800254c <HAL_DMA_Init+0x14c>)
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa02 	bl	80028b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024bc:	d102      	bne.n	80024c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <HAL_DMA_Init+0x106>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d80c      	bhi.n	8002506 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fa2b 	bl	8002948 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	e008      	b.n	8002518 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40020407 	.word	0x40020407
 800253c:	bffdfff8 	.word	0xbffdfff8
 8002540:	cccccccd 	.word	0xcccccccd
 8002544:	40020000 	.word	0x40020000
 8002548:	bffdfbf8 	.word	0xbffdfbf8
 800254c:	40020400 	.word	0x40020400

08002550 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e04f      	b.n	8002602 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d008      	beq.n	8002580 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2204      	movs	r2, #4
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e040      	b.n	8002602 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 020e 	bic.w	r2, r2, #14
 800258e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 021c 	and.w	r2, r3, #28
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d005      	beq.n	8002630 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2204      	movs	r2, #4
 8002628:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e047      	b.n	80026c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 020e 	bic.w	r2, r2, #14
 800263e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f003 021c 	and.w	r2, r3, #28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800267c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002694:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800269e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
    }
  }
  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 031c 	and.w	r3, r3, #28
 80026ec:	2204      	movs	r2, #4
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d027      	beq.n	8002748 <HAL_DMA_IRQHandler+0x7c>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d022      	beq.n	8002748 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f003 021c 	and.w	r2, r3, #28
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2104      	movs	r1, #4
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8081 	beq.w	8002840 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002746:	e07b      	b.n	8002840 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f003 031c 	and.w	r3, r3, #28
 8002750:	2202      	movs	r2, #2
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03d      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x10c>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d038      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10b      	bne.n	800278c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 020a 	bic.w	r2, r2, #10
 8002782:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_DMA_IRQHandler+0x180>)
 8002794:	429a      	cmp	r2, r3
 8002796:	d909      	bls.n	80027ac <HAL_DMA_IRQHandler+0xe0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f003 031c 	and.w	r3, r3, #28
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <HAL_DMA_IRQHandler+0x184>)
 80027a2:	2102      	movs	r1, #2
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	e008      	b.n	80027be <HAL_DMA_IRQHandler+0xf2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f003 031c 	and.w	r3, r3, #28
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_DMA_IRQHandler+0x188>)
 80027b6:	2102      	movs	r1, #2
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d038      	beq.n	8002840 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80027d6:	e033      	b.n	8002840 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f003 031c 	and.w	r3, r3, #28
 80027e0:	2208      	movs	r2, #8
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d02a      	beq.n	8002842 <HAL_DMA_IRQHandler+0x176>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d025      	beq.n	8002842 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 020e 	bic.w	r2, r2, #14
 8002804:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f003 021c 	and.w	r2, r3, #28
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f202 	lsl.w	r2, r1, r2
 8002818:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002840:	bf00      	nop
 8002842:	bf00      	nop
}
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40020080 	.word	0x40020080
 8002850:	40020400 	.word	0x40020400
 8002854:	40020000 	.word	0x40020000

08002858 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	72fb      	strb	r3, [r7, #11]
    return status;
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	e01b      	b.n	80028ac <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e003      	b.n	80028a2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028a0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	601a      	str	r2, [r3, #0]

  return status;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d813      	bhi.n	80028f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	3b08      	subs	r3, #8
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e011      	b.n	8002918 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	009a      	lsls	r2, r3, #2
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80028fe:	4413      	add	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	3b08      	subs	r3, #8
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	3307      	adds	r3, #7
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800291c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2201      	movs	r2, #1
 8002926:	409a      	lsls	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40020407 	.word	0x40020407
 800293c:	cccccccd 	.word	0xcccccccd
 8002940:	4002081c 	.word	0x4002081c
 8002944:	40020880 	.word	0x40020880

08002948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002958:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800296c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b01      	subs	r3, #1
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2201      	movs	r2, #1
 8002978:	409a      	lsls	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	1000823f 	.word	0x1000823f
 800298c:	40020940 	.word	0x40020940

08002990 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	e140      	b.n	8002c22 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8132 	beq.w	8002c1c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d00b      	beq.n	80029d8 <HAL_GPIO_Init+0x48>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d007      	beq.n	80029d8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029cc:	2b11      	cmp	r3, #17
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b12      	cmp	r3, #18
 80029d6:	d130      	bne.n	8002a3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a0e:	2201      	movs	r2, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 0201 	and.w	r2, r3, #1
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0xea>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b12      	cmp	r3, #18
 8002a78:	d123      	bne.n	8002ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	6939      	ldr	r1, [r7, #16]
 8002abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0203 	and.w	r2, r3, #3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 808c 	beq.w	8002c1c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b04:	4a4e      	ldr	r2, [pc, #312]	; (8002c40 <HAL_GPIO_Init+0x2b0>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1bc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a44      	ldr	r2, [pc, #272]	; (8002c44 <HAL_GPIO_Init+0x2b4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1b8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a43      	ldr	r2, [pc, #268]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1b4>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_Init+0x1be>
 8002b44:	2307      	movs	r3, #7
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_Init+0x1be>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_Init+0x1be>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b5e:	4938      	ldr	r1, [pc, #224]	; (8002c40 <HAL_GPIO_Init+0x2b0>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002b92:	4a2e      	ldr	r2, [pc, #184]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f47f aeb7 	bne.w	80029a0 <HAL_GPIO_Init+0x10>
  }
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000
 8002c44:	48000400 	.word	0x48000400
 8002c48:	48000800 	.word	0x48000800
 8002c4c:	58000800 	.word	0x58000800

08002c50 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e001      	b.n	8002c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	807b      	strh	r3, [r7, #2]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c8e:	787b      	ldrb	r3, [r7, #1]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c9a:	e002      	b.n	8002ca2 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9c:	887a      	ldrh	r2, [r7, #2]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	58000400 	.word	0x58000400

08002cc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_PWREx_GetVoltageRange+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	58000400 	.word	0x58000400

08002ce0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d101      	bne.n	8002cf6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	58000400 	.word	0x58000400

08002d04 <LL_RCC_HSE_EnableTcxo>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_HSE_DisableTcxo>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d101      	bne.n	8002d54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_HSE_Enable>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_HSE_Disable>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_HSE_IsReady>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002da8:	d101      	bne.n	8002dae <LL_RCC_HSE_IsReady+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_RCC_HSE_IsReady+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <LL_RCC_HSI_Enable>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <LL_RCC_HSI_Disable>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <LL_RCC_HSI_IsReady>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e02:	d101      	bne.n	8002e08 <LL_RCC_HSI_IsReady+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_RCC_HSI_IsReady+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <LL_RCC_LSE_IsReady>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d101      	bne.n	8002e52 <LL_RCC_LSE_IsReady+0x18>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_RCC_LSE_IsReady+0x1a>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <LL_RCC_LSI_Enable>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_LSI_Disable>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_LSI_IsReady>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d101      	bne.n	8002eb4 <LL_RCC_LSI_IsReady+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_RCC_LSI_IsReady+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_MSI_Enable>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_MSI_Disable>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6013      	str	r3, [r2, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_MSI_IsReady>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d101      	bne.n	8002f0c <LL_RCC_MSI_IsReady+0x16>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_RCC_MSI_IsReady+0x18>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d101      	bne.n	8002f2c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_MSI_GetRange>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_SetSysClkSource>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_GetSysClkSource>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_SetAHBPrescaler>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <LL_C2_RCC_SetAHBPrescaler>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <LL_RCC_SetAHB3Prescaler>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003028:	f023 020f 	bic.w	r2, r3, #15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <LL_RCC_SetAPB1Prescaler>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_RCC_SetAPB2Prescaler>:
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <LL_RCC_GetAHBPrescaler>:
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_GetAHB3Prescaler>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_GetAPB1Prescaler>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <LL_RCC_GetAPB2Prescaler>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003136:	d101      	bne.n	800313c <LL_RCC_PLL_IsReady+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_RCC_PLL_IsReady+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b2:	d101      	bne.n	80031b8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031d6:	d101      	bne.n	80031dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fa:	d101      	bne.n	8003200 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321c:	d101      	bne.n	8003222 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800323e:	d101      	bne.n	8003244 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e38a      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	f7ff fea6 	bl	8002fb2 <LL_RCC_GetSysClkSource>
 8003266:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003268:	f7ff ff8f 	bl	800318a <LL_RCC_PLL_GetMainSource>
 800326c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80c9 	beq.w	800340e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x3e>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d17b      	bne.n	8003380 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d178      	bne.n	8003380 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800328e:	f7ff fe32 	bl	8002ef6 <LL_RCC_MSI_IsReady>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x54>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e369      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_RCC_OscConfig+0x72>
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	e006      	b.n	80032d0 <HAL_RCC_OscConfig+0x80>
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d222      	bcs.n	800331a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fd6d 	bl	8003db8 <RCC_SetFlashLatencyFromMSIRange>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e347      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fe26 	bl	8002f64 <LL_RCC_MSI_SetCalibTrimming>
 8003318:	e021      	b.n	800335e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003324:	f043 0308 	orr.w	r3, r3, #8
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fe0d 	bl	8002f64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fd32 	bl	8003db8 <RCC_SetFlashLatencyFromMSIRange>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e30c      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800335e:	f000 fcf3 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003362:	4603      	mov	r3, r0
 8003364:	4ab4      	ldr	r2, [pc, #720]	; (8003638 <HAL_RCC_OscConfig+0x3e8>)
 8003366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003368:	4bb4      	ldr	r3, [pc, #720]	; (800363c <HAL_RCC_OscConfig+0x3ec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fb99 	bl	8001aa4 <HAL_InitTick>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d047      	beq.n	800340c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	e2fb      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003388:	f7ff fd99 	bl	8002ebe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800338c:	f7fe fb94 	bl	8001ab8 <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003394:	f7fe fb90 	bl	8001ab8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e2e8      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80033a6:	f7ff fda6 	bl	8002ef6 <LL_RCC_MSI_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f1      	beq.n	8003394 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fdc2 	bl	8002f64 <LL_RCC_MSI_SetCalibTrimming>
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033e2:	f7ff fd7a 	bl	8002eda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033e6:	f7fe fb67 	bl	8001ab8 <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ee:	f7fe fb63 	bl	8001ab8 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e2bb      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003400:	f7ff fd79 	bl	8002ef6 <LL_RCC_MSI_IsReady>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f1      	bne.n	80033ee <HAL_RCC_OscConfig+0x19e>
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800340c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d05f      	beq.n	80034da <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x1dc>
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d10d      	bne.n	8003442 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d10a      	bne.n	8003442 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	f7ff fcb3 	bl	8002d96 <LL_RCC_HSE_IsReady>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d050      	beq.n	80034d8 <HAL_RCC_OscConfig+0x288>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d14c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e29a      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d102      	bne.n	8003468 <HAL_RCC_OscConfig+0x218>
 8003462:	f7ff fc7c 	bl	8002d5e <LL_RCC_HSE_Enable>
 8003466:	e00d      	b.n	8003484 <HAL_RCC_OscConfig+0x234>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003470:	d104      	bne.n	800347c <HAL_RCC_OscConfig+0x22c>
 8003472:	f7ff fc47 	bl	8002d04 <LL_RCC_HSE_EnableTcxo>
 8003476:	f7ff fc72 	bl	8002d5e <LL_RCC_HSE_Enable>
 800347a:	e003      	b.n	8003484 <HAL_RCC_OscConfig+0x234>
 800347c:	f7ff fc7d 	bl	8002d7a <LL_RCC_HSE_Disable>
 8003480:	f7ff fc4e 	bl	8002d20 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fb14 	bl	8001ab8 <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fb10 	bl	8001ab8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e268      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034a6:	f7ff fc76 	bl	8002d96 <LL_RCC_HSE_IsReady>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f1      	beq.n	8003494 <HAL_RCC_OscConfig+0x244>
 80034b0:	e013      	b.n	80034da <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fb01 	bl	8001ab8 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ba:	f7fe fafd 	bl	8001ab8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	; 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e255      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034cc:	f7ff fc63 	bl	8002d96 <LL_RCC_HSE_IsReady>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f1      	bne.n	80034ba <HAL_RCC_OscConfig+0x26a>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04b      	beq.n	800357e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2a8>
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d113      	bne.n	800351a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d110      	bne.n	800351a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	f7ff fc7a 	bl	8002df0 <LL_RCC_HSI_IsReady>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x2be>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e234      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fc7d 	bl	8002e12 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003518:	e031      	b.n	800357e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d019      	beq.n	8003556 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003522:	f7ff fc49 	bl	8002db8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe fac7 	bl	8001ab8 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe fac3 	bl	8001ab8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e21b      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003540:	f7ff fc56 	bl	8002df0 <LL_RCC_HSI_IsReady>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f1      	beq.n	800352e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fc5f 	bl	8002e12 <LL_RCC_HSI_SetCalibTrimming>
 8003554:	e013      	b.n	800357e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003556:	f7ff fc3d 	bl	8002dd4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe faad 	bl	8001ab8 <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fe faa9 	bl	8001ab8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e201      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003574:	f7ff fc3c 	bl	8002df0 <LL_RCC_HSI_IsReady>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f1      	bne.n	8003562 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d06e      	beq.n	8003668 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d056      	beq.n	8003640 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d031      	beq.n	800360e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1da      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80035cc:	f7ff fc56 	bl	8002e7c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035d0:	f7fe fa72 	bl	8001ab8 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d8:	f7fe fa6e 	bl	8001ab8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b11      	cmp	r3, #17
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1c6      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80035ea:	f7ff fc57 	bl	8002e9c <LL_RCC_LSI_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f1      	bne.n	80035d8 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fc:	f023 0210 	bic.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	f7ff fc25 	bl	8002e5c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fe fa51 	bl	8001ab8 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361a:	f7fe fa4d 	bl	8001ab8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b11      	cmp	r3, #17
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a5      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800362c:	f7ff fc36 	bl	8002e9c <LL_RCC_LSI_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f1      	beq.n	800361a <HAL_RCC_OscConfig+0x3ca>
 8003636:	e017      	b.n	8003668 <HAL_RCC_OscConfig+0x418>
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003640:	f7ff fc1c 	bl	8002e7c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fa38 	bl	8001ab8 <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364c:	f7fe fa34 	bl	8001ab8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b11      	cmp	r3, #17
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e18c      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800365e:	f7ff fc1d 	bl	8002e9c <LL_RCC_LSI_IsReady>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f1      	bne.n	800364c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80d8 	beq.w	8003826 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003676:	f7ff fb33 	bl	8002ce0 <LL_PWR_IsEnabledBkUpAccess>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d113      	bne.n	80036a8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003680:	f7ff fb14 	bl	8002cac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003684:	f7fe fa18 	bl	8001ab8 <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fe fa14 	bl	8001ab8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e16c      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800369e:	f7ff fb1f 	bl	8002ce0 <LL_PWR_IsEnabledBkUpAccess>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f1      	beq.n	800368c <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d07b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b85      	cmp	r3, #133	; 0x85
 80036b6:	d003      	beq.n	80036c0 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe f9f0 	bl	8001ab8 <HAL_GetTick>
 80036d8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fe f9e2 	bl	8001ab8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e138      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003706:	f7ff fb98 	bl	8002e3a <LL_RCC_LSE_IsReady>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ef      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b81      	cmp	r3, #129	; 0x81
 8003716:	d003      	beq.n	8003720 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b85      	cmp	r3, #133	; 0x85
 800371e:	d121      	bne.n	8003764 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe f9ca 	bl	8001ab8 <HAL_GetTick>
 8003724:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fe f9bc 	bl	8001ab8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e112      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0ec      	beq.n	800373c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003762:	e060      	b.n	8003826 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe f9a8 	bl	8001ab8 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fe f99a 	bl	8001ab8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0f0      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ec      	bne.n	8003780 <HAL_RCC_OscConfig+0x530>
 80037a6:	e03e      	b.n	8003826 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fe f986 	bl	8001ab8 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fe f978 	bl	8001ab8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0ce      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ec      	bne.n	80037c4 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7fe f965 	bl	8001ab8 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe f957 	bl	8001ab8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0ad      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800381c:	f7ff fb0d 	bl	8002e3a <LL_RCC_LSE_IsReady>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ef      	bne.n	8003806 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80a3 	beq.w	8003976 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d076      	beq.n	8003924 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	2b02      	cmp	r3, #2
 800383c:	d14b      	bne.n	80038d6 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	f7ff fc63 	bl	8003108 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe f939 	bl	8001ab8 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe f935 	bl	8001ab8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b0a      	cmp	r3, #10
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e08d      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800385c:	f7ff fc62 	bl	8003124 <LL_RCC_PLL_IsReady>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f1      	bne.n	800384a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	4b44      	ldr	r3, [pc, #272]	; (8003980 <HAL_RCC_OscConfig+0x730>)
 800386e:	4013      	ands	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800387e:	0212      	lsls	r2, r2, #8
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003892:	430a      	orrs	r2, r1
 8003894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	f7ff fc26 	bl	80030ec <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f902 	bl	8001ab8 <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe f8fe 	bl	8001ab8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b0a      	cmp	r3, #10
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e056      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80038ca:	f7ff fc2b 	bl	8003124 <LL_RCC_PLL_IsReady>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f1      	beq.n	80038b8 <HAL_RCC_OscConfig+0x668>
 80038d4:	e04f      	b.n	8003976 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	f7ff fc17 	bl	8003108 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e4:	f023 0303 	bic.w	r3, r3, #3
 80038e8:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe f8db 	bl	8001ab8 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe f8d7 	bl	8001ab8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b0a      	cmp	r3, #10
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e02f      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003918:	f7ff fc04 	bl	8003124 <LL_RCC_PLL_IsReady>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f1      	bne.n	8003906 <HAL_RCC_OscConfig+0x6b6>
 8003922:	e028      	b.n	8003976 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e023      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0203 	and.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	429a      	cmp	r2, r3
 8003944:	d115      	bne.n	8003972 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	429a      	cmp	r2, r3
 8003952:	d10e      	bne.n	8003972 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	429a      	cmp	r2, r3
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	11c1808c 	.word	0x11c1808c

08003984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e12c      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b98      	ldr	r3, [pc, #608]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d91b      	bls.n	80039de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b95      	ldr	r3, [pc, #596]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	4993      	ldr	r1, [pc, #588]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b6:	f7fe f87f 	bl	8001ab8 <HAL_GetTick>
 80039ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039be:	f7fe f87b 	bl	8001ab8 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e110      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d0:	4b8a      	ldr	r3, [pc, #552]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d1ef      	bne.n	80039be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff faea 	bl	8002fc8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039f4:	f7fe f860 	bl	8001ab8 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039fc:	f7fe f85c 	bl	8001ab8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0f1      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a0e:	f7ff fbc7 	bl	80031a0 <LL_RCC_IsActiveFlag_HPRE>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f1      	beq.n	80039fc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d016      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fae0 	bl	8002fee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a2e:	f7fe f843 	bl	8001ab8 <HAL_GetTick>
 8003a32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a36:	f7fe f83f 	bl	8001ab8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0d4      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a48:	f7ff fbbb 	bl	80031c2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f1      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fad8 	bl	8003018 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a68:	f7fe f826 	bl	8001ab8 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a70:	f7fe f822 	bl	8001ab8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0b7      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a82:	f7ff fbb0 	bl	80031e6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f1      	beq.n	8003a70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fad1 	bl	8003044 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aa2:	f7fe f809 	bl	8001ab8 <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aaa:	f7fe f805 	bl	8001ab8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e09a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003abc:	f7ff fba5 	bl	800320a <LL_RCC_IsActiveFlag_PPRE1>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f1      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fac6 	bl	800306a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ade:	f7fd ffeb 	bl	8001ab8 <HAL_GetTick>
 8003ae2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ae6:	f7fd ffe7 	bl	8001ab8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e07c      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003af8:	f7ff fb98 	bl	800322c <LL_RCC_IsActiveFlag_PPRE2>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f1      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d043      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b16:	f7ff f93e 	bl	8002d96 <LL_RCC_HSE_IsReady>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11e      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e066      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b2c:	f7ff fafa 	bl	8003124 <LL_RCC_PLL_IsReady>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e05b      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b42:	f7ff f9d8 	bl	8002ef6 <LL_RCC_MSI_IsReady>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d108      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e050      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b50:	f7ff f94e 	bl	8002df0 <LL_RCC_HSI_IsReady>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e049      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fa12 	bl	8002f8c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fd ffa6 	bl	8001ab8 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fd ffa2 	bl	8001ab8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e035      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	f7ff fa14 	bl	8002fb2 <LL_RCC_GetSysClkSource>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d1ec      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d21b      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 0207 	bic.w	r2, r3, #7
 8003bac:	4913      	ldr	r1, [pc, #76]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd ff80 	bl	8001ab8 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bbc:	f7fd ff7c 	bl	8001ab8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e011      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x278>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1ef      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bdc:	f000 f8b4 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <HAL_RCC_ClockConfig+0x27c>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCC_ClockConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd ff5a 	bl	8001aa4 <HAL_InitTick>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	58004000 	.word	0x58004000
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	f7ff f9cc 	bl	8002fb2 <LL_RCC_GetSysClkSource>
 8003c1a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c1c:	f7ff fab5 	bl	800318a <LL_RCC_PLL_GetMainSource>
 8003c20:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d139      	bne.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d136      	bne.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c34:	f7ff f96f 	bl	8002f16 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d115      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0x62>
 8003c3e:	f7ff f96a 	bl	8002f16 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x4e>
 8003c48:	f7ff f975 	bl	8002f36 <LL_RCC_MSI_GetRange>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	e005      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x5a>
 8003c56:	f7ff f979 	bl	8002f4c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a36      	ldr	r2, [pc, #216]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x134>)
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c6a:	f7ff f954 	bl	8002f16 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x7a>
 8003c74:	f7ff f95f 	bl	8002f36 <LL_RCC_MSI_GetRange>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	e005      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x86>
 8003c82:	f7ff f963 	bl	8002f4c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c86:	4603      	mov	r3, r0
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x134>)
 8003c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c94:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d115      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ca0:	e012      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d102      	bne.n	8003cae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e00c      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d109      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cb4:	f7ff f842 	bl	8002d3c <LL_RCC_HSE_IsEnabledDiv2>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cc6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc8:	f7ff f973 	bl	8002fb2 <LL_RCC_GetSysClkSource>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d12f      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cd2:	f7ff fa5a 	bl	800318a <LL_RCC_PLL_GetMainSource>
 8003cd6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0xde>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d003      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xe4>
 8003ce4:	e00d      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ce8:	60fb      	str	r3, [r7, #12]
        break;
 8003cea:	e00d      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cec:	f7ff f826 	bl	8002d3c <LL_RCC_HSE_IsEnabledDiv2>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cf8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cfa:	e005      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cfe:	60fb      	str	r3, [r7, #12]
        break;
 8003d00:	e002      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	60fb      	str	r3, [r7, #12]
        break;
 8003d06:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003d08:	f7ff fa1d 	bl	8003146 <LL_RCC_PLL_GetN>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	fb03 f402 	mul.w	r4, r3, r2
 8003d14:	f7ff fa2e 	bl	8003174 <LL_RCC_PLL_GetDivider>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d22:	f7ff fa1c 	bl	800315e <LL_RCC_PLL_GetR>
 8003d26:	4603      	mov	r3, r0
 8003d28:	0f5b      	lsrs	r3, r3, #29
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d30:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d32:	697b      	ldr	r3, [r7, #20]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	0800b374 	.word	0x0800b374
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	01e84800 	.word	0x01e84800

08003d48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b598      	push	{r3, r4, r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d4c:	f7ff ff5c 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003d50:	4604      	mov	r4, r0
 8003d52:	f7ff f99d 	bl	8003090 <LL_RCC_GetAHBPrescaler>
 8003d56:	4603      	mov	r3, r0
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	4a03      	ldr	r2, [pc, #12]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x24>)
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd98      	pop	{r3, r4, r7, pc}
 8003d6c:	0800b314 	.word	0x0800b314

08003d70 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b598      	push	{r3, r4, r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d74:	f7ff ffe8 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d78:	4604      	mov	r4, r0
 8003d7a:	f7ff f9a1 	bl	80030c0 <LL_RCC_GetAPB1Prescaler>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd98      	pop	{r3, r4, r7, pc}
 8003d90:	0800b354 	.word	0x0800b354

08003d94 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b598      	push	{r3, r4, r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d98:	f7ff ffd6 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	f7ff f99a 	bl	80030d6 <LL_RCC_GetAPB2Prescaler>
 8003da2:	4603      	mov	r3, r0
 8003da4:	0adb      	lsrs	r3, r3, #11
 8003da6:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd98      	pop	{r3, r4, r7, pc}
 8003db4:	0800b354 	.word	0x0800b354

08003db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003dd0:	f7ff f969 	bl	80030a6 <LL_RCC_GetAHB3Prescaler>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0c9c      	lsrs	r4, r3, #18
 8003df4:	f7fe ff68 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 f80b 	bl	8003e18 <RCC_SetFlashLatency>
 8003e02:	4603      	mov	r3, r0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}
 8003e0c:	0800b374 	.word	0x0800b374
 8003e10:	0800b314 	.word	0x0800b314
 8003e14:	431bde83 	.word	0x431bde83

08003e18 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08e      	sub	sp, #56	; 0x38
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003e22:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <RCC_SetFlashLatency+0xfc>)
 8003e24:	f107 0320 	add.w	r3, r7, #32
 8003e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e2c:	6018      	str	r0, [r3, #0]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003e32:	4a39      	ldr	r2, [pc, #228]	; (8003f18 <RCC_SetFlashLatency+0x100>)
 8003e34:	f107 0318 	add.w	r3, r7, #24
 8003e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e3c:	6018      	str	r0, [r3, #0]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003e42:	4a36      	ldr	r2, [pc, #216]	; (8003f1c <RCC_SetFlashLatency+0x104>)
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e4e:	2300      	movs	r3, #0
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d11d      	bne.n	8003e96 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5e:	e016      	b.n	8003e8e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e68:	4413      	add	r3, r2
 8003e6a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d808      	bhi.n	8003e88 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e7e:	4413      	add	r3, r2
 8003e80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e86:	e023      	b.n	8003ed0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9e5      	bls.n	8003e60 <RCC_SetFlashLatency+0x48>
 8003e94:	e01c      	b.n	8003ed0 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	e016      	b.n	8003eca <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d808      	bhi.n	8003ec4 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003eba:	4413      	add	r3, r2
 8003ebc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ec2:	e005      	b.n	8003ed0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d9e5      	bls.n	8003e9c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <RCC_SetFlashLatency+0x108>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 0207 	bic.w	r2, r3, #7
 8003ed8:	4911      	ldr	r1, [pc, #68]	; (8003f20 <RCC_SetFlashLatency+0x108>)
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ee0:	f7fd fdea 	bl	8001ab8 <HAL_GetTick>
 8003ee4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ee6:	e008      	b.n	8003efa <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ee8:	f7fd fde6 	bl	8001ab8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e007      	b.n	8003f0a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <RCC_SetFlashLatency+0x108>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1ef      	bne.n	8003ee8 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3738      	adds	r7, #56	; 0x38
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	0800b2bc 	.word	0x0800b2bc
 8003f18:	0800b2c4 	.word	0x0800b2c4
 8003f1c:	0800b2cc 	.word	0x0800b2cc
 8003f20:	58004000 	.word	0x58004000

08003f24 <LL_RCC_LSE_IsReady>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d101      	bne.n	8003f3c <LL_RCC_LSE_IsReady+0x18>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <LL_RCC_LSE_IsReady+0x1a>
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <LL_RCC_SetUSARTClockSource>:
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_SetI2SClockSource>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <LL_RCC_SetLPUARTClockSource>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_SetI2CClockSource>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <LL_RCC_SetLPTIMClockSource>:
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	43db      	mvns	r3, r3
 800401a:	401a      	ands	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <LL_RCC_SetRNGClockSource>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <LL_RCC_SetADCClockSource>:
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <LL_RCC_SetRTCClockSource>:
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_GetRTCClockSource>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_ForceBackupDomainReset>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_ReleaseBackupDomainReset>:
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
	...

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004118:	2300      	movs	r3, #0
 800411a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800411c:	2300      	movs	r3, #0
 800411e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d058      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800412c:	f7fe fdbe 	bl	8002cac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004130:	f7fd fcc2 	bl	8001ab8 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004136:	e009      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004138:	f7fd fcbe 	bl	8001ab8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d902      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	74fb      	strb	r3, [r7, #19]
        break;
 800414a:	e006      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800414c:	4b7b      	ldr	r3, [pc, #492]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004158:	d1ee      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13c      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004160:	f7ff ffa7 	bl	80040b2 <LL_RCC_GetRTCClockSource>
 8004164:	4602      	mov	r2, r0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	429a      	cmp	r2, r3
 800416c:	d00f      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800417c:	f7ff ffa5 	bl	80040ca <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004180:	f7ff ffb3 	bl	80040ea <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd fc8e 	bl	8001ab8 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd fc8a 	bl	8001ab8 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d902      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	74fb      	strb	r3, [r7, #19]
            break;
 80041b6:	e004      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80041b8:	f7ff feb4 	bl	8003f24 <LL_RCC_LSE_IsReady>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d1ee      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff5b 	bl	8004088 <LL_RCC_SetRTCClockSource>
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
 80041d8:	e001      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fea9 	bl	8003f46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fe9e 	bl	8003f46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fec0 	bl	8003fa0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fee6 	bl	8004002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fedb 	bl	8004002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fed0 	bl	8004002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fea9 	bl	8003fca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fe9e 	bl	8003fca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fe93 	bl	8003fca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d011      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fe5e 	bl	8003f76 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c2:	d107      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fea5 	bl	8004034 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004300:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d011      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fea3 	bl	800405e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004320:	d107      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004332:	7cbb      	ldrb	r3, [r7, #18]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	58000400 	.word	0x58000400

08004340 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d068      	beq.n	8004424 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd fafe 	bl	8001968 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <HAL_RTC_Init+0xf0>)
 8004376:	22ca      	movs	r2, #202	; 0xca
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
 800437a:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_RTC_Init+0xf0>)
 800437c:	2253      	movs	r2, #83	; 0x53
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9fb 	bl	800477c <RTC_EnterInitMode>
 8004386:	4603      	mov	r3, r0
 8004388:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d13f      	bne.n	8004410 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <HAL_RTC_Init+0xf0>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	4a26      	ldr	r2, [pc, #152]	; (8004430 <HAL_RTC_Init+0xf0>)
 8004396:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800439a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80043a0:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_RTC_Init+0xf0>)
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	4319      	orrs	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	430b      	orrs	r3, r1
 80043b4:	491e      	ldr	r1, [pc, #120]	; (8004430 <HAL_RTC_Init+0xf0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	491a      	ldr	r1, [pc, #104]	; (8004430 <HAL_RTC_Init+0xf0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_RTC_Init+0xf0>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	430b      	orrs	r3, r1
 80043dc:	4914      	ldr	r1, [pc, #80]	; (8004430 <HAL_RTC_Init+0xf0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9fe 	bl	80047e4 <RTC_ExitInitMode>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10e      	bne.n	8004410 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_RTC_Init+0xf0>)
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a19      	ldr	r1, [r3, #32]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4319      	orrs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	430b      	orrs	r3, r1
 800440a:	4909      	ldr	r1, [pc, #36]	; (8004430 <HAL_RTC_Init+0xf0>)
 800440c:	4313      	orrs	r3, r2
 800440e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_RTC_Init+0xf0>)
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40002800 	.word	0x40002800

08004434 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_RTC_SetAlarm_IT+0x1e>
 800444e:	2302      	movs	r3, #2
 8004450:	e0e5      	b.n	800461e <HAL_RTC_SetAlarm_IT+0x1ea>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004462:	4b71      	ldr	r3, [pc, #452]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d05c      	beq.n	800452e <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d136      	bne.n	80044e8 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800447a:	4b6b      	ldr	r3, [pc, #428]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f9e5 	bl	8004860 <RTC_ByteToBcd2>
 8004496:	4603      	mov	r3, r0
 8004498:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f9de 	bl	8004860 <RTC_ByteToBcd2>
 80044a4:	4603      	mov	r3, r0
 80044a6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044a8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	789b      	ldrb	r3, [r3, #2]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f9d6 	bl	8004860 <RTC_ByteToBcd2>
 80044b4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044b6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044c0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f9c8 	bl	8004860 <RTC_ByteToBcd2>
 80044d0:	4603      	mov	r3, r0
 80044d2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044d4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044dc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e022      	b.n	800452e <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044e8:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004506:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800450c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	78db      	ldrb	r3, [r3, #3]
 8004512:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004514:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800451c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800451e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004524:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004530:	22ca      	movs	r2, #202	; 0xca
 8004532:	625a      	str	r2, [r3, #36]	; 0x24
 8004534:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004536:	2253      	movs	r2, #83	; 0x53
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004542:	d12c      	bne.n	800459e <HAL_RTC_SetAlarm_IT+0x16a>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004544:	4b38      	ldr	r3, [pc, #224]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4a37      	ldr	r2, [pc, #220]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800454a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800454e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004550:	4b35      	ldr	r3, [pc, #212]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004552:	2201      	movs	r2, #1
 8004554:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455c:	d107      	bne.n	800456e <HAL_RTC_SetAlarm_IT+0x13a>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4930      	ldr	r1, [pc, #192]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004568:	4313      	orrs	r3, r2
 800456a:	644b      	str	r3, [r1, #68]	; 0x44
 800456c:	e006      	b.n	800457c <HAL_RTC_SetAlarm_IT+0x148>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800456e:	4a2e      	ldr	r2, [pc, #184]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004574:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800457c:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	4a24      	ldr	r2, [pc, #144]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004596:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800459a:	6193      	str	r3, [r2, #24]
 800459c:	e02b      	b.n	80045f6 <HAL_RTC_SetAlarm_IT+0x1c2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800459e:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045a4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80045a8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045ac:	2202      	movs	r2, #2
 80045ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d107      	bne.n	80045c8 <HAL_RTC_SetAlarm_IT+0x194>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4919      	ldr	r1, [pc, #100]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045c6:	e006      	b.n	80045d6 <HAL_RTC_SetAlarm_IT+0x1a2>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80045ce:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80045d6:	4a14      	ldr	r2, [pc, #80]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045f0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80045f4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RTC_SetAlarm_IT+0x1f8>)
 80045f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_RTC_SetAlarm_IT+0x1f8>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004608:	22ff      	movs	r2, #255	; 0xff
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd90      	pop	{r4, r7, pc}
 8004626:	bf00      	nop
 8004628:	40002800 	.word	0x40002800
 800462c:	58000800 	.word	0x58000800

08004630 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_RTC_DeactivateAlarm+0x18>
 8004644:	2302      	movs	r3, #2
 8004646:	e042      	b.n	80046ce <HAL_RTC_DeactivateAlarm+0x9e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004658:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 800465a:	22ca      	movs	r2, #202	; 0xca
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004660:	2253      	movs	r2, #83	; 0x53
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466a:	d112      	bne.n	8004692 <HAL_RTC_DeactivateAlarm+0x62>
  {
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004676:	6453      	str	r3, [r2, #68]	; 0x44

    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 800467e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004682:	6193      	str	r3, [r2, #24]

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f023 0201 	bic.w	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
 8004690:	e011      	b.n	80046b6 <HAL_RTC_DeactivateAlarm+0x86>
  }
  else
  {
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800469c:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 80046a4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80046a8:	6193      	str	r3, [r2, #24]

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f023 0202 	bic.w	r2, r3, #2
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_RTC_DeactivateAlarm+0xa8>)
 80046b8:	22ff      	movs	r2, #255	; 0xff
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40002800 	.word	0x40002800

080046dc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RTC_AlarmIRQHandler+0x50>)
 80046e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RTC_AlarmIRQHandler+0x50>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fd fbe9 	bl	8001ed8 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004712:	2202      	movs	r2, #2
 8004714:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f94a 	bl	80049b0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40002800 	.word	0x40002800

08004730 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RTC_WaitForSynchro+0x48>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_RTC_WaitForSynchro+0x48>)
 800473e:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8004742:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004744:	f7fd f9b8 	bl	8001ab8 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800474a:	e009      	b.n	8004760 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800474c:	f7fd f9b4 	bl	8001ab8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800475a:	d901      	bls.n	8004760 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e006      	b.n	800476e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RTC_WaitForSynchro+0x48>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ef      	beq.n	800474c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40002800 	.word	0x40002800

0800477c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <RTC_EnterInitMode+0x64>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d120      	bne.n	80047d6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <RTC_EnterInitMode+0x64>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <RTC_EnterInitMode+0x64>)
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80047a0:	f7fd f98a 	bl	8001ab8 <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047a6:	e00d      	b.n	80047c4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047a8:	f7fd f986 	bl	8001ab8 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b6:	d905      	bls.n	80047c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2203      	movs	r2, #3
 80047c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <RTC_EnterInitMode+0x64>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <RTC_EnterInitMode+0x5a>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d1e8      	bne.n	80047a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40002800 	.word	0x40002800

080047e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <RTC_ExitInitMode+0x78>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <RTC_ExitInitMode+0x78>)
 80047f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80047fc:	4b17      	ldr	r3, [pc, #92]	; (800485c <RTC_ExitInitMode+0x78>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff91 	bl	8004730 <HAL_RTC_WaitForSynchro>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01e      	beq.n	8004852 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2203      	movs	r2, #3
 8004818:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	73fb      	strb	r3, [r7, #15]
 8004820:	e017      	b.n	8004852 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <RTC_ExitInitMode+0x78>)
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	4a0d      	ldr	r2, [pc, #52]	; (800485c <RTC_ExitInitMode+0x78>)
 8004828:	f023 0320 	bic.w	r3, r3, #32
 800482c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff ff7e 	bl	8004730 <HAL_RTC_WaitForSynchro>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2203      	movs	r2, #3
 800483e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <RTC_ExitInitMode+0x78>)
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	4a04      	ldr	r2, [pc, #16]	; (800485c <RTC_ExitInitMode+0x78>)
 800484c:	f043 0320 	orr.w	r3, r3, #32
 8004850:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40002800 	.word	0x40002800

08004860 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004872:	e005      	b.n	8004880 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	3b0a      	subs	r3, #10
 800487e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004880:	7afb      	ldrb	r3, [r7, #11]
 8004882:	2b09      	cmp	r3, #9
 8004884:	d8f6      	bhi.n	8004874 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	b2da      	uxtb	r2, r3
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	4313      	orrs	r3, r2
 8004892:	b2db      	uxtb	r3, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e01f      	b.n	80048f6 <HAL_RTCEx_EnableBypassShadow+0x56>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048c8:	22ca      	movs	r2, #202	; 0xca
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048ce:	2253      	movs	r2, #83	; 0x53
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048d8:	f043 0320 	orr.w	r3, r3, #32
 80048dc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048e0:	22ff      	movs	r2, #255	; 0xff
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	40002800 	.word	0x40002800

08004904 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_RTCEx_SetSSRU_IT+0x16>
 8004916:	2302      	movs	r3, #2
 8004918:	e027      	b.n	800496a <HAL_RTCEx_SetSSRU_IT+0x66>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800492c:	22ca      	movs	r2, #202	; 0xca
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004932:	2253      	movs	r2, #83	; 0x53
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	4a0e      	ldr	r2, [pc, #56]	; (8004974 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800494a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800494e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004954:	22ff      	movs	r2, #255	; 0xff
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	40002800 	.word	0x40002800
 8004978:	58000800 	.word	0x58000800

0800497c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd faa8 	bl	8001eec <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40002800 	.word	0x40002800

080049b0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80049d2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4413      	add	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	4000b100 	.word	0x4000b100

080049f4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_RTCEx_BKUPRead+0x28>)
 8004a00:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	4000b100 	.word	0x4000b100

08004a20 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	58000400 	.word	0x58000400

08004a40 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	58000400 	.word	0x58000400

08004a60 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d101      	bne.n	8004a74 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	58000400 	.word	0x58000400

08004a84 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d101      	bne.n	8004a98 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	58000400 	.word	0x58000400

08004aa8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	72fb      	strb	r3, [r7, #11]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	799b      	ldrb	r3, [r3, #6]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d14a      	bne.n	8004b5c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	795b      	ldrb	r3, [r3, #5]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e045      	b.n	8004b5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f9c5 	bl	8004e68 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	2b84      	cmp	r3, #132	; 0x84
 8004ae2:	d002      	beq.n	8004aea <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	2b94      	cmp	r3, #148	; 0x94
 8004ae8:	d103      	bne.n	8004af2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	711a      	strb	r2, [r3, #4]
 8004af0:	e002      	b.n	8004af8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004af8:	f7ff ffa2 	bl	8004a40 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f903 	bl	8004d0c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	82bb      	strh	r3, [r7, #20]
 8004b0a:	e00a      	b.n	8004b22 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b0c:	8abb      	ldrh	r3, [r7, #20]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f8f8 	bl	8004d0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b1c:	8abb      	ldrh	r3, [r7, #20]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	82bb      	strh	r3, [r7, #20]
 8004b22:	8aba      	ldrh	r2, [r7, #20]
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d3f0      	bcc.n	8004b0c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b2a:	f7ff ff79 	bl	8004a20 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
 8004b30:	2b84      	cmp	r3, #132	; 0x84
 8004b32:	d002      	beq.n	8004b3a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f9af 	bl	8004e98 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
 8004b46:	e001      	b.n	8004b4c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	715a      	strb	r2, [r3, #5]

    return status;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	e000      	b.n	8004b5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b088      	sub	sp, #32
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	461a      	mov	r2, r3
 8004b72:	460b      	mov	r3, r1
 8004b74:	72fb      	strb	r3, [r7, #11]
 8004b76:	4613      	mov	r3, r2
 8004b78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	799b      	ldrb	r3, [r3, #6]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d13d      	bne.n	8004c04 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	795b      	ldrb	r3, [r3, #5]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e038      	b.n	8004c06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f964 	bl	8004e68 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ba0:	f7ff ff4e 	bl	8004a40 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f8af 	bl	8004d0c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f8ab 	bl	8004d0c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	82fb      	strh	r3, [r7, #22]
 8004bba:	e009      	b.n	8004bd0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bbc:	69b9      	ldr	r1, [r7, #24]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f8fa 	bl	8004db8 <SUBGHZSPI_Receive>
      pData++;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004bca:	8afb      	ldrh	r3, [r7, #22]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	82fb      	strh	r3, [r7, #22]
 8004bd0:	8afa      	ldrh	r2, [r7, #22]
 8004bd2:	893b      	ldrh	r3, [r7, #8]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3f1      	bcc.n	8004bbc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004bd8:	f7ff ff22 	bl	8004a20 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f95b 	bl	8004e98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e001      	b.n	8004bf4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	715a      	strb	r2, [r3, #5]

    return status;
 8004c00:	7ffb      	ldrb	r3, [r7, #31]
 8004c02:	e000      	b.n	8004c06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004c16:	2300      	movs	r3, #0
 8004c18:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004c1a:	f107 020c 	add.w	r2, r7, #12
 8004c1e:	2302      	movs	r3, #2
 8004c20:	2112      	movs	r1, #18
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff ff9f 	bl	8004b66 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004c28:	7b3b      	ldrb	r3, [r7, #12]
 8004c2a:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	7b7b      	ldrb	r3, [r7, #13]
 8004c34:	b21b      	sxth	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c3c:	89fb      	ldrh	r3, [r7, #14]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f001 fcae 	bl	80065a8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004c4c:	89fb      	ldrh	r3, [r7, #14]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 fcb3 	bl	80065c4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c5e:	89fb      	ldrh	r3, [r7, #14]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 fd02 	bl	8006674 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	08db      	lsrs	r3, r3, #3
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 fd07 	bl	8006690 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004c82:	89fb      	ldrh	r3, [r7, #14]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fd0c 	bl	80066ac <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fcd9 	bl	8006658 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 fc94 	bl	80065e0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	09db      	lsrs	r3, r3, #7
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 fc92 	bl	80065fc <HAL_SUBGHZ_CADStatusCallback>
 8004cd8:	e003      	b.n	8004ce2 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004cda:	2100      	movs	r1, #0
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fc8d 	bl	80065fc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	0a5b      	lsrs	r3, r3, #9
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 fca2 	bl	8006638 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004cf4:	f107 020c 	add.w	r2, r7, #12
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fed3 	bl	8004aa8 <HAL_SUBGHZ_ExecSetCmd>
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <SUBGHZSPI_Transmit+0xa0>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	0cdb      	lsrs	r3, r3, #19
 8004d2a:	2264      	movs	r2, #100	; 0x64
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	609a      	str	r2, [r3, #8]
      break;
 8004d42:	e008      	b.n	8004d56 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d4a:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <SUBGHZSPI_Transmit+0xa4>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d1ed      	bne.n	8004d32 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d56:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <SUBGHZSPI_Transmit+0xa8>)
 8004d58:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <SUBGHZSPI_Transmit+0xa0>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	0cdb      	lsrs	r3, r3, #19
 8004d6e:	2264      	movs	r2, #100	; 0x64
 8004d70:	fb02 f303 	mul.w	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	609a      	str	r2, [r3, #8]
      break;
 8004d86:	e008      	b.n	8004d9a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <SUBGHZSPI_Transmit+0xa4>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d1ed      	bne.n	8004d76 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <SUBGHZSPI_Transmit+0xa4>)
 8004d9c:	68db      	ldr	r3, [r3, #12]

  return status;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000000 	.word	0x20000000
 8004db0:	58010000 	.word	0x58010000
 8004db4:	5801000c 	.word	0x5801000c

08004db8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dc6:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <SUBGHZSPI_Receive+0xa4>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	0cdb      	lsrs	r3, r3, #19
 8004dd4:	2264      	movs	r2, #100	; 0x64
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	609a      	str	r2, [r3, #8]
      break;
 8004dec:	e008      	b.n	8004e00 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <SUBGHZSPI_Receive+0xa8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d1ed      	bne.n	8004ddc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e00:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <SUBGHZSPI_Receive+0xac>)
 8004e02:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	22ff      	movs	r2, #255	; 0xff
 8004e08:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <SUBGHZSPI_Receive+0xa4>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	0cdb      	lsrs	r3, r3, #19
 8004e18:	2264      	movs	r2, #100	; 0x64
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e008      	b.n	8004e44 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <SUBGHZSPI_Receive+0xa8>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d1ed      	bne.n	8004e20 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <SUBGHZSPI_Receive+0xa8>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]

  return status;
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	58010000 	.word	0x58010000
 8004e64:	5801000c 	.word	0x5801000c

08004e68 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	791b      	ldrb	r3, [r3, #4]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <SUBGHZ_CheckDeviceReady+0x1e>
  {
    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004e78:	f7ff fde2 	bl	8004a40 <LL_PWR_SelectSUBGHZSPI_NSS>

    HAL_Delay(1);
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7fc fe22 	bl	8001ac6 <HAL_Delay>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004e82:	f7ff fdcd 	bl	8004a20 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f806 	bl	8004e98 <SUBGHZ_WaitOnBusy>
 8004e8c:	4603      	mov	r3, r0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <SUBGHZ_WaitOnBusy+0x58>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	0d1b      	lsrs	r3, r3, #20
 8004eb2:	2264      	movs	r2, #100	; 0x64
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004eba:	f7ff fde3 	bl	8004a84 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004ebe:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d105      	bne.n	8004ed2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e009      	b.n	8004ee6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004ed8:	f7ff fdc2 	bl	8004a60 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d0e9      	beq.n	8004eba <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000000 	.word	0x20000000

08004ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e049      	b.n	8004f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f841 	bl	8004fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 f8c4 	bl	80050c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e02e      	b.n	800502a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <HAL_TIM_Base_Start+0x80>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_TIM_Base_Start+0x34>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d115      	bne.n	8005014 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_TIM_Base_Start+0x84>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d015      	beq.n	8005026 <HAL_TIM_Base_Start+0x72>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d011      	beq.n	8005026 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	e008      	b.n	8005026 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e000      	b.n	8005028 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	40012c00 	.word	0x40012c00
 8005038:	00010007 	.word	0x00010007

0800503c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e031      	b.n	80050b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f88c 	bl	8005184 <TIM_SlaveTimer_SetConfig>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e018      	b.n	80050b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005094:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a29      	ldr	r2, [pc, #164]	; (8005178 <TIM_Base_SetConfig+0xb8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_Base_SetConfig+0x20>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d108      	bne.n	80050f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <TIM_Base_SetConfig+0xb8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00b      	beq.n	8005112 <TIM_Base_SetConfig+0x52>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d007      	beq.n	8005112 <TIM_Base_SetConfig+0x52>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_Base_SetConfig+0xbc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_Base_SetConfig+0x52>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_Base_SetConfig+0xc0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a0b      	ldr	r2, [pc, #44]	; (8005178 <TIM_Base_SetConfig+0xb8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_Base_SetConfig+0xa0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a0a      	ldr	r2, [pc, #40]	; (800517c <TIM_Base_SetConfig+0xbc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_Base_SetConfig+0xa0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <TIM_Base_SetConfig+0xc0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d103      	bne.n	8005168 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	615a      	str	r2, [r3, #20]
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	f023 0307 	bic.w	r3, r3, #7
 80051b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b70      	cmp	r3, #112	; 0x70
 80051d0:	d01a      	beq.n	8005208 <TIM_SlaveTimer_SetConfig+0x84>
 80051d2:	2b70      	cmp	r3, #112	; 0x70
 80051d4:	d860      	bhi.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
 80051d6:	2b60      	cmp	r3, #96	; 0x60
 80051d8:	d054      	beq.n	8005284 <TIM_SlaveTimer_SetConfig+0x100>
 80051da:	2b60      	cmp	r3, #96	; 0x60
 80051dc:	d85c      	bhi.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
 80051de:	2b50      	cmp	r3, #80	; 0x50
 80051e0:	d046      	beq.n	8005270 <TIM_SlaveTimer_SetConfig+0xec>
 80051e2:	2b50      	cmp	r3, #80	; 0x50
 80051e4:	d858      	bhi.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d019      	beq.n	800521e <TIM_SlaveTimer_SetConfig+0x9a>
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d854      	bhi.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
 80051ee:	2b30      	cmp	r3, #48	; 0x30
 80051f0:	d054      	beq.n	800529c <TIM_SlaveTimer_SetConfig+0x118>
 80051f2:	2b30      	cmp	r3, #48	; 0x30
 80051f4:	d850      	bhi.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d050      	beq.n	800529c <TIM_SlaveTimer_SetConfig+0x118>
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d84c      	bhi.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d04c      	beq.n	800529c <TIM_SlaveTimer_SetConfig+0x118>
 8005202:	2b10      	cmp	r3, #16
 8005204:	d04a      	beq.n	800529c <TIM_SlaveTimer_SetConfig+0x118>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005206:	e047      	b.n	8005298 <TIM_SlaveTimer_SetConfig+0x114>
      TIM_ETR_SetConfig(htim->Instance,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f000 f8a3 	bl	8005362 <TIM_ETR_SetConfig>
      break;
 800521c:	e03f      	b.n	800529e <TIM_SlaveTimer_SetConfig+0x11a>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d101      	bne.n	800522a <TIM_SlaveTimer_SetConfig+0xa6>
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e03a      	b.n	80052a0 <TIM_SlaveTimer_SetConfig+0x11c>
      tmpccer = htim->Instance->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005250:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
      break;
 800526e:	e016      	b.n	800529e <TIM_SlaveTimer_SetConfig+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6899      	ldr	r1, [r3, #8]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	461a      	mov	r2, r3
 800527e:	f000 f813 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      break;
 8005282:	e00c      	b.n	800529e <TIM_SlaveTimer_SetConfig+0x11a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	461a      	mov	r2, r3
 8005292:	f000 f837 	bl	8005304 <TIM_TI2_ConfigInputStage>
      break;
 8005296:	e002      	b.n	800529e <TIM_SlaveTimer_SetConfig+0x11a>
      break;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <TIM_SlaveTimer_SetConfig+0x11a>
        break;
 800529c:	bf00      	nop
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 030a 	bic.w	r3, r3, #10
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f023 0210 	bic.w	r2, r3, #16
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800532e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	031b      	lsls	r3, r3, #12
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	021a      	lsls	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	431a      	orrs	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4313      	orrs	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	609a      	str	r2, [r3, #8]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e04a      	b.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d108      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a11      	ldr	r2, [pc, #68]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d10c      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4313      	orrs	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00

0800545c <LL_RCC_GetUSARTClockSource>:
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005468:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	401a      	ands	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	4313      	orrs	r3, r2
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <LL_RCC_GetLPUARTClockSource>:
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4013      	ands	r3, r2
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e042      	b.n	8005536 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fc fdca 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fb0b 	bl	8005afc <UART_SetConfig>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e022      	b.n	8005536 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fd4f 	bl	8005f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800550c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800551c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fdd5 	bl	80060de <UART_CheckIdleState>
 8005534:	4603      	mov	r3, r0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b08a      	sub	sp, #40	; 0x28
 8005542:	af02      	add	r7, sp, #8
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	2b20      	cmp	r3, #32
 8005556:	f040 8083 	bne.w	8005660 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_UART_Transmit+0x28>
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07b      	b.n	8005662 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_UART_Transmit+0x3a>
 8005574:	2302      	movs	r3, #2
 8005576:	e074      	b.n	8005662 <HAL_UART_Transmit+0x124>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005590:	f7fc fa92 	bl	8001ab8 <HAL_GetTick>
 8005594:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d108      	bne.n	80055c2 <HAL_UART_Transmit+0x84>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e003      	b.n	80055ca <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80055d2:	e02c      	b.n	800562e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2200      	movs	r2, #0
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fdc8 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e039      	b.n	8005662 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	3302      	adds	r3, #2
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e007      	b.n	800561c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cc      	bne.n	80055d4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	; 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fd95 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005692:	4013      	ands	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d118      	bne.n	80056ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d013      	beq.n	80056ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 81fb 	beq.w	8005aba <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
      }
      return;
 80056cc:	e1f5      	b.n	8005aba <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80ef 	beq.w	80058b4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4b73      	ldr	r3, [pc, #460]	; (80058a8 <HAL_UART_IRQHandler+0x23c>)
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4b72      	ldr	r3, [pc, #456]	; (80058ac <HAL_UART_IRQHandler+0x240>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80e4 	beq.w	80058b4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_UART_IRQHandler+0xac>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2201      	movs	r2, #1
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570e:	f043 0201 	orr.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_UART_IRQHandler+0xd8>
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2202      	movs	r2, #2
 8005732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d010      	beq.n	8005770 <HAL_UART_IRQHandler+0x104>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2204      	movs	r2, #4
 800575e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d015      	beq.n	80057a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4b48      	ldr	r3, [pc, #288]	; (80058a8 <HAL_UART_IRQHandler+0x23c>)
 8005788:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2208      	movs	r2, #8
 8005794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579c:	f043 0208 	orr.w	r2, r3, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_UART_IRQHandler+0x168>
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 816f 	beq.w	8005abe <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005814:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d004      	beq.n	800582e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d031      	beq.n	8005892 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fd20 	bl	8006274 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d123      	bne.n	800588a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005850:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d013      	beq.n	8005882 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585e:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_UART_IRQHandler+0x244>)
 8005860:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc fed0 	bl	800260c <HAL_DMA_Abort_IT>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d017      	beq.n	80058a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005880:	e00f      	b.n	80058a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f926 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	e00b      	b.n	80058a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f922 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	e007      	b.n	80058a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f91e 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80058a0:	e10d      	b.n	8005abe <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a2:	bf00      	nop
    return;
 80058a4:	e10b      	b.n	8005abe <HAL_UART_IRQHandler+0x452>
 80058a6:	bf00      	nop
 80058a8:	10000001 	.word	0x10000001
 80058ac:	04000120 	.word	0x04000120
 80058b0:	080062d7 	.word	0x080062d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f040 80ab 	bne.w	8005a14 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80a5 	beq.w	8005a14 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 809f 	beq.w	8005a14 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2210      	movs	r2, #16
 80058dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d155      	bne.n	8005998 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80e2 	beq.w	8005ac2 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005904:	893a      	ldrh	r2, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	f080 80db 	bcs.w	8005ac2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	893a      	ldrh	r2, [r7, #8]
 8005910:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d12b      	bne.n	800597c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005932:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005952:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0210 	bic.w	r2, r2, #16
 8005970:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005976:	4618      	mov	r0, r3
 8005978:	f7fc fdea 	bl	8002550 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005988:	b29b      	uxth	r3, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	b29b      	uxth	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f8a8 	bl	8005ae6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005996:	e094      	b.n	8005ac2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8087 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80059b8:	897b      	ldrh	r3, [r7, #10]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8083 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0210 	bic.w	r2, r2, #16
 8005a06:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a08:	897b      	ldrh	r3, [r7, #10]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f86a 	bl	8005ae6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a12:	e058      	b.n	8005ac6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <HAL_UART_IRQHandler+0x3ce>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fc7f 	bl	8006336 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a38:	e048      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d012      	beq.n	8005a6a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d034      	beq.n	8005aca <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
    }
    return;
 8005a68:	e02f      	b.n	8005aca <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_UART_IRQHandler+0x41a>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fc3f 	bl	8006302 <UART_EndTransmit_IT>
    return;
 8005a84:	e022      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x436>
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fc5d 	bl	800635a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aa0:	e014      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_UART_IRQHandler+0x460>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da0c      	bge.n	8005acc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc48 	bl	8006348 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ab8:	e008      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
      return;
 8005aba:	bf00      	nop
 8005abc:	e006      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
    return;
 8005abe:	bf00      	nop
 8005ac0:	e004      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
      return;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
      return;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_UART_IRQHandler+0x460>
    return;
 8005aca:	bf00      	nop
  }
}
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b5b0      	push	{r4, r5, r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4bab      	ldr	r3, [pc, #684]	; (8005dd4 <UART_SetConfig+0x2d8>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	69f9      	ldr	r1, [r7, #28]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4aa0      	ldr	r2, [pc, #640]	; (8005dd8 <UART_SetConfig+0x2dc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	69f9      	ldr	r1, [r7, #28]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	f023 010f 	bic.w	r1, r3, #15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a91      	ldr	r2, [pc, #580]	; (8005ddc <UART_SetConfig+0x2e0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d122      	bne.n	8005be2 <UART_SetConfig+0xe6>
 8005b9c:	2003      	movs	r0, #3
 8005b9e:	f7ff fc5d 	bl	800545c <LL_RCC_GetUSARTClockSource>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d817      	bhi.n	8005bdc <UART_SetConfig+0xe0>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0xb8>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bd1 	.word	0x08005bd1
 8005bbc:	08005bcb 	.word	0x08005bcb
 8005bc0:	08005bd7 	.word	0x08005bd7
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	76fb      	strb	r3, [r7, #27]
 8005bc8:	e072      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	76fb      	strb	r3, [r7, #27]
 8005bce:	e06f      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	76fb      	strb	r3, [r7, #27]
 8005bd4:	e06c      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	76fb      	strb	r3, [r7, #27]
 8005bda:	e069      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	76fb      	strb	r3, [r7, #27]
 8005be0:	e066      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a7e      	ldr	r2, [pc, #504]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d134      	bne.n	8005c56 <UART_SetConfig+0x15a>
 8005bec:	200c      	movs	r0, #12
 8005bee:	f7ff fc35 	bl	800545c <LL_RCC_GetUSARTClockSource>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	d829      	bhi.n	8005c50 <UART_SetConfig+0x154>
 8005bfc:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x108>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005c51 	.word	0x08005c51
 8005c0c:	08005c51 	.word	0x08005c51
 8005c10:	08005c51 	.word	0x08005c51
 8005c14:	08005c45 	.word	0x08005c45
 8005c18:	08005c51 	.word	0x08005c51
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c51 	.word	0x08005c51
 8005c24:	08005c3f 	.word	0x08005c3f
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c51 	.word	0x08005c51
 8005c34:	08005c4b 	.word	0x08005c4b
 8005c38:	2300      	movs	r3, #0
 8005c3a:	76fb      	strb	r3, [r7, #27]
 8005c3c:	e038      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	76fb      	strb	r3, [r7, #27]
 8005c42:	e035      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c44:	2304      	movs	r3, #4
 8005c46:	76fb      	strb	r3, [r7, #27]
 8005c48:	e032      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	76fb      	strb	r3, [r7, #27]
 8005c4e:	e02f      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c50:	2310      	movs	r3, #16
 8005c52:	76fb      	strb	r3, [r7, #27]
 8005c54:	e02c      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a5f      	ldr	r2, [pc, #380]	; (8005dd8 <UART_SetConfig+0x2dc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d125      	bne.n	8005cac <UART_SetConfig+0x1b0>
 8005c60:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005c64:	f7ff fc0c 	bl	8005480 <LL_RCC_GetLPUARTClockSource>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c6e:	d017      	beq.n	8005ca0 <UART_SetConfig+0x1a4>
 8005c70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c74:	d817      	bhi.n	8005ca6 <UART_SetConfig+0x1aa>
 8005c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7a:	d00b      	beq.n	8005c94 <UART_SetConfig+0x198>
 8005c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c80:	d811      	bhi.n	8005ca6 <UART_SetConfig+0x1aa>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <UART_SetConfig+0x192>
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8a:	d006      	beq.n	8005c9a <UART_SetConfig+0x19e>
 8005c8c:	e00b      	b.n	8005ca6 <UART_SetConfig+0x1aa>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	76fb      	strb	r3, [r7, #27]
 8005c92:	e00d      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c94:	2302      	movs	r3, #2
 8005c96:	76fb      	strb	r3, [r7, #27]
 8005c98:	e00a      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	76fb      	strb	r3, [r7, #27]
 8005c9e:	e007      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	76fb      	strb	r3, [r7, #27]
 8005ca4:	e004      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	76fb      	strb	r3, [r7, #27]
 8005caa:	e001      	b.n	8005cb0 <UART_SetConfig+0x1b4>
 8005cac:	2310      	movs	r3, #16
 8005cae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a48      	ldr	r2, [pc, #288]	; (8005dd8 <UART_SetConfig+0x2dc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f040 8098 	bne.w	8005dec <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cbc:	7efb      	ldrb	r3, [r7, #27]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d823      	bhi.n	8005d0a <UART_SetConfig+0x20e>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <UART_SetConfig+0x1cc>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005d0b 	.word	0x08005d0b
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005d0b 	.word	0x08005d0b
 8005cd8:	08005cfb 	.word	0x08005cfb
 8005cdc:	08005d0b 	.word	0x08005d0b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d0b 	.word	0x08005d0b
 8005ce8:	08005d03 	.word	0x08005d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe f840 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	6178      	str	r0, [r7, #20]
        break;
 8005cf2:	e00f      	b.n	8005d14 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf4:	4b3b      	ldr	r3, [pc, #236]	; (8005de4 <UART_SetConfig+0x2e8>)
 8005cf6:	617b      	str	r3, [r7, #20]
        break;
 8005cf8:	e00c      	b.n	8005d14 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfa:	f7fd ff85 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8005cfe:	6178      	str	r0, [r7, #20]
        break;
 8005d00:	e008      	b.n	8005d14 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d06:	617b      	str	r3, [r7, #20]
        break;
 8005d08:	e004      	b.n	8005d14 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	76bb      	strb	r3, [r7, #26]
        break;
 8005d12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8128 	beq.w	8005f6c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	4a31      	ldr	r2, [pc, #196]	; (8005de8 <UART_SetConfig+0x2ec>)
 8005d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d26:	461a      	mov	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	4413      	add	r3, r2
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d305      	bcc.n	8005d4c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d902      	bls.n	8005d52 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	76bb      	strb	r3, [r7, #26]
 8005d50:	e10c      	b.n	8005f6c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <UART_SetConfig+0x2ec>)
 8005d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	f7fb f873 	bl	8000e54 <__aeabi_uldivmod>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4610      	mov	r0, r2
 8005d74:	4619      	mov	r1, r3
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	020b      	lsls	r3, r1, #8
 8005d80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d84:	0202      	lsls	r2, r0, #8
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	6849      	ldr	r1, [r1, #4]
 8005d8a:	0849      	lsrs	r1, r1, #1
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	1814      	adds	r4, r2, r0
 8005d94:	eb43 0501 	adc.w	r5, r3, r1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	4620      	mov	r0, r4
 8005da4:	4629      	mov	r1, r5
 8005da6:	f7fb f855 	bl	8000e54 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4613      	mov	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db8:	d308      	bcc.n	8005dcc <UART_SetConfig+0x2d0>
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc0:	d204      	bcs.n	8005dcc <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	e0cf      	b.n	8005f6c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	76bb      	strb	r3, [r7, #26]
 8005dd0:	e0cc      	b.n	8005f6c <UART_SetConfig+0x470>
 8005dd2:	bf00      	nop
 8005dd4:	cfff69f3 	.word	0xcfff69f3
 8005dd8:	40008000 	.word	0x40008000
 8005ddc:	40013800 	.word	0x40013800
 8005de0:	40004400 	.word	0x40004400
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	0800b3b4 	.word	0x0800b3b4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df4:	d165      	bne.n	8005ec2 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8005df6:	7efb      	ldrb	r3, [r7, #27]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d828      	bhi.n	8005e4e <UART_SetConfig+0x352>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x308>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08005e4f 	.word	0x08005e4f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e4f 	.word	0x08005e4f
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e4f 	.word	0x08005e4f
 8005e24:	08005e47 	.word	0x08005e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fd ffa2 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	6178      	str	r0, [r7, #20]
        break;
 8005e2e:	e013      	b.n	8005e58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fd ffb0 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005e34:	6178      	str	r0, [r7, #20]
        break;
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b56      	ldr	r3, [pc, #344]	; (8005f94 <UART_SetConfig+0x498>)
 8005e3a:	617b      	str	r3, [r7, #20]
        break;
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fd fee3 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8005e42:	6178      	str	r0, [r7, #20]
        break;
 8005e44:	e008      	b.n	8005e58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	617b      	str	r3, [r7, #20]
        break;
 8005e4c:	e004      	b.n	8005e58 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	76bb      	strb	r3, [r7, #26]
        break;
 8005e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8086 	beq.w	8005f6c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4a4c      	ldr	r2, [pc, #304]	; (8005f98 <UART_SetConfig+0x49c>)
 8005e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e72:	005a      	lsls	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	441a      	add	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d916      	bls.n	8005ebc <UART_SetConfig+0x3c0>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d212      	bcs.n	8005ebc <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f023 030f 	bic.w	r3, r3, #15
 8005e9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	89fa      	ldrh	r2, [r7, #14]
 8005eb8:	60da      	str	r2, [r3, #12]
 8005eba:	e057      	b.n	8005f6c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	76bb      	strb	r3, [r7, #26]
 8005ec0:	e054      	b.n	8005f6c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ec2:	7efb      	ldrb	r3, [r7, #27]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d828      	bhi.n	8005f1a <UART_SetConfig+0x41e>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x3d4>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f0b 	.word	0x08005f0b
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f1b 	.word	0x08005f1b
 8005eec:	08005f1b 	.word	0x08005f1b
 8005ef0:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7fd ff3c 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005ef8:	6178      	str	r0, [r7, #20]
        break;
 8005efa:	e013      	b.n	8005f24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fd ff4a 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005f00:	6178      	str	r0, [r7, #20]
        break;
 8005f02:	e00f      	b.n	8005f24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <UART_SetConfig+0x498>)
 8005f06:	617b      	str	r3, [r7, #20]
        break;
 8005f08:	e00c      	b.n	8005f24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fd fe7d 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8005f0e:	6178      	str	r0, [r7, #20]
        break;
 8005f10:	e008      	b.n	8005f24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	617b      	str	r3, [r7, #20]
        break;
 8005f18:	e004      	b.n	8005f24 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	76bb      	strb	r3, [r7, #26]
        break;
 8005f22:	bf00      	nop
    }

    if (pclk != 0U)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d020      	beq.n	8005f6c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <UART_SetConfig+0x49c>)
 8005f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f34:	461a      	mov	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	441a      	add	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	d908      	bls.n	8005f68 <UART_SetConfig+0x46c>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d204      	bcs.n	8005f68 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	e001      	b.n	8005f6c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f88:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bdb0      	pop	{r4, r5, r7, pc}
 8005f92:	bf00      	nop
 8005f94:	00f42400 	.word	0x00f42400
 8005f98:	0800b3b4 	.word	0x0800b3b4

08005f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800609a:	d10a      	bne.n	80060b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af02      	add	r7, sp, #8
 80060e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060ee:	f7fb fce3 	bl	8001ab8 <HAL_GetTick>
 80060f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d10e      	bne.n	8006120 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006102:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f82f 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e025      	b.n	800616c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d10e      	bne.n	800614c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f819 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e00f      	b.n	800616c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006184:	e062      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d05e      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fb fc93 	bl	8001ab8 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11d      	bne.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e045      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02e      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fc:	d126      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006206:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006216:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e00f      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	429a      	cmp	r2, r3
 8006268:	d08d      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800628a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d107      	bne.n	80062b8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0210 	bic.w	r2, r2, #16
 80062b6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr

080062d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fbed 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006318:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fb ff1b 	bl	8002164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_UARTEx_EnableFifoMode+0x16>
 800637e:	2302      	movs	r3, #2
 8006380:	e02b      	b.n	80063da <HAL_UARTEx_EnableFifoMode+0x6e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2224      	movs	r2, #36	; 0x24
 800638e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80063b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f88a 	bl	80064dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e02d      	b.n	8006456 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2224      	movs	r2, #36	; 0x24
 8006406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f850 	bl	80064dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006472:	2302      	movs	r3, #2
 8006474:	e02d      	b.n	80064d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2224      	movs	r2, #36	; 0x24
 8006482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f812 	bl	80064dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80064e4:	4a2e      	ldr	r2, [pc, #184]	; (80065a0 <UARTEx_SetNbDataToProcess+0xc4>)
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80064f2:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <UARTEx_SetNbDataToProcess+0xc8>)
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064fc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006504:	2b00      	cmp	r3, #0
 8006506:	d108      	bne.n	800651a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006518:	e03d      	b.n	8006596 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800651a:	2308      	movs	r3, #8
 800651c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800651e:	2308      	movs	r3, #8
 8006520:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	0e5b      	lsrs	r3, r3, #25
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	0f5b      	lsrs	r3, r3, #29
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006542:	7fbb      	ldrb	r3, [r7, #30]
 8006544:	7f3a      	ldrb	r2, [r7, #28]
 8006546:	f107 0120 	add.w	r1, r7, #32
 800654a:	440a      	add	r2, r1
 800654c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006554:	7f3a      	ldrb	r2, [r7, #28]
 8006556:	f107 0120 	add.w	r1, r7, #32
 800655a:	440a      	add	r2, r1
 800655c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006560:	fb93 f3f2 	sdiv	r3, r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800656c:	7ffb      	ldrb	r3, [r7, #31]
 800656e:	7f7a      	ldrb	r2, [r7, #29]
 8006570:	f107 0120 	add.w	r1, r7, #32
 8006574:	440a      	add	r2, r1
 8006576:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800657a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800657e:	7f7a      	ldrb	r2, [r7, #29]
 8006580:	f107 0120 	add.w	r1, r7, #32
 8006584:	440a      	add	r2, r1
 8006586:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800658a:	fb93 f3f2 	sdiv	r3, r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006596:	bf00      	nop
 8006598:	3724      	adds	r7, #36	; 0x24
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	0800b2d8 	.word	0x0800b2d8
 80065a4:	0800b2e0 	.word	0x0800b2e0

080065a8 <HAL_SUBGHZ_TxCpltCallback>:
    return ( uint32_t ) RBI_GetWakeUpTime();
}

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2001      	movs	r0, #1
 80065b6:	4798      	blx	r3
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000210 	.word	0x20000210

080065c4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2002      	movs	r0, #2
 80065d2:	4798      	blx	r3
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000210 	.word	0x20000210

080065e0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2040      	movs	r0, #64	; 0x40
 80065ee:	4798      	blx	r3
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000210 	.word	0x20000210

080065fc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800660e:	2b01      	cmp	r3, #1
 8006610:	d005      	beq.n	800661e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8006612:	e00a      	b.n	800662a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2080      	movs	r0, #128	; 0x80
 800661a:	4798      	blx	r3
            break;
 800661c:	e005      	b.n	800662a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006626:	4798      	blx	r3
            break;
 8006628:	bf00      	nop
    }
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000210 	.word	0x20000210

08006638 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006640:	4b04      	ldr	r3, [pc, #16]	; (8006654 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006648:	4798      	blx	r3
}
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000210 	.word	0x20000210

08006658 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006660:	4b03      	ldr	r3, [pc, #12]	; (8006670 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2020      	movs	r0, #32
 8006666:	4798      	blx	r3
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000210 	.word	0x20000210

08006674 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800667c:	4b03      	ldr	r3, [pc, #12]	; (800668c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2004      	movs	r0, #4
 8006682:	4798      	blx	r3
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000210 	.word	0x20000210

08006690 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8006698:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2008      	movs	r0, #8
 800669e:	4798      	blx	r3
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000210 	.word	0x20000210

080066ac <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80066b4:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2010      	movs	r0, #16
 80066ba:	4798      	blx	r3
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000210 	.word	0x20000210

080066c8 <UTIL_TIMER_Start>:
    return UTIL_TIMER_INVALID_PARAM;
  }
}

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d056      	beq.n	800678a <UTIL_TIMER_Start+0xc2>
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f8e1 	bl	80068a4 <TimerExists>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f083 0301 	eor.w	r3, r3, #1
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d04d      	beq.n	800678a <UTIL_TIMER_Start+0xc2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	7a5b      	ldrb	r3, [r3, #9]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d149      	bne.n	800678a <UTIL_TIMER_Start+0xc2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f6:	f3ef 8310 	mrs	r3, PRIMASK
 80066fa:	613b      	str	r3, [r7, #16]
  return(result);
 80066fc:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80066fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006700:	b672      	cpsid	i
}
 8006702:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800670a:	4b24      	ldr	r3, [pc, #144]	; (800679c <UTIL_TIMER_Start+0xd4>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4798      	blx	r3
 8006710:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	429a      	cmp	r2, r3
 8006718:	d201      	bcs.n	800671e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a3a      	ldr	r2, [r7, #32]
 8006722:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <UTIL_TIMER_Start+0xd8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800673e:	4b17      	ldr	r3, [pc, #92]	; (800679c <UTIL_TIMER_Start+0xd4>)
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f923 	bl	8006990 <TimerInsertNewHeadTimer>
 800674a:	e017      	b.n	800677c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800674c:	4b13      	ldr	r3, [pc, #76]	; (800679c <UTIL_TIMER_Start+0xd4>)
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	4798      	blx	r3
 8006752:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	441a      	add	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <UTIL_TIMER_Start+0xd8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d203      	bcs.n	8006776 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f90e 	bl	8006990 <TimerInsertNewHeadTimer>
 8006774:	e002      	b.n	800677c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8da 	bl	8006930 <TimerInsertTimer>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f383 8810 	msr	PRIMASK, r3
}
 8006786:	bf00      	nop
  {
 8006788:	e002      	b.n	8006790 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8006790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006794:	4618      	mov	r0, r3
 8006796:	3728      	adds	r7, #40	; 0x28
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	0800b2e8 	.word	0x0800b2e8
 80067a0:	20000214 	.word	0x20000214

080067a4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b089      	sub	sp, #36	; 0x24
 80067a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067aa:	f3ef 8310 	mrs	r3, PRIMASK
 80067ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80067b0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80067b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80067b4:	b672      	cpsid	i
}
 80067b6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 80067b8:	4b38      	ldr	r3, [pc, #224]	; (800689c <UTIL_TIMER_IRQ_Handler+0xf8>)
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	4798      	blx	r3
 80067be:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80067c0:	4b36      	ldr	r3, [pc, #216]	; (800689c <UTIL_TIMER_IRQ_Handler+0xf8>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	4798      	blx	r3
 80067c6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 80067d0:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d037      	beq.n	8006848 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 80067d8:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d206      	bcs.n	80067f6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e002      	b.n	80067fc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ea      	bne.n	80067de <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8006808:	e01e      	b.n	8006848 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800680a:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8006818:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2200      	movs	r2, #0
 800681e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2200      	movs	r2, #0
 8006824:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	6912      	ldr	r2, [r2, #16]
 800682e:	4610      	mov	r0, r2
 8006830:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	7adb      	ldrb	r3, [r3, #11]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d106      	bne.n	8006848 <UTIL_TIMER_IRQ_Handler+0xa4>
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	7a9b      	ldrb	r3, [r3, #10]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8006842:	69f8      	ldr	r0, [r7, #28]
 8006844:	f7ff ff40 	bl	80066c8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00d      	beq.n	800686c <UTIL_TIMER_IRQ_Handler+0xc8>
 8006850:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0d7      	beq.n	800680a <UTIL_TIMER_IRQ_Handler+0x66>
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681c      	ldr	r4, [r3, #0]
 8006860:	4b0e      	ldr	r3, [pc, #56]	; (800689c <UTIL_TIMER_IRQ_Handler+0xf8>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	4798      	blx	r3
 8006866:	4603      	mov	r3, r0
 8006868:	429c      	cmp	r4, r3
 800686a:	d3ce      	bcc.n	800680a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <UTIL_TIMER_IRQ_Handler+0xe4>
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	7a1b      	ldrb	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800687e:	4b08      	ldr	r3, [pc, #32]	; (80068a0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f82a 	bl	80068dc <TimerSetTimeout>
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f383 8810 	msr	PRIMASK, r3
}
 8006892:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8006894:	bf00      	nop
 8006896:	3724      	adds	r7, #36	; 0x24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	0800b2e8 	.word	0x0800b2e8
 80068a0:	20000214 	.word	0x20000214

080068a4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <TimerExists+0x34>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80068b2:	e008      	b.n	80068c6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d101      	bne.n	80068c0 <TimerExists+0x1c>
    {
      return true;
 80068bc:	2301      	movs	r3, #1
 80068be:	e006      	b.n	80068ce <TimerExists+0x2a>
    }
    cur = cur->Next;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f3      	bne.n	80068b4 <TimerExists+0x10>
  }
  return false;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr
 80068d8:	20000214 	.word	0x20000214

080068dc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <TimerSetTimeout+0x50>)
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	4798      	blx	r3
 80068ea:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681c      	ldr	r4, [r3, #0]
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <TimerSetTimeout+0x50>)
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	4798      	blx	r3
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	429c      	cmp	r4, r3
 8006904:	d207      	bcs.n	8006916 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <TimerSetTimeout+0x50>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	4798      	blx	r3
 800690c:	4602      	mov	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	441a      	add	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8006916:	4b05      	ldr	r3, [pc, #20]	; (800692c <TimerSetTimeout+0x50>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	4610      	mov	r0, r2
 8006920:	4798      	blx	r3
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}
 800692a:	bf00      	nop
 800692c:	0800b2e8 	.word	0x0800b2e8

08006930 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8006938:	4b14      	ldr	r3, [pc, #80]	; (800698c <TimerInsertTimer+0x5c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <TimerInsertTimer+0x5c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8006946:	e012      	b.n	800696e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d905      	bls.n	8006960 <TimerInsertTimer+0x30>
    {
        cur = next;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	e006      	b.n	800696e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	615a      	str	r2, [r3, #20]
        return;
 800696c:	e009      	b.n	8006982 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e8      	bne.n	8006948 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	615a      	str	r2, [r3, #20]
}
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000214 	.word	0x20000214

08006990 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <TimerInsertNewHeadTimer+0x38>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80069b0:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <TimerInsertNewHeadTimer+0x38>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80069b6:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <TimerInsertNewHeadTimer+0x38>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff ff8e 	bl	80068dc <TimerSetTimeout>
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000214 	.word	0x20000214

080069cc <__errno>:
 80069cc:	4b01      	ldr	r3, [pc, #4]	; (80069d4 <__errno+0x8>)
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000000c 	.word	0x2000000c

080069d8 <__libc_init_array>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	4d0d      	ldr	r5, [pc, #52]	; (8006a10 <__libc_init_array+0x38>)
 80069dc:	4c0d      	ldr	r4, [pc, #52]	; (8006a14 <__libc_init_array+0x3c>)
 80069de:	1b64      	subs	r4, r4, r5
 80069e0:	10a4      	asrs	r4, r4, #2
 80069e2:	2600      	movs	r6, #0
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	d109      	bne.n	80069fc <__libc_init_array+0x24>
 80069e8:	4d0b      	ldr	r5, [pc, #44]	; (8006a18 <__libc_init_array+0x40>)
 80069ea:	4c0c      	ldr	r4, [pc, #48]	; (8006a1c <__libc_init_array+0x44>)
 80069ec:	f004 fc10 	bl	800b210 <_init>
 80069f0:	1b64      	subs	r4, r4, r5
 80069f2:	10a4      	asrs	r4, r4, #2
 80069f4:	2600      	movs	r6, #0
 80069f6:	42a6      	cmp	r6, r4
 80069f8:	d105      	bne.n	8006a06 <__libc_init_array+0x2e>
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a00:	4798      	blx	r3
 8006a02:	3601      	adds	r6, #1
 8006a04:	e7ee      	b.n	80069e4 <__libc_init_array+0xc>
 8006a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0a:	4798      	blx	r3
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	e7f2      	b.n	80069f6 <__libc_init_array+0x1e>
 8006a10:	0800b890 	.word	0x0800b890
 8006a14:	0800b890 	.word	0x0800b890
 8006a18:	0800b890 	.word	0x0800b890
 8006a1c:	0800b894 	.word	0x0800b894

08006a20 <memset>:
 8006a20:	4402      	add	r2, r0
 8006a22:	4603      	mov	r3, r0
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d100      	bne.n	8006a2a <memset+0xa>
 8006a28:	4770      	bx	lr
 8006a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2e:	e7f9      	b.n	8006a24 <memset+0x4>

08006a30 <__cvt>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	b088      	sub	sp, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	461f      	mov	r7, r3
 8006a3a:	4614      	mov	r4, r2
 8006a3c:	bfb8      	it	lt
 8006a3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a46:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a4a:	bfb6      	itet	lt
 8006a4c:	461f      	movlt	r7, r3
 8006a4e:	2300      	movge	r3, #0
 8006a50:	232d      	movlt	r3, #45	; 0x2d
 8006a52:	7013      	strb	r3, [r2, #0]
 8006a54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a56:	f023 0820 	bic.w	r8, r3, #32
 8006a5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a5e:	d005      	beq.n	8006a6c <__cvt+0x3c>
 8006a60:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a64:	d100      	bne.n	8006a68 <__cvt+0x38>
 8006a66:	3501      	adds	r5, #1
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e000      	b.n	8006a6e <__cvt+0x3e>
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	aa07      	add	r2, sp, #28
 8006a70:	9204      	str	r2, [sp, #16]
 8006a72:	aa06      	add	r2, sp, #24
 8006a74:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a78:	e9cd 3500 	strd	r3, r5, [sp]
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	463b      	mov	r3, r7
 8006a80:	f001 fd9a 	bl	80085b8 <_dtoa_r>
 8006a84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a88:	4606      	mov	r6, r0
 8006a8a:	d102      	bne.n	8006a92 <__cvt+0x62>
 8006a8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a8e:	07db      	lsls	r3, r3, #31
 8006a90:	d522      	bpl.n	8006ad8 <__cvt+0xa8>
 8006a92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a96:	eb06 0905 	add.w	r9, r6, r5
 8006a9a:	d110      	bne.n	8006abe <__cvt+0x8e>
 8006a9c:	7833      	ldrb	r3, [r6, #0]
 8006a9e:	2b30      	cmp	r3, #48	; 0x30
 8006aa0:	d10a      	bne.n	8006ab8 <__cvt+0x88>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7f9 ffe5 	bl	8000a78 <__aeabi_dcmpeq>
 8006aae:	b918      	cbnz	r0, 8006ab8 <__cvt+0x88>
 8006ab0:	f1c5 0501 	rsb	r5, r5, #1
 8006ab4:	f8ca 5000 	str.w	r5, [sl]
 8006ab8:	f8da 3000 	ldr.w	r3, [sl]
 8006abc:	4499      	add	r9, r3
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	f7f9 ffd7 	bl	8000a78 <__aeabi_dcmpeq>
 8006aca:	b108      	cbz	r0, 8006ad0 <__cvt+0xa0>
 8006acc:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ad0:	2230      	movs	r2, #48	; 0x30
 8006ad2:	9b07      	ldr	r3, [sp, #28]
 8006ad4:	454b      	cmp	r3, r9
 8006ad6:	d307      	bcc.n	8006ae8 <__cvt+0xb8>
 8006ad8:	9b07      	ldr	r3, [sp, #28]
 8006ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006adc:	1b9b      	subs	r3, r3, r6
 8006ade:	4630      	mov	r0, r6
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	b008      	add	sp, #32
 8006ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	9107      	str	r1, [sp, #28]
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e7f0      	b.n	8006ad2 <__cvt+0xa2>

08006af0 <__exponent>:
 8006af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af2:	4603      	mov	r3, r0
 8006af4:	2900      	cmp	r1, #0
 8006af6:	bfb8      	it	lt
 8006af8:	4249      	neglt	r1, r1
 8006afa:	f803 2b02 	strb.w	r2, [r3], #2
 8006afe:	bfb4      	ite	lt
 8006b00:	222d      	movlt	r2, #45	; 0x2d
 8006b02:	222b      	movge	r2, #43	; 0x2b
 8006b04:	2909      	cmp	r1, #9
 8006b06:	7042      	strb	r2, [r0, #1]
 8006b08:	dd2a      	ble.n	8006b60 <__exponent+0x70>
 8006b0a:	f10d 0407 	add.w	r4, sp, #7
 8006b0e:	46a4      	mov	ip, r4
 8006b10:	270a      	movs	r7, #10
 8006b12:	46a6      	mov	lr, r4
 8006b14:	460a      	mov	r2, r1
 8006b16:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b1a:	fb07 1516 	mls	r5, r7, r6, r1
 8006b1e:	3530      	adds	r5, #48	; 0x30
 8006b20:	2a63      	cmp	r2, #99	; 0x63
 8006b22:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	dcf1      	bgt.n	8006b12 <__exponent+0x22>
 8006b2e:	3130      	adds	r1, #48	; 0x30
 8006b30:	f1ae 0502 	sub.w	r5, lr, #2
 8006b34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b38:	1c44      	adds	r4, r0, #1
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4561      	cmp	r1, ip
 8006b3e:	d30a      	bcc.n	8006b56 <__exponent+0x66>
 8006b40:	f10d 0209 	add.w	r2, sp, #9
 8006b44:	eba2 020e 	sub.w	r2, r2, lr
 8006b48:	4565      	cmp	r5, ip
 8006b4a:	bf88      	it	hi
 8006b4c:	2200      	movhi	r2, #0
 8006b4e:	4413      	add	r3, r2
 8006b50:	1a18      	subs	r0, r3, r0
 8006b52:	b003      	add	sp, #12
 8006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b5e:	e7ed      	b.n	8006b3c <__exponent+0x4c>
 8006b60:	2330      	movs	r3, #48	; 0x30
 8006b62:	3130      	adds	r1, #48	; 0x30
 8006b64:	7083      	strb	r3, [r0, #2]
 8006b66:	70c1      	strb	r1, [r0, #3]
 8006b68:	1d03      	adds	r3, r0, #4
 8006b6a:	e7f1      	b.n	8006b50 <__exponent+0x60>

08006b6c <_printf_float>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	b091      	sub	sp, #68	; 0x44
 8006b72:	460c      	mov	r4, r1
 8006b74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b78:	4616      	mov	r6, r2
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	f002 fe6d 	bl	800985c <_localeconv_r>
 8006b82:	6803      	ldr	r3, [r0, #0]
 8006b84:	9309      	str	r3, [sp, #36]	; 0x24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7f9 fafa 	bl	8000180 <strlen>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b90:	f8d8 3000 	ldr.w	r3, [r8]
 8006b94:	900a      	str	r0, [sp, #40]	; 0x28
 8006b96:	3307      	adds	r3, #7
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	f103 0208 	add.w	r2, r3, #8
 8006ba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ba8:	f8c8 2000 	str.w	r2, [r8]
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006bb8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bc0:	4b9c      	ldr	r3, [pc, #624]	; (8006e34 <_printf_float+0x2c8>)
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	f7f9 ff88 	bl	8000adc <__aeabi_dcmpun>
 8006bcc:	bb70      	cbnz	r0, 8006c2c <_printf_float+0xc0>
 8006bce:	4b99      	ldr	r3, [pc, #612]	; (8006e34 <_printf_float+0x2c8>)
 8006bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f7f9 ff62 	bl	8000aa0 <__aeabi_dcmple>
 8006bdc:	bb30      	cbnz	r0, 8006c2c <_printf_float+0xc0>
 8006bde:	2200      	movs	r2, #0
 8006be0:	2300      	movs	r3, #0
 8006be2:	4640      	mov	r0, r8
 8006be4:	4651      	mov	r1, sl
 8006be6:	f7f9 ff51 	bl	8000a8c <__aeabi_dcmplt>
 8006bea:	b110      	cbz	r0, 8006bf2 <_printf_float+0x86>
 8006bec:	232d      	movs	r3, #45	; 0x2d
 8006bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf2:	4b91      	ldr	r3, [pc, #580]	; (8006e38 <_printf_float+0x2cc>)
 8006bf4:	4891      	ldr	r0, [pc, #580]	; (8006e3c <_printf_float+0x2d0>)
 8006bf6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bfa:	bf94      	ite	ls
 8006bfc:	4698      	movls	r8, r3
 8006bfe:	4680      	movhi	r8, r0
 8006c00:	2303      	movs	r3, #3
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	f02b 0304 	bic.w	r3, fp, #4
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	f04f 0a00 	mov.w	sl, #0
 8006c0e:	9700      	str	r7, [sp, #0]
 8006c10:	4633      	mov	r3, r6
 8006c12:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c14:	4621      	mov	r1, r4
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 f9d2 	bl	8006fc0 <_printf_common>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f040 808f 	bne.w	8006d40 <_printf_float+0x1d4>
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295
 8006c26:	b011      	add	sp, #68	; 0x44
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	4653      	mov	r3, sl
 8006c30:	4640      	mov	r0, r8
 8006c32:	4651      	mov	r1, sl
 8006c34:	f7f9 ff52 	bl	8000adc <__aeabi_dcmpun>
 8006c38:	b140      	cbz	r0, 8006c4c <_printf_float+0xe0>
 8006c3a:	f1ba 0f00 	cmp.w	sl, #0
 8006c3e:	bfbc      	itt	lt
 8006c40:	232d      	movlt	r3, #45	; 0x2d
 8006c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c46:	487e      	ldr	r0, [pc, #504]	; (8006e40 <_printf_float+0x2d4>)
 8006c48:	4b7e      	ldr	r3, [pc, #504]	; (8006e44 <_printf_float+0x2d8>)
 8006c4a:	e7d4      	b.n	8006bf6 <_printf_float+0x8a>
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c54:	d142      	bne.n	8006cdc <_printf_float+0x170>
 8006c56:	2306      	movs	r3, #6
 8006c58:	6063      	str	r3, [r4, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	9206      	str	r2, [sp, #24]
 8006c5e:	aa0e      	add	r2, sp, #56	; 0x38
 8006c60:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c64:	aa0d      	add	r2, sp, #52	; 0x34
 8006c66:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c6a:	9203      	str	r2, [sp, #12]
 8006c6c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c70:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	6863      	ldr	r3, [r4, #4]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	4653      	mov	r3, sl
 8006c7e:	4628      	mov	r0, r5
 8006c80:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c82:	f7ff fed5 	bl	8006a30 <__cvt>
 8006c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c88:	2947      	cmp	r1, #71	; 0x47
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c8e:	d108      	bne.n	8006ca2 <_printf_float+0x136>
 8006c90:	1cc8      	adds	r0, r1, #3
 8006c92:	db02      	blt.n	8006c9a <_printf_float+0x12e>
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	4299      	cmp	r1, r3
 8006c98:	dd40      	ble.n	8006d1c <_printf_float+0x1b0>
 8006c9a:	f1a9 0902 	sub.w	r9, r9, #2
 8006c9e:	fa5f f989 	uxtb.w	r9, r9
 8006ca2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ca6:	d81f      	bhi.n	8006ce8 <_printf_float+0x17c>
 8006ca8:	3901      	subs	r1, #1
 8006caa:	464a      	mov	r2, r9
 8006cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cb0:	910d      	str	r1, [sp, #52]	; 0x34
 8006cb2:	f7ff ff1d 	bl	8006af0 <__exponent>
 8006cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cb8:	1813      	adds	r3, r2, r0
 8006cba:	2a01      	cmp	r2, #1
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	dc02      	bgt.n	8006cc8 <_printf_float+0x15c>
 8006cc2:	6822      	ldr	r2, [r4, #0]
 8006cc4:	07d2      	lsls	r2, r2, #31
 8006cc6:	d501      	bpl.n	8006ccc <_printf_float+0x160>
 8006cc8:	3301      	adds	r3, #1
 8006cca:	6123      	str	r3, [r4, #16]
 8006ccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d09c      	beq.n	8006c0e <_printf_float+0xa2>
 8006cd4:	232d      	movs	r3, #45	; 0x2d
 8006cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cda:	e798      	b.n	8006c0e <_printf_float+0xa2>
 8006cdc:	2947      	cmp	r1, #71	; 0x47
 8006cde:	d1bc      	bne.n	8006c5a <_printf_float+0xee>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1ba      	bne.n	8006c5a <_printf_float+0xee>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e7b7      	b.n	8006c58 <_printf_float+0xec>
 8006ce8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006cec:	d118      	bne.n	8006d20 <_printf_float+0x1b4>
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	6863      	ldr	r3, [r4, #4]
 8006cf2:	dd0b      	ble.n	8006d0c <_printf_float+0x1a0>
 8006cf4:	6121      	str	r1, [r4, #16]
 8006cf6:	b913      	cbnz	r3, 8006cfe <_printf_float+0x192>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	07d0      	lsls	r0, r2, #31
 8006cfc:	d502      	bpl.n	8006d04 <_printf_float+0x198>
 8006cfe:	3301      	adds	r3, #1
 8006d00:	440b      	add	r3, r1
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d06:	f04f 0a00 	mov.w	sl, #0
 8006d0a:	e7df      	b.n	8006ccc <_printf_float+0x160>
 8006d0c:	b913      	cbnz	r3, 8006d14 <_printf_float+0x1a8>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d2      	lsls	r2, r2, #31
 8006d12:	d501      	bpl.n	8006d18 <_printf_float+0x1ac>
 8006d14:	3302      	adds	r3, #2
 8006d16:	e7f4      	b.n	8006d02 <_printf_float+0x196>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e7f2      	b.n	8006d02 <_printf_float+0x196>
 8006d1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d22:	4299      	cmp	r1, r3
 8006d24:	db05      	blt.n	8006d32 <_printf_float+0x1c6>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6121      	str	r1, [r4, #16]
 8006d2a:	07d8      	lsls	r0, r3, #31
 8006d2c:	d5ea      	bpl.n	8006d04 <_printf_float+0x198>
 8006d2e:	1c4b      	adds	r3, r1, #1
 8006d30:	e7e7      	b.n	8006d02 <_printf_float+0x196>
 8006d32:	2900      	cmp	r1, #0
 8006d34:	bfd4      	ite	le
 8006d36:	f1c1 0202 	rsble	r2, r1, #2
 8006d3a:	2201      	movgt	r2, #1
 8006d3c:	4413      	add	r3, r2
 8006d3e:	e7e0      	b.n	8006d02 <_printf_float+0x196>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	055a      	lsls	r2, r3, #21
 8006d44:	d407      	bmi.n	8006d56 <_printf_float+0x1ea>
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	4642      	mov	r2, r8
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	d12b      	bne.n	8006dac <_printf_float+0x240>
 8006d54:	e765      	b.n	8006c22 <_printf_float+0xb6>
 8006d56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d5a:	f240 80dc 	bls.w	8006f16 <_printf_float+0x3aa>
 8006d5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	f7f9 fe87 	bl	8000a78 <__aeabi_dcmpeq>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d033      	beq.n	8006dd6 <_printf_float+0x26a>
 8006d6e:	4a36      	ldr	r2, [pc, #216]	; (8006e48 <_printf_float+0x2dc>)
 8006d70:	2301      	movs	r3, #1
 8006d72:	4631      	mov	r1, r6
 8006d74:	4628      	mov	r0, r5
 8006d76:	47b8      	blx	r7
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f43f af52 	beq.w	8006c22 <_printf_float+0xb6>
 8006d7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d82:	429a      	cmp	r2, r3
 8006d84:	db02      	blt.n	8006d8c <_printf_float+0x220>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	07d8      	lsls	r0, r3, #31
 8006d8a:	d50f      	bpl.n	8006dac <_printf_float+0x240>
 8006d8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af43 	beq.w	8006c22 <_printf_float+0xb6>
 8006d9c:	f04f 0800 	mov.w	r8, #0
 8006da0:	f104 091a 	add.w	r9, r4, #26
 8006da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006da6:	3b01      	subs	r3, #1
 8006da8:	4543      	cmp	r3, r8
 8006daa:	dc09      	bgt.n	8006dc0 <_printf_float+0x254>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	079b      	lsls	r3, r3, #30
 8006db0:	f100 8101 	bmi.w	8006fb6 <_printf_float+0x44a>
 8006db4:	68e0      	ldr	r0, [r4, #12]
 8006db6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006db8:	4298      	cmp	r0, r3
 8006dba:	bfb8      	it	lt
 8006dbc:	4618      	movlt	r0, r3
 8006dbe:	e732      	b.n	8006c26 <_printf_float+0xba>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f af29 	beq.w	8006c22 <_printf_float+0xb6>
 8006dd0:	f108 0801 	add.w	r8, r8, #1
 8006dd4:	e7e6      	b.n	8006da4 <_printf_float+0x238>
 8006dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc37      	bgt.n	8006e4c <_printf_float+0x2e0>
 8006ddc:	4a1a      	ldr	r2, [pc, #104]	; (8006e48 <_printf_float+0x2dc>)
 8006dde:	2301      	movs	r3, #1
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f af1b 	beq.w	8006c22 <_printf_float+0xb6>
 8006dec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006df0:	4313      	orrs	r3, r2
 8006df2:	d102      	bne.n	8006dfa <_printf_float+0x28e>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	07d9      	lsls	r1, r3, #31
 8006df8:	d5d8      	bpl.n	8006dac <_printf_float+0x240>
 8006dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f af0c 	beq.w	8006c22 <_printf_float+0xb6>
 8006e0a:	f04f 0900 	mov.w	r9, #0
 8006e0e:	f104 0a1a 	add.w	sl, r4, #26
 8006e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e14:	425b      	negs	r3, r3
 8006e16:	454b      	cmp	r3, r9
 8006e18:	dc01      	bgt.n	8006e1e <_printf_float+0x2b2>
 8006e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e1c:	e794      	b.n	8006d48 <_printf_float+0x1dc>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4652      	mov	r2, sl
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f aefa 	beq.w	8006c22 <_printf_float+0xb6>
 8006e2e:	f109 0901 	add.w	r9, r9, #1
 8006e32:	e7ee      	b.n	8006e12 <_printf_float+0x2a6>
 8006e34:	7fefffff 	.word	0x7fefffff
 8006e38:	0800b3d0 	.word	0x0800b3d0
 8006e3c:	0800b3d4 	.word	0x0800b3d4
 8006e40:	0800b3dc 	.word	0x0800b3dc
 8006e44:	0800b3d8 	.word	0x0800b3d8
 8006e48:	0800b3e0 	.word	0x0800b3e0
 8006e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e50:	429a      	cmp	r2, r3
 8006e52:	bfa8      	it	ge
 8006e54:	461a      	movge	r2, r3
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	4691      	mov	r9, r2
 8006e5a:	dc37      	bgt.n	8006ecc <_printf_float+0x360>
 8006e5c:	f04f 0b00 	mov.w	fp, #0
 8006e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e64:	f104 021a 	add.w	r2, r4, #26
 8006e68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e6c:	ebaa 0309 	sub.w	r3, sl, r9
 8006e70:	455b      	cmp	r3, fp
 8006e72:	dc33      	bgt.n	8006edc <_printf_float+0x370>
 8006e74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	db3b      	blt.n	8006ef4 <_printf_float+0x388>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	07da      	lsls	r2, r3, #31
 8006e80:	d438      	bmi.n	8006ef4 <_printf_float+0x388>
 8006e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e86:	eba2 030a 	sub.w	r3, r2, sl
 8006e8a:	eba2 0901 	sub.w	r9, r2, r1
 8006e8e:	4599      	cmp	r9, r3
 8006e90:	bfa8      	it	ge
 8006e92:	4699      	movge	r9, r3
 8006e94:	f1b9 0f00 	cmp.w	r9, #0
 8006e98:	dc34      	bgt.n	8006f04 <_printf_float+0x398>
 8006e9a:	f04f 0800 	mov.w	r8, #0
 8006e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea2:	f104 0a1a 	add.w	sl, r4, #26
 8006ea6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	eba3 0309 	sub.w	r3, r3, r9
 8006eb0:	4543      	cmp	r3, r8
 8006eb2:	f77f af7b 	ble.w	8006dac <_printf_float+0x240>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4652      	mov	r2, sl
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f aeae 	beq.w	8006c22 <_printf_float+0xb6>
 8006ec6:	f108 0801 	add.w	r8, r8, #1
 8006eca:	e7ec      	b.n	8006ea6 <_printf_float+0x33a>
 8006ecc:	4613      	mov	r3, r2
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d1c0      	bne.n	8006e5c <_printf_float+0x2f0>
 8006eda:	e6a2      	b.n	8006c22 <_printf_float+0xb6>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f ae9b 	beq.w	8006c22 <_printf_float+0xb6>
 8006eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eee:	f10b 0b01 	add.w	fp, fp, #1
 8006ef2:	e7b9      	b.n	8006e68 <_printf_float+0x2fc>
 8006ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	d1bf      	bne.n	8006e82 <_printf_float+0x316>
 8006f02:	e68e      	b.n	8006c22 <_printf_float+0xb6>
 8006f04:	464b      	mov	r3, r9
 8006f06:	eb08 020a 	add.w	r2, r8, sl
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	d1c2      	bne.n	8006e9a <_printf_float+0x32e>
 8006f14:	e685      	b.n	8006c22 <_printf_float+0xb6>
 8006f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	dc01      	bgt.n	8006f20 <_printf_float+0x3b4>
 8006f1c:	07db      	lsls	r3, r3, #31
 8006f1e:	d537      	bpl.n	8006f90 <_printf_float+0x424>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4642      	mov	r2, r8
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f43f ae79 	beq.w	8006c22 <_printf_float+0xb6>
 8006f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f ae71 	beq.w	8006c22 <_printf_float+0xb6>
 8006f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f44:	2200      	movs	r2, #0
 8006f46:	2300      	movs	r3, #0
 8006f48:	f7f9 fd96 	bl	8000a78 <__aeabi_dcmpeq>
 8006f4c:	b9d8      	cbnz	r0, 8006f86 <_printf_float+0x41a>
 8006f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f50:	f108 0201 	add.w	r2, r8, #1
 8006f54:	3b01      	subs	r3, #1
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d10e      	bne.n	8006f7e <_printf_float+0x412>
 8006f60:	e65f      	b.n	8006c22 <_printf_float+0xb6>
 8006f62:	2301      	movs	r3, #1
 8006f64:	464a      	mov	r2, r9
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f ae58 	beq.w	8006c22 <_printf_float+0xb6>
 8006f72:	f108 0801 	add.w	r8, r8, #1
 8006f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	4543      	cmp	r3, r8
 8006f7c:	dcf1      	bgt.n	8006f62 <_printf_float+0x3f6>
 8006f7e:	4653      	mov	r3, sl
 8006f80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f84:	e6e1      	b.n	8006d4a <_printf_float+0x1de>
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	f104 091a 	add.w	r9, r4, #26
 8006f8e:	e7f2      	b.n	8006f76 <_printf_float+0x40a>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4642      	mov	r2, r8
 8006f94:	e7df      	b.n	8006f56 <_printf_float+0x3ea>
 8006f96:	2301      	movs	r3, #1
 8006f98:	464a      	mov	r2, r9
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae3e 	beq.w	8006c22 <_printf_float+0xb6>
 8006fa6:	f108 0801 	add.w	r8, r8, #1
 8006faa:	68e3      	ldr	r3, [r4, #12]
 8006fac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fae:	1a5b      	subs	r3, r3, r1
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	dcf0      	bgt.n	8006f96 <_printf_float+0x42a>
 8006fb4:	e6fe      	b.n	8006db4 <_printf_float+0x248>
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	f104 0919 	add.w	r9, r4, #25
 8006fbe:	e7f4      	b.n	8006faa <_printf_float+0x43e>

08006fc0 <_printf_common>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	4699      	mov	r9, r3
 8006fc8:	688a      	ldr	r2, [r1, #8]
 8006fca:	690b      	ldr	r3, [r1, #16]
 8006fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	bfb8      	it	lt
 8006fd4:	4613      	movlt	r3, r2
 8006fd6:	6033      	str	r3, [r6, #0]
 8006fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fdc:	4607      	mov	r7, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_printf_common+0x26>
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	6033      	str	r3, [r6, #0]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	0699      	lsls	r1, r3, #26
 8006fea:	bf42      	ittt	mi
 8006fec:	6833      	ldrmi	r3, [r6, #0]
 8006fee:	3302      	addmi	r3, #2
 8006ff0:	6033      	strmi	r3, [r6, #0]
 8006ff2:	6825      	ldr	r5, [r4, #0]
 8006ff4:	f015 0506 	ands.w	r5, r5, #6
 8006ff8:	d106      	bne.n	8007008 <_printf_common+0x48>
 8006ffa:	f104 0a19 	add.w	sl, r4, #25
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	6832      	ldr	r2, [r6, #0]
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	42ab      	cmp	r3, r5
 8007006:	dc26      	bgt.n	8007056 <_printf_common+0x96>
 8007008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800700c:	1e13      	subs	r3, r2, #0
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	bf18      	it	ne
 8007012:	2301      	movne	r3, #1
 8007014:	0692      	lsls	r2, r2, #26
 8007016:	d42b      	bmi.n	8007070 <_printf_common+0xb0>
 8007018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800701c:	4649      	mov	r1, r9
 800701e:	4638      	mov	r0, r7
 8007020:	47c0      	blx	r8
 8007022:	3001      	adds	r0, #1
 8007024:	d01e      	beq.n	8007064 <_printf_common+0xa4>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	68e5      	ldr	r5, [r4, #12]
 800702a:	6832      	ldr	r2, [r6, #0]
 800702c:	f003 0306 	and.w	r3, r3, #6
 8007030:	2b04      	cmp	r3, #4
 8007032:	bf08      	it	eq
 8007034:	1aad      	subeq	r5, r5, r2
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	6922      	ldr	r2, [r4, #16]
 800703a:	bf0c      	ite	eq
 800703c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007040:	2500      	movne	r5, #0
 8007042:	4293      	cmp	r3, r2
 8007044:	bfc4      	itt	gt
 8007046:	1a9b      	subgt	r3, r3, r2
 8007048:	18ed      	addgt	r5, r5, r3
 800704a:	2600      	movs	r6, #0
 800704c:	341a      	adds	r4, #26
 800704e:	42b5      	cmp	r5, r6
 8007050:	d11a      	bne.n	8007088 <_printf_common+0xc8>
 8007052:	2000      	movs	r0, #0
 8007054:	e008      	b.n	8007068 <_printf_common+0xa8>
 8007056:	2301      	movs	r3, #1
 8007058:	4652      	mov	r2, sl
 800705a:	4649      	mov	r1, r9
 800705c:	4638      	mov	r0, r7
 800705e:	47c0      	blx	r8
 8007060:	3001      	adds	r0, #1
 8007062:	d103      	bne.n	800706c <_printf_common+0xac>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706c:	3501      	adds	r5, #1
 800706e:	e7c6      	b.n	8006ffe <_printf_common+0x3e>
 8007070:	18e1      	adds	r1, r4, r3
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	2030      	movs	r0, #48	; 0x30
 8007076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800707a:	4422      	add	r2, r4
 800707c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007084:	3302      	adds	r3, #2
 8007086:	e7c7      	b.n	8007018 <_printf_common+0x58>
 8007088:	2301      	movs	r3, #1
 800708a:	4622      	mov	r2, r4
 800708c:	4649      	mov	r1, r9
 800708e:	4638      	mov	r0, r7
 8007090:	47c0      	blx	r8
 8007092:	3001      	adds	r0, #1
 8007094:	d0e6      	beq.n	8007064 <_printf_common+0xa4>
 8007096:	3601      	adds	r6, #1
 8007098:	e7d9      	b.n	800704e <_printf_common+0x8e>
	...

0800709c <_printf_i>:
 800709c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	460c      	mov	r4, r1
 80070a2:	4691      	mov	r9, r2
 80070a4:	7e27      	ldrb	r7, [r4, #24]
 80070a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070a8:	2f78      	cmp	r7, #120	; 0x78
 80070aa:	4680      	mov	r8, r0
 80070ac:	469a      	mov	sl, r3
 80070ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b2:	d807      	bhi.n	80070c4 <_printf_i+0x28>
 80070b4:	2f62      	cmp	r7, #98	; 0x62
 80070b6:	d80a      	bhi.n	80070ce <_printf_i+0x32>
 80070b8:	2f00      	cmp	r7, #0
 80070ba:	f000 80d8 	beq.w	800726e <_printf_i+0x1d2>
 80070be:	2f58      	cmp	r7, #88	; 0x58
 80070c0:	f000 80a3 	beq.w	800720a <_printf_i+0x16e>
 80070c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070cc:	e03a      	b.n	8007144 <_printf_i+0xa8>
 80070ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070d2:	2b15      	cmp	r3, #21
 80070d4:	d8f6      	bhi.n	80070c4 <_printf_i+0x28>
 80070d6:	a001      	add	r0, pc, #4	; (adr r0, 80070dc <_printf_i+0x40>)
 80070d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070dc:	08007135 	.word	0x08007135
 80070e0:	08007149 	.word	0x08007149
 80070e4:	080070c5 	.word	0x080070c5
 80070e8:	080070c5 	.word	0x080070c5
 80070ec:	080070c5 	.word	0x080070c5
 80070f0:	080070c5 	.word	0x080070c5
 80070f4:	08007149 	.word	0x08007149
 80070f8:	080070c5 	.word	0x080070c5
 80070fc:	080070c5 	.word	0x080070c5
 8007100:	080070c5 	.word	0x080070c5
 8007104:	080070c5 	.word	0x080070c5
 8007108:	08007255 	.word	0x08007255
 800710c:	08007179 	.word	0x08007179
 8007110:	08007237 	.word	0x08007237
 8007114:	080070c5 	.word	0x080070c5
 8007118:	080070c5 	.word	0x080070c5
 800711c:	08007277 	.word	0x08007277
 8007120:	080070c5 	.word	0x080070c5
 8007124:	08007179 	.word	0x08007179
 8007128:	080070c5 	.word	0x080070c5
 800712c:	080070c5 	.word	0x080070c5
 8007130:	0800723f 	.word	0x0800723f
 8007134:	680b      	ldr	r3, [r1, #0]
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	600a      	str	r2, [r1, #0]
 800713c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007144:	2301      	movs	r3, #1
 8007146:	e0a3      	b.n	8007290 <_printf_i+0x1f4>
 8007148:	6825      	ldr	r5, [r4, #0]
 800714a:	6808      	ldr	r0, [r1, #0]
 800714c:	062e      	lsls	r6, r5, #24
 800714e:	f100 0304 	add.w	r3, r0, #4
 8007152:	d50a      	bpl.n	800716a <_printf_i+0xce>
 8007154:	6805      	ldr	r5, [r0, #0]
 8007156:	600b      	str	r3, [r1, #0]
 8007158:	2d00      	cmp	r5, #0
 800715a:	da03      	bge.n	8007164 <_printf_i+0xc8>
 800715c:	232d      	movs	r3, #45	; 0x2d
 800715e:	426d      	negs	r5, r5
 8007160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007164:	485e      	ldr	r0, [pc, #376]	; (80072e0 <_printf_i+0x244>)
 8007166:	230a      	movs	r3, #10
 8007168:	e019      	b.n	800719e <_printf_i+0x102>
 800716a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800716e:	6805      	ldr	r5, [r0, #0]
 8007170:	600b      	str	r3, [r1, #0]
 8007172:	bf18      	it	ne
 8007174:	b22d      	sxthne	r5, r5
 8007176:	e7ef      	b.n	8007158 <_printf_i+0xbc>
 8007178:	680b      	ldr	r3, [r1, #0]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	1d18      	adds	r0, r3, #4
 800717e:	6008      	str	r0, [r1, #0]
 8007180:	0628      	lsls	r0, r5, #24
 8007182:	d501      	bpl.n	8007188 <_printf_i+0xec>
 8007184:	681d      	ldr	r5, [r3, #0]
 8007186:	e002      	b.n	800718e <_printf_i+0xf2>
 8007188:	0669      	lsls	r1, r5, #25
 800718a:	d5fb      	bpl.n	8007184 <_printf_i+0xe8>
 800718c:	881d      	ldrh	r5, [r3, #0]
 800718e:	4854      	ldr	r0, [pc, #336]	; (80072e0 <_printf_i+0x244>)
 8007190:	2f6f      	cmp	r7, #111	; 0x6f
 8007192:	bf0c      	ite	eq
 8007194:	2308      	moveq	r3, #8
 8007196:	230a      	movne	r3, #10
 8007198:	2100      	movs	r1, #0
 800719a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800719e:	6866      	ldr	r6, [r4, #4]
 80071a0:	60a6      	str	r6, [r4, #8]
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	bfa2      	ittt	ge
 80071a6:	6821      	ldrge	r1, [r4, #0]
 80071a8:	f021 0104 	bicge.w	r1, r1, #4
 80071ac:	6021      	strge	r1, [r4, #0]
 80071ae:	b90d      	cbnz	r5, 80071b4 <_printf_i+0x118>
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	d04d      	beq.n	8007250 <_printf_i+0x1b4>
 80071b4:	4616      	mov	r6, r2
 80071b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ba:	fb03 5711 	mls	r7, r3, r1, r5
 80071be:	5dc7      	ldrb	r7, [r0, r7]
 80071c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071c4:	462f      	mov	r7, r5
 80071c6:	42bb      	cmp	r3, r7
 80071c8:	460d      	mov	r5, r1
 80071ca:	d9f4      	bls.n	80071b6 <_printf_i+0x11a>
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d10b      	bne.n	80071e8 <_printf_i+0x14c>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	07df      	lsls	r7, r3, #31
 80071d4:	d508      	bpl.n	80071e8 <_printf_i+0x14c>
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	6861      	ldr	r1, [r4, #4]
 80071da:	4299      	cmp	r1, r3
 80071dc:	bfde      	ittt	le
 80071de:	2330      	movle	r3, #48	; 0x30
 80071e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071e8:	1b92      	subs	r2, r2, r6
 80071ea:	6122      	str	r2, [r4, #16]
 80071ec:	f8cd a000 	str.w	sl, [sp]
 80071f0:	464b      	mov	r3, r9
 80071f2:	aa03      	add	r2, sp, #12
 80071f4:	4621      	mov	r1, r4
 80071f6:	4640      	mov	r0, r8
 80071f8:	f7ff fee2 	bl	8006fc0 <_printf_common>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d14c      	bne.n	800729a <_printf_i+0x1fe>
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	b004      	add	sp, #16
 8007206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720a:	4835      	ldr	r0, [pc, #212]	; (80072e0 <_printf_i+0x244>)
 800720c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	061f      	lsls	r7, r3, #24
 8007216:	f856 5b04 	ldr.w	r5, [r6], #4
 800721a:	600e      	str	r6, [r1, #0]
 800721c:	d514      	bpl.n	8007248 <_printf_i+0x1ac>
 800721e:	07d9      	lsls	r1, r3, #31
 8007220:	bf44      	itt	mi
 8007222:	f043 0320 	orrmi.w	r3, r3, #32
 8007226:	6023      	strmi	r3, [r4, #0]
 8007228:	b91d      	cbnz	r5, 8007232 <_printf_i+0x196>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f023 0320 	bic.w	r3, r3, #32
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	2310      	movs	r3, #16
 8007234:	e7b0      	b.n	8007198 <_printf_i+0xfc>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	f043 0320 	orr.w	r3, r3, #32
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	2378      	movs	r3, #120	; 0x78
 8007240:	4828      	ldr	r0, [pc, #160]	; (80072e4 <_printf_i+0x248>)
 8007242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007246:	e7e3      	b.n	8007210 <_printf_i+0x174>
 8007248:	065e      	lsls	r6, r3, #25
 800724a:	bf48      	it	mi
 800724c:	b2ad      	uxthmi	r5, r5
 800724e:	e7e6      	b.n	800721e <_printf_i+0x182>
 8007250:	4616      	mov	r6, r2
 8007252:	e7bb      	b.n	80071cc <_printf_i+0x130>
 8007254:	680b      	ldr	r3, [r1, #0]
 8007256:	6826      	ldr	r6, [r4, #0]
 8007258:	6960      	ldr	r0, [r4, #20]
 800725a:	1d1d      	adds	r5, r3, #4
 800725c:	600d      	str	r5, [r1, #0]
 800725e:	0635      	lsls	r5, r6, #24
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	d501      	bpl.n	8007268 <_printf_i+0x1cc>
 8007264:	6018      	str	r0, [r3, #0]
 8007266:	e002      	b.n	800726e <_printf_i+0x1d2>
 8007268:	0671      	lsls	r1, r6, #25
 800726a:	d5fb      	bpl.n	8007264 <_printf_i+0x1c8>
 800726c:	8018      	strh	r0, [r3, #0]
 800726e:	2300      	movs	r3, #0
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	4616      	mov	r6, r2
 8007274:	e7ba      	b.n	80071ec <_printf_i+0x150>
 8007276:	680b      	ldr	r3, [r1, #0]
 8007278:	1d1a      	adds	r2, r3, #4
 800727a:	600a      	str	r2, [r1, #0]
 800727c:	681e      	ldr	r6, [r3, #0]
 800727e:	6862      	ldr	r2, [r4, #4]
 8007280:	2100      	movs	r1, #0
 8007282:	4630      	mov	r0, r6
 8007284:	f7f8 ff84 	bl	8000190 <memchr>
 8007288:	b108      	cbz	r0, 800728e <_printf_i+0x1f2>
 800728a:	1b80      	subs	r0, r0, r6
 800728c:	6060      	str	r0, [r4, #4]
 800728e:	6863      	ldr	r3, [r4, #4]
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	2300      	movs	r3, #0
 8007294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007298:	e7a8      	b.n	80071ec <_printf_i+0x150>
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	4632      	mov	r2, r6
 800729e:	4649      	mov	r1, r9
 80072a0:	4640      	mov	r0, r8
 80072a2:	47d0      	blx	sl
 80072a4:	3001      	adds	r0, #1
 80072a6:	d0ab      	beq.n	8007200 <_printf_i+0x164>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	079b      	lsls	r3, r3, #30
 80072ac:	d413      	bmi.n	80072d6 <_printf_i+0x23a>
 80072ae:	68e0      	ldr	r0, [r4, #12]
 80072b0:	9b03      	ldr	r3, [sp, #12]
 80072b2:	4298      	cmp	r0, r3
 80072b4:	bfb8      	it	lt
 80072b6:	4618      	movlt	r0, r3
 80072b8:	e7a4      	b.n	8007204 <_printf_i+0x168>
 80072ba:	2301      	movs	r3, #1
 80072bc:	4632      	mov	r2, r6
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d09b      	beq.n	8007200 <_printf_i+0x164>
 80072c8:	3501      	adds	r5, #1
 80072ca:	68e3      	ldr	r3, [r4, #12]
 80072cc:	9903      	ldr	r1, [sp, #12]
 80072ce:	1a5b      	subs	r3, r3, r1
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	dcf2      	bgt.n	80072ba <_printf_i+0x21e>
 80072d4:	e7eb      	b.n	80072ae <_printf_i+0x212>
 80072d6:	2500      	movs	r5, #0
 80072d8:	f104 0619 	add.w	r6, r4, #25
 80072dc:	e7f5      	b.n	80072ca <_printf_i+0x22e>
 80072de:	bf00      	nop
 80072e0:	0800b3e2 	.word	0x0800b3e2
 80072e4:	0800b3f3 	.word	0x0800b3f3

080072e8 <_scanf_float>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	b087      	sub	sp, #28
 80072ee:	4617      	mov	r7, r2
 80072f0:	9303      	str	r3, [sp, #12]
 80072f2:	688b      	ldr	r3, [r1, #8]
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80072fa:	bf83      	ittte	hi
 80072fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007300:	195b      	addhi	r3, r3, r5
 8007302:	9302      	strhi	r3, [sp, #8]
 8007304:	2300      	movls	r3, #0
 8007306:	bf86      	itte	hi
 8007308:	f240 135d 	movwhi	r3, #349	; 0x15d
 800730c:	608b      	strhi	r3, [r1, #8]
 800730e:	9302      	strls	r3, [sp, #8]
 8007310:	680b      	ldr	r3, [r1, #0]
 8007312:	468b      	mov	fp, r1
 8007314:	2500      	movs	r5, #0
 8007316:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800731a:	f84b 3b1c 	str.w	r3, [fp], #28
 800731e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007322:	4680      	mov	r8, r0
 8007324:	460c      	mov	r4, r1
 8007326:	465e      	mov	r6, fp
 8007328:	46aa      	mov	sl, r5
 800732a:	46a9      	mov	r9, r5
 800732c:	9501      	str	r5, [sp, #4]
 800732e:	68a2      	ldr	r2, [r4, #8]
 8007330:	b152      	cbz	r2, 8007348 <_scanf_float+0x60>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b4e      	cmp	r3, #78	; 0x4e
 8007338:	d864      	bhi.n	8007404 <_scanf_float+0x11c>
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d83c      	bhi.n	80073b8 <_scanf_float+0xd0>
 800733e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007342:	b2c8      	uxtb	r0, r1
 8007344:	280e      	cmp	r0, #14
 8007346:	d93a      	bls.n	80073be <_scanf_float+0xd6>
 8007348:	f1b9 0f00 	cmp.w	r9, #0
 800734c:	d003      	beq.n	8007356 <_scanf_float+0x6e>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	f10a 3aff 	add.w	sl, sl, #4294967295
 800735a:	f1ba 0f01 	cmp.w	sl, #1
 800735e:	f200 8113 	bhi.w	8007588 <_scanf_float+0x2a0>
 8007362:	455e      	cmp	r6, fp
 8007364:	f200 8105 	bhi.w	8007572 <_scanf_float+0x28a>
 8007368:	2501      	movs	r5, #1
 800736a:	4628      	mov	r0, r5
 800736c:	b007      	add	sp, #28
 800736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007372:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007376:	2a0d      	cmp	r2, #13
 8007378:	d8e6      	bhi.n	8007348 <_scanf_float+0x60>
 800737a:	a101      	add	r1, pc, #4	; (adr r1, 8007380 <_scanf_float+0x98>)
 800737c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007380:	080074bf 	.word	0x080074bf
 8007384:	08007349 	.word	0x08007349
 8007388:	08007349 	.word	0x08007349
 800738c:	08007349 	.word	0x08007349
 8007390:	0800751f 	.word	0x0800751f
 8007394:	080074f7 	.word	0x080074f7
 8007398:	08007349 	.word	0x08007349
 800739c:	08007349 	.word	0x08007349
 80073a0:	080074cd 	.word	0x080074cd
 80073a4:	08007349 	.word	0x08007349
 80073a8:	08007349 	.word	0x08007349
 80073ac:	08007349 	.word	0x08007349
 80073b0:	08007349 	.word	0x08007349
 80073b4:	08007485 	.word	0x08007485
 80073b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073bc:	e7db      	b.n	8007376 <_scanf_float+0x8e>
 80073be:	290e      	cmp	r1, #14
 80073c0:	d8c2      	bhi.n	8007348 <_scanf_float+0x60>
 80073c2:	a001      	add	r0, pc, #4	; (adr r0, 80073c8 <_scanf_float+0xe0>)
 80073c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073c8:	08007477 	.word	0x08007477
 80073cc:	08007349 	.word	0x08007349
 80073d0:	08007477 	.word	0x08007477
 80073d4:	0800750b 	.word	0x0800750b
 80073d8:	08007349 	.word	0x08007349
 80073dc:	08007425 	.word	0x08007425
 80073e0:	08007461 	.word	0x08007461
 80073e4:	08007461 	.word	0x08007461
 80073e8:	08007461 	.word	0x08007461
 80073ec:	08007461 	.word	0x08007461
 80073f0:	08007461 	.word	0x08007461
 80073f4:	08007461 	.word	0x08007461
 80073f8:	08007461 	.word	0x08007461
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007461 	.word	0x08007461
 8007404:	2b6e      	cmp	r3, #110	; 0x6e
 8007406:	d809      	bhi.n	800741c <_scanf_float+0x134>
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d8b2      	bhi.n	8007372 <_scanf_float+0x8a>
 800740c:	2b54      	cmp	r3, #84	; 0x54
 800740e:	d077      	beq.n	8007500 <_scanf_float+0x218>
 8007410:	2b59      	cmp	r3, #89	; 0x59
 8007412:	d199      	bne.n	8007348 <_scanf_float+0x60>
 8007414:	2d07      	cmp	r5, #7
 8007416:	d197      	bne.n	8007348 <_scanf_float+0x60>
 8007418:	2508      	movs	r5, #8
 800741a:	e029      	b.n	8007470 <_scanf_float+0x188>
 800741c:	2b74      	cmp	r3, #116	; 0x74
 800741e:	d06f      	beq.n	8007500 <_scanf_float+0x218>
 8007420:	2b79      	cmp	r3, #121	; 0x79
 8007422:	e7f6      	b.n	8007412 <_scanf_float+0x12a>
 8007424:	6821      	ldr	r1, [r4, #0]
 8007426:	05c8      	lsls	r0, r1, #23
 8007428:	d51a      	bpl.n	8007460 <_scanf_float+0x178>
 800742a:	9b02      	ldr	r3, [sp, #8]
 800742c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007430:	6021      	str	r1, [r4, #0]
 8007432:	f109 0901 	add.w	r9, r9, #1
 8007436:	b11b      	cbz	r3, 8007440 <_scanf_float+0x158>
 8007438:	3b01      	subs	r3, #1
 800743a:	3201      	adds	r2, #1
 800743c:	9302      	str	r3, [sp, #8]
 800743e:	60a2      	str	r2, [r4, #8]
 8007440:	68a3      	ldr	r3, [r4, #8]
 8007442:	3b01      	subs	r3, #1
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3b01      	subs	r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	f340 8084 	ble.w	8007560 <_scanf_float+0x278>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	3301      	adds	r3, #1
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	e766      	b.n	800732e <_scanf_float+0x46>
 8007460:	eb1a 0f05 	cmn.w	sl, r5
 8007464:	f47f af70 	bne.w	8007348 <_scanf_float+0x60>
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800746e:	6022      	str	r2, [r4, #0]
 8007470:	f806 3b01 	strb.w	r3, [r6], #1
 8007474:	e7e4      	b.n	8007440 <_scanf_float+0x158>
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	0610      	lsls	r0, r2, #24
 800747a:	f57f af65 	bpl.w	8007348 <_scanf_float+0x60>
 800747e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007482:	e7f4      	b.n	800746e <_scanf_float+0x186>
 8007484:	f1ba 0f00 	cmp.w	sl, #0
 8007488:	d10e      	bne.n	80074a8 <_scanf_float+0x1c0>
 800748a:	f1b9 0f00 	cmp.w	r9, #0
 800748e:	d10e      	bne.n	80074ae <_scanf_float+0x1c6>
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007496:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800749a:	d108      	bne.n	80074ae <_scanf_float+0x1c6>
 800749c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074a0:	6022      	str	r2, [r4, #0]
 80074a2:	f04f 0a01 	mov.w	sl, #1
 80074a6:	e7e3      	b.n	8007470 <_scanf_float+0x188>
 80074a8:	f1ba 0f02 	cmp.w	sl, #2
 80074ac:	d055      	beq.n	800755a <_scanf_float+0x272>
 80074ae:	2d01      	cmp	r5, #1
 80074b0:	d002      	beq.n	80074b8 <_scanf_float+0x1d0>
 80074b2:	2d04      	cmp	r5, #4
 80074b4:	f47f af48 	bne.w	8007348 <_scanf_float+0x60>
 80074b8:	3501      	adds	r5, #1
 80074ba:	b2ed      	uxtb	r5, r5
 80074bc:	e7d8      	b.n	8007470 <_scanf_float+0x188>
 80074be:	f1ba 0f01 	cmp.w	sl, #1
 80074c2:	f47f af41 	bne.w	8007348 <_scanf_float+0x60>
 80074c6:	f04f 0a02 	mov.w	sl, #2
 80074ca:	e7d1      	b.n	8007470 <_scanf_float+0x188>
 80074cc:	b97d      	cbnz	r5, 80074ee <_scanf_float+0x206>
 80074ce:	f1b9 0f00 	cmp.w	r9, #0
 80074d2:	f47f af3c 	bne.w	800734e <_scanf_float+0x66>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074e0:	f47f af39 	bne.w	8007356 <_scanf_float+0x6e>
 80074e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	2501      	movs	r5, #1
 80074ec:	e7c0      	b.n	8007470 <_scanf_float+0x188>
 80074ee:	2d03      	cmp	r5, #3
 80074f0:	d0e2      	beq.n	80074b8 <_scanf_float+0x1d0>
 80074f2:	2d05      	cmp	r5, #5
 80074f4:	e7de      	b.n	80074b4 <_scanf_float+0x1cc>
 80074f6:	2d02      	cmp	r5, #2
 80074f8:	f47f af26 	bne.w	8007348 <_scanf_float+0x60>
 80074fc:	2503      	movs	r5, #3
 80074fe:	e7b7      	b.n	8007470 <_scanf_float+0x188>
 8007500:	2d06      	cmp	r5, #6
 8007502:	f47f af21 	bne.w	8007348 <_scanf_float+0x60>
 8007506:	2507      	movs	r5, #7
 8007508:	e7b2      	b.n	8007470 <_scanf_float+0x188>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	0591      	lsls	r1, r2, #22
 800750e:	f57f af1b 	bpl.w	8007348 <_scanf_float+0x60>
 8007512:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	f8cd 9004 	str.w	r9, [sp, #4]
 800751c:	e7a8      	b.n	8007470 <_scanf_float+0x188>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007524:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007528:	d006      	beq.n	8007538 <_scanf_float+0x250>
 800752a:	0550      	lsls	r0, r2, #21
 800752c:	f57f af0c 	bpl.w	8007348 <_scanf_float+0x60>
 8007530:	f1b9 0f00 	cmp.w	r9, #0
 8007534:	f43f af0f 	beq.w	8007356 <_scanf_float+0x6e>
 8007538:	0591      	lsls	r1, r2, #22
 800753a:	bf58      	it	pl
 800753c:	9901      	ldrpl	r1, [sp, #4]
 800753e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007542:	bf58      	it	pl
 8007544:	eba9 0101 	subpl.w	r1, r9, r1
 8007548:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800754c:	bf58      	it	pl
 800754e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007552:	6022      	str	r2, [r4, #0]
 8007554:	f04f 0900 	mov.w	r9, #0
 8007558:	e78a      	b.n	8007470 <_scanf_float+0x188>
 800755a:	f04f 0a03 	mov.w	sl, #3
 800755e:	e787      	b.n	8007470 <_scanf_float+0x188>
 8007560:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007564:	4639      	mov	r1, r7
 8007566:	4640      	mov	r0, r8
 8007568:	4798      	blx	r3
 800756a:	2800      	cmp	r0, #0
 800756c:	f43f aedf 	beq.w	800732e <_scanf_float+0x46>
 8007570:	e6ea      	b.n	8007348 <_scanf_float+0x60>
 8007572:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007576:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800757a:	463a      	mov	r2, r7
 800757c:	4640      	mov	r0, r8
 800757e:	4798      	blx	r3
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	3b01      	subs	r3, #1
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	e6ec      	b.n	8007362 <_scanf_float+0x7a>
 8007588:	1e6b      	subs	r3, r5, #1
 800758a:	2b06      	cmp	r3, #6
 800758c:	d825      	bhi.n	80075da <_scanf_float+0x2f2>
 800758e:	2d02      	cmp	r5, #2
 8007590:	d836      	bhi.n	8007600 <_scanf_float+0x318>
 8007592:	455e      	cmp	r6, fp
 8007594:	f67f aee8 	bls.w	8007368 <_scanf_float+0x80>
 8007598:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800759c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075a0:	463a      	mov	r2, r7
 80075a2:	4640      	mov	r0, r8
 80075a4:	4798      	blx	r3
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	e7f1      	b.n	8007592 <_scanf_float+0x2aa>
 80075ae:	9802      	ldr	r0, [sp, #8]
 80075b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075b8:	9002      	str	r0, [sp, #8]
 80075ba:	463a      	mov	r2, r7
 80075bc:	4640      	mov	r0, r8
 80075be:	4798      	blx	r3
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ca:	fa5f fa8a 	uxtb.w	sl, sl
 80075ce:	f1ba 0f02 	cmp.w	sl, #2
 80075d2:	d1ec      	bne.n	80075ae <_scanf_float+0x2c6>
 80075d4:	3d03      	subs	r5, #3
 80075d6:	b2ed      	uxtb	r5, r5
 80075d8:	1b76      	subs	r6, r6, r5
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	05da      	lsls	r2, r3, #23
 80075de:	d52f      	bpl.n	8007640 <_scanf_float+0x358>
 80075e0:	055b      	lsls	r3, r3, #21
 80075e2:	d510      	bpl.n	8007606 <_scanf_float+0x31e>
 80075e4:	455e      	cmp	r6, fp
 80075e6:	f67f aebf 	bls.w	8007368 <_scanf_float+0x80>
 80075ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075f2:	463a      	mov	r2, r7
 80075f4:	4640      	mov	r0, r8
 80075f6:	4798      	blx	r3
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	e7f1      	b.n	80075e4 <_scanf_float+0x2fc>
 8007600:	46aa      	mov	sl, r5
 8007602:	9602      	str	r6, [sp, #8]
 8007604:	e7df      	b.n	80075c6 <_scanf_float+0x2de>
 8007606:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	2965      	cmp	r1, #101	; 0x65
 800760e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007612:	f106 35ff 	add.w	r5, r6, #4294967295
 8007616:	6123      	str	r3, [r4, #16]
 8007618:	d00c      	beq.n	8007634 <_scanf_float+0x34c>
 800761a:	2945      	cmp	r1, #69	; 0x45
 800761c:	d00a      	beq.n	8007634 <_scanf_float+0x34c>
 800761e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007622:	463a      	mov	r2, r7
 8007624:	4640      	mov	r0, r8
 8007626:	4798      	blx	r3
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800762e:	3b01      	subs	r3, #1
 8007630:	1eb5      	subs	r5, r6, #2
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007638:	463a      	mov	r2, r7
 800763a:	4640      	mov	r0, r8
 800763c:	4798      	blx	r3
 800763e:	462e      	mov	r6, r5
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	f015 0510 	ands.w	r5, r5, #16
 8007646:	d159      	bne.n	80076fc <_scanf_float+0x414>
 8007648:	7035      	strb	r5, [r6, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007654:	d11c      	bne.n	8007690 <_scanf_float+0x3a8>
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	454b      	cmp	r3, r9
 800765a:	eba3 0209 	sub.w	r2, r3, r9
 800765e:	d124      	bne.n	80076aa <_scanf_float+0x3c2>
 8007660:	2200      	movs	r2, #0
 8007662:	4659      	mov	r1, fp
 8007664:	4640      	mov	r0, r8
 8007666:	f000 fe8b 	bl	8008380 <_strtod_r>
 800766a:	f8d4 c000 	ldr.w	ip, [r4]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	f01c 0f02 	tst.w	ip, #2
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	d021      	beq.n	80076c0 <_scanf_float+0x3d8>
 800767c:	9903      	ldr	r1, [sp, #12]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	600a      	str	r2, [r1, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	e9c3 6700 	strd	r6, r7, [r3]
 8007688:	68e3      	ldr	r3, [r4, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60e3      	str	r3, [r4, #12]
 800768e:	e66c      	b.n	800736a <_scanf_float+0x82>
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0e4      	beq.n	8007660 <_scanf_float+0x378>
 8007696:	9905      	ldr	r1, [sp, #20]
 8007698:	230a      	movs	r3, #10
 800769a:	462a      	mov	r2, r5
 800769c:	3101      	adds	r1, #1
 800769e:	4640      	mov	r0, r8
 80076a0:	f000 fefa 	bl	8008498 <_strtol_r>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	9e05      	ldr	r6, [sp, #20]
 80076a8:	1ac2      	subs	r2, r0, r3
 80076aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076ae:	429e      	cmp	r6, r3
 80076b0:	bf28      	it	cs
 80076b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076b6:	4912      	ldr	r1, [pc, #72]	; (8007700 <_scanf_float+0x418>)
 80076b8:	4630      	mov	r0, r6
 80076ba:	f000 f829 	bl	8007710 <siprintf>
 80076be:	e7cf      	b.n	8007660 <_scanf_float+0x378>
 80076c0:	f01c 0f04 	tst.w	ip, #4
 80076c4:	f103 0e04 	add.w	lr, r3, #4
 80076c8:	d003      	beq.n	80076d2 <_scanf_float+0x3ea>
 80076ca:	9903      	ldr	r1, [sp, #12]
 80076cc:	f8c1 e000 	str.w	lr, [r1]
 80076d0:	e7d7      	b.n	8007682 <_scanf_float+0x39a>
 80076d2:	9a03      	ldr	r2, [sp, #12]
 80076d4:	f8c2 e000 	str.w	lr, [r2]
 80076d8:	f8d3 8000 	ldr.w	r8, [r3]
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	f7f9 f9fc 	bl	8000adc <__aeabi_dcmpun>
 80076e4:	b128      	cbz	r0, 80076f2 <_scanf_float+0x40a>
 80076e6:	4807      	ldr	r0, [pc, #28]	; (8007704 <_scanf_float+0x41c>)
 80076e8:	f000 f80e 	bl	8007708 <nanf>
 80076ec:	f8c8 0000 	str.w	r0, [r8]
 80076f0:	e7ca      	b.n	8007688 <_scanf_float+0x3a0>
 80076f2:	4630      	mov	r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	f7f9 fa4f 	bl	8000b98 <__aeabi_d2f>
 80076fa:	e7f7      	b.n	80076ec <_scanf_float+0x404>
 80076fc:	2500      	movs	r5, #0
 80076fe:	e634      	b.n	800736a <_scanf_float+0x82>
 8007700:	0800b404 	.word	0x0800b404
 8007704:	0800b820 	.word	0x0800b820

08007708 <nanf>:
 8007708:	4800      	ldr	r0, [pc, #0]	; (800770c <nanf+0x4>)
 800770a:	4770      	bx	lr
 800770c:	7fc00000 	.word	0x7fc00000

08007710 <siprintf>:
 8007710:	b40e      	push	{r1, r2, r3}
 8007712:	b500      	push	{lr}
 8007714:	b09c      	sub	sp, #112	; 0x70
 8007716:	ab1d      	add	r3, sp, #116	; 0x74
 8007718:	9002      	str	r0, [sp, #8]
 800771a:	9006      	str	r0, [sp, #24]
 800771c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007720:	4809      	ldr	r0, [pc, #36]	; (8007748 <siprintf+0x38>)
 8007722:	9107      	str	r1, [sp, #28]
 8007724:	9104      	str	r1, [sp, #16]
 8007726:	4909      	ldr	r1, [pc, #36]	; (800774c <siprintf+0x3c>)
 8007728:	f853 2b04 	ldr.w	r2, [r3], #4
 800772c:	9105      	str	r1, [sp, #20]
 800772e:	6800      	ldr	r0, [r0, #0]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	a902      	add	r1, sp, #8
 8007734:	f002 fe84 	bl	800a440 <_svfiprintf_r>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	b01c      	add	sp, #112	; 0x70
 8007740:	f85d eb04 	ldr.w	lr, [sp], #4
 8007744:	b003      	add	sp, #12
 8007746:	4770      	bx	lr
 8007748:	2000000c 	.word	0x2000000c
 800774c:	ffff0208 	.word	0xffff0208

08007750 <sulp>:
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	460f      	mov	r7, r1
 8007756:	4690      	mov	r8, r2
 8007758:	f002 fc18 	bl	8009f8c <__ulp>
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f1b8 0f00 	cmp.w	r8, #0
 8007764:	d011      	beq.n	800778a <sulp+0x3a>
 8007766:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800776a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800776e:	2b00      	cmp	r3, #0
 8007770:	dd0b      	ble.n	800778a <sulp+0x3a>
 8007772:	051b      	lsls	r3, r3, #20
 8007774:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007778:	2400      	movs	r4, #0
 800777a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800777e:	4622      	mov	r2, r4
 8007780:	462b      	mov	r3, r5
 8007782:	f7f8 ff11 	bl	80005a8 <__aeabi_dmul>
 8007786:	4604      	mov	r4, r0
 8007788:	460d      	mov	r5, r1
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007792:	0000      	movs	r0, r0
 8007794:	0000      	movs	r0, r0
	...

08007798 <_strtod_l>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	b0a1      	sub	sp, #132	; 0x84
 800779e:	469b      	mov	fp, r3
 80077a0:	2300      	movs	r3, #0
 80077a2:	931c      	str	r3, [sp, #112]	; 0x70
 80077a4:	4ba1      	ldr	r3, [pc, #644]	; (8007a2c <_strtod_l+0x294>)
 80077a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80077a8:	681f      	ldr	r7, [r3, #0]
 80077aa:	4682      	mov	sl, r0
 80077ac:	4638      	mov	r0, r7
 80077ae:	460e      	mov	r6, r1
 80077b0:	f7f8 fce6 	bl	8000180 <strlen>
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	4604      	mov	r4, r0
 80077ba:	f04f 0900 	mov.w	r9, #0
 80077be:	961b      	str	r6, [sp, #108]	; 0x6c
 80077c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	2a2b      	cmp	r2, #43	; 0x2b
 80077c6:	d04c      	beq.n	8007862 <_strtod_l+0xca>
 80077c8:	d83a      	bhi.n	8007840 <_strtod_l+0xa8>
 80077ca:	2a0d      	cmp	r2, #13
 80077cc:	d833      	bhi.n	8007836 <_strtod_l+0x9e>
 80077ce:	2a08      	cmp	r2, #8
 80077d0:	d833      	bhi.n	800783a <_strtod_l+0xa2>
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	d03d      	beq.n	8007852 <_strtod_l+0xba>
 80077d6:	2300      	movs	r3, #0
 80077d8:	930c      	str	r3, [sp, #48]	; 0x30
 80077da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80077dc:	782b      	ldrb	r3, [r5, #0]
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	f040 80af 	bne.w	8007942 <_strtod_l+0x1aa>
 80077e4:	786b      	ldrb	r3, [r5, #1]
 80077e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077ea:	2b58      	cmp	r3, #88	; 0x58
 80077ec:	d16c      	bne.n	80078c8 <_strtod_l+0x130>
 80077ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	ab1c      	add	r3, sp, #112	; 0x70
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4a8e      	ldr	r2, [pc, #568]	; (8007a30 <_strtod_l+0x298>)
 80077f8:	f8cd b008 	str.w	fp, [sp, #8]
 80077fc:	ab1d      	add	r3, sp, #116	; 0x74
 80077fe:	a91b      	add	r1, sp, #108	; 0x6c
 8007800:	4650      	mov	r0, sl
 8007802:	f001 fd2f 	bl	8009264 <__gethex>
 8007806:	f010 0607 	ands.w	r6, r0, #7
 800780a:	4604      	mov	r4, r0
 800780c:	d005      	beq.n	800781a <_strtod_l+0x82>
 800780e:	2e06      	cmp	r6, #6
 8007810:	d129      	bne.n	8007866 <_strtod_l+0xce>
 8007812:	3501      	adds	r5, #1
 8007814:	2300      	movs	r3, #0
 8007816:	951b      	str	r5, [sp, #108]	; 0x6c
 8007818:	930c      	str	r3, [sp, #48]	; 0x30
 800781a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 8596 	bne.w	800834e <_strtod_l+0xbb6>
 8007822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007824:	b1d3      	cbz	r3, 800785c <_strtod_l+0xc4>
 8007826:	4642      	mov	r2, r8
 8007828:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800782c:	4610      	mov	r0, r2
 800782e:	4619      	mov	r1, r3
 8007830:	b021      	add	sp, #132	; 0x84
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	2a20      	cmp	r2, #32
 8007838:	d1cd      	bne.n	80077d6 <_strtod_l+0x3e>
 800783a:	3301      	adds	r3, #1
 800783c:	931b      	str	r3, [sp, #108]	; 0x6c
 800783e:	e7bf      	b.n	80077c0 <_strtod_l+0x28>
 8007840:	2a2d      	cmp	r2, #45	; 0x2d
 8007842:	d1c8      	bne.n	80077d6 <_strtod_l+0x3e>
 8007844:	2201      	movs	r2, #1
 8007846:	920c      	str	r2, [sp, #48]	; 0x30
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	921b      	str	r2, [sp, #108]	; 0x6c
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1c3      	bne.n	80077da <_strtod_l+0x42>
 8007852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007854:	961b      	str	r6, [sp, #108]	; 0x6c
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 8577 	bne.w	800834a <_strtod_l+0xbb2>
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	e7e4      	b.n	800782c <_strtod_l+0x94>
 8007862:	2200      	movs	r2, #0
 8007864:	e7ef      	b.n	8007846 <_strtod_l+0xae>
 8007866:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007868:	b13a      	cbz	r2, 800787a <_strtod_l+0xe2>
 800786a:	2135      	movs	r1, #53	; 0x35
 800786c:	a81e      	add	r0, sp, #120	; 0x78
 800786e:	f002 fc91 	bl	800a194 <__copybits>
 8007872:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007874:	4650      	mov	r0, sl
 8007876:	f002 f85d 	bl	8009934 <_Bfree>
 800787a:	3e01      	subs	r6, #1
 800787c:	2e05      	cmp	r6, #5
 800787e:	d807      	bhi.n	8007890 <_strtod_l+0xf8>
 8007880:	e8df f006 	tbb	[pc, r6]
 8007884:	1d180b0e 	.word	0x1d180b0e
 8007888:	030e      	.short	0x030e
 800788a:	f04f 0900 	mov.w	r9, #0
 800788e:	46c8      	mov	r8, r9
 8007890:	0721      	lsls	r1, r4, #28
 8007892:	d5c2      	bpl.n	800781a <_strtod_l+0x82>
 8007894:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007898:	e7bf      	b.n	800781a <_strtod_l+0x82>
 800789a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800789e:	e7f7      	b.n	8007890 <_strtod_l+0xf8>
 80078a0:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80078a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80078a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078ae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80078b2:	e7ed      	b.n	8007890 <_strtod_l+0xf8>
 80078b4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a34 <_strtod_l+0x29c>
 80078b8:	f04f 0800 	mov.w	r8, #0
 80078bc:	e7e8      	b.n	8007890 <_strtod_l+0xf8>
 80078be:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80078c2:	f04f 38ff 	mov.w	r8, #4294967295
 80078c6:	e7e3      	b.n	8007890 <_strtod_l+0xf8>
 80078c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80078ce:	785b      	ldrb	r3, [r3, #1]
 80078d0:	2b30      	cmp	r3, #48	; 0x30
 80078d2:	d0f9      	beq.n	80078c8 <_strtod_l+0x130>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0a0      	beq.n	800781a <_strtod_l+0x82>
 80078d8:	2301      	movs	r3, #1
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078de:	9308      	str	r3, [sp, #32]
 80078e0:	2300      	movs	r3, #0
 80078e2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80078e6:	469b      	mov	fp, r3
 80078e8:	220a      	movs	r2, #10
 80078ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80078ec:	7805      	ldrb	r5, [r0, #0]
 80078ee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80078f2:	b2d9      	uxtb	r1, r3
 80078f4:	2909      	cmp	r1, #9
 80078f6:	d926      	bls.n	8007946 <_strtod_l+0x1ae>
 80078f8:	4622      	mov	r2, r4
 80078fa:	4639      	mov	r1, r7
 80078fc:	f002 feb6 	bl	800a66c <strncmp>
 8007900:	2800      	cmp	r0, #0
 8007902:	d032      	beq.n	800796a <_strtod_l+0x1d2>
 8007904:	2000      	movs	r0, #0
 8007906:	462b      	mov	r3, r5
 8007908:	465c      	mov	r4, fp
 800790a:	9004      	str	r0, [sp, #16]
 800790c:	4602      	mov	r2, r0
 800790e:	2b65      	cmp	r3, #101	; 0x65
 8007910:	d001      	beq.n	8007916 <_strtod_l+0x17e>
 8007912:	2b45      	cmp	r3, #69	; 0x45
 8007914:	d113      	bne.n	800793e <_strtod_l+0x1a6>
 8007916:	b91c      	cbnz	r4, 8007920 <_strtod_l+0x188>
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	4303      	orrs	r3, r0
 800791c:	d099      	beq.n	8007852 <_strtod_l+0xba>
 800791e:	2400      	movs	r4, #0
 8007920:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007922:	1c73      	adds	r3, r6, #1
 8007924:	931b      	str	r3, [sp, #108]	; 0x6c
 8007926:	7873      	ldrb	r3, [r6, #1]
 8007928:	2b2b      	cmp	r3, #43	; 0x2b
 800792a:	d078      	beq.n	8007a1e <_strtod_l+0x286>
 800792c:	2b2d      	cmp	r3, #45	; 0x2d
 800792e:	d07b      	beq.n	8007a28 <_strtod_l+0x290>
 8007930:	2700      	movs	r7, #0
 8007932:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007936:	2909      	cmp	r1, #9
 8007938:	f240 8082 	bls.w	8007a40 <_strtod_l+0x2a8>
 800793c:	961b      	str	r6, [sp, #108]	; 0x6c
 800793e:	2500      	movs	r5, #0
 8007940:	e09e      	b.n	8007a80 <_strtod_l+0x2e8>
 8007942:	2300      	movs	r3, #0
 8007944:	e7c9      	b.n	80078da <_strtod_l+0x142>
 8007946:	f1bb 0f08 	cmp.w	fp, #8
 800794a:	bfd5      	itete	le
 800794c:	9906      	ldrle	r1, [sp, #24]
 800794e:	9905      	ldrgt	r1, [sp, #20]
 8007950:	fb02 3301 	mlale	r3, r2, r1, r3
 8007954:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007958:	f100 0001 	add.w	r0, r0, #1
 800795c:	bfd4      	ite	le
 800795e:	9306      	strle	r3, [sp, #24]
 8007960:	9305      	strgt	r3, [sp, #20]
 8007962:	f10b 0b01 	add.w	fp, fp, #1
 8007966:	901b      	str	r0, [sp, #108]	; 0x6c
 8007968:	e7bf      	b.n	80078ea <_strtod_l+0x152>
 800796a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800796c:	191a      	adds	r2, r3, r4
 800796e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007970:	5d1b      	ldrb	r3, [r3, r4]
 8007972:	f1bb 0f00 	cmp.w	fp, #0
 8007976:	d036      	beq.n	80079e6 <_strtod_l+0x24e>
 8007978:	9004      	str	r0, [sp, #16]
 800797a:	465c      	mov	r4, fp
 800797c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007980:	2a09      	cmp	r2, #9
 8007982:	d912      	bls.n	80079aa <_strtod_l+0x212>
 8007984:	2201      	movs	r2, #1
 8007986:	e7c2      	b.n	800790e <_strtod_l+0x176>
 8007988:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	921b      	str	r2, [sp, #108]	; 0x6c
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	3001      	adds	r0, #1
 8007992:	2b30      	cmp	r3, #48	; 0x30
 8007994:	d0f8      	beq.n	8007988 <_strtod_l+0x1f0>
 8007996:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800799a:	2a08      	cmp	r2, #8
 800799c:	f200 84dc 	bhi.w	8008358 <_strtod_l+0xbc0>
 80079a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80079a2:	9004      	str	r0, [sp, #16]
 80079a4:	2000      	movs	r0, #0
 80079a6:	9208      	str	r2, [sp, #32]
 80079a8:	4604      	mov	r4, r0
 80079aa:	3b30      	subs	r3, #48	; 0x30
 80079ac:	f100 0201 	add.w	r2, r0, #1
 80079b0:	d013      	beq.n	80079da <_strtod_l+0x242>
 80079b2:	9904      	ldr	r1, [sp, #16]
 80079b4:	4411      	add	r1, r2
 80079b6:	9104      	str	r1, [sp, #16]
 80079b8:	4622      	mov	r2, r4
 80079ba:	1905      	adds	r5, r0, r4
 80079bc:	210a      	movs	r1, #10
 80079be:	42aa      	cmp	r2, r5
 80079c0:	d113      	bne.n	80079ea <_strtod_l+0x252>
 80079c2:	1822      	adds	r2, r4, r0
 80079c4:	2a08      	cmp	r2, #8
 80079c6:	f104 0401 	add.w	r4, r4, #1
 80079ca:	4404      	add	r4, r0
 80079cc:	dc1b      	bgt.n	8007a06 <_strtod_l+0x26e>
 80079ce:	9906      	ldr	r1, [sp, #24]
 80079d0:	220a      	movs	r2, #10
 80079d2:	fb02 3301 	mla	r3, r2, r1, r3
 80079d6:	9306      	str	r3, [sp, #24]
 80079d8:	2200      	movs	r2, #0
 80079da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079dc:	1c59      	adds	r1, r3, #1
 80079de:	911b      	str	r1, [sp, #108]	; 0x6c
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	4610      	mov	r0, r2
 80079e4:	e7ca      	b.n	800797c <_strtod_l+0x1e4>
 80079e6:	4658      	mov	r0, fp
 80079e8:	e7d3      	b.n	8007992 <_strtod_l+0x1fa>
 80079ea:	2a08      	cmp	r2, #8
 80079ec:	dc04      	bgt.n	80079f8 <_strtod_l+0x260>
 80079ee:	9f06      	ldr	r7, [sp, #24]
 80079f0:	434f      	muls	r7, r1
 80079f2:	9706      	str	r7, [sp, #24]
 80079f4:	3201      	adds	r2, #1
 80079f6:	e7e2      	b.n	80079be <_strtod_l+0x226>
 80079f8:	1c57      	adds	r7, r2, #1
 80079fa:	2f10      	cmp	r7, #16
 80079fc:	bfde      	ittt	le
 80079fe:	9f05      	ldrle	r7, [sp, #20]
 8007a00:	434f      	mulle	r7, r1
 8007a02:	9705      	strle	r7, [sp, #20]
 8007a04:	e7f6      	b.n	80079f4 <_strtod_l+0x25c>
 8007a06:	2c10      	cmp	r4, #16
 8007a08:	bfdf      	itttt	le
 8007a0a:	9905      	ldrle	r1, [sp, #20]
 8007a0c:	220a      	movle	r2, #10
 8007a0e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a12:	9305      	strle	r3, [sp, #20]
 8007a14:	e7e0      	b.n	80079d8 <_strtod_l+0x240>
 8007a16:	2300      	movs	r3, #0
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	e77c      	b.n	8007918 <_strtod_l+0x180>
 8007a1e:	2700      	movs	r7, #0
 8007a20:	1cb3      	adds	r3, r6, #2
 8007a22:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a24:	78b3      	ldrb	r3, [r6, #2]
 8007a26:	e784      	b.n	8007932 <_strtod_l+0x19a>
 8007a28:	2701      	movs	r7, #1
 8007a2a:	e7f9      	b.n	8007a20 <_strtod_l+0x288>
 8007a2c:	0800b660 	.word	0x0800b660
 8007a30:	0800b40c 	.word	0x0800b40c
 8007a34:	7ff00000 	.word	0x7ff00000
 8007a38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a3a:	1c59      	adds	r1, r3, #1
 8007a3c:	911b      	str	r1, [sp, #108]	; 0x6c
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d0f9      	beq.n	8007a38 <_strtod_l+0x2a0>
 8007a44:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007a48:	2908      	cmp	r1, #8
 8007a4a:	f63f af78 	bhi.w	800793e <_strtod_l+0x1a6>
 8007a4e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a54:	9309      	str	r3, [sp, #36]	; 0x24
 8007a56:	f04f 0e0a 	mov.w	lr, #10
 8007a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a5c:	1c59      	adds	r1, r3, #1
 8007a5e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007a66:	2d09      	cmp	r5, #9
 8007a68:	d935      	bls.n	8007ad6 <_strtod_l+0x33e>
 8007a6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a6c:	1b49      	subs	r1, r1, r5
 8007a6e:	2908      	cmp	r1, #8
 8007a70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007a74:	dc02      	bgt.n	8007a7c <_strtod_l+0x2e4>
 8007a76:	4565      	cmp	r5, ip
 8007a78:	bfa8      	it	ge
 8007a7a:	4665      	movge	r5, ip
 8007a7c:	b107      	cbz	r7, 8007a80 <_strtod_l+0x2e8>
 8007a7e:	426d      	negs	r5, r5
 8007a80:	2c00      	cmp	r4, #0
 8007a82:	d14c      	bne.n	8007b1e <_strtod_l+0x386>
 8007a84:	9907      	ldr	r1, [sp, #28]
 8007a86:	4301      	orrs	r1, r0
 8007a88:	f47f aec7 	bne.w	800781a <_strtod_l+0x82>
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	f47f aee0 	bne.w	8007852 <_strtod_l+0xba>
 8007a92:	2b69      	cmp	r3, #105	; 0x69
 8007a94:	d026      	beq.n	8007ae4 <_strtod_l+0x34c>
 8007a96:	dc23      	bgt.n	8007ae0 <_strtod_l+0x348>
 8007a98:	2b49      	cmp	r3, #73	; 0x49
 8007a9a:	d023      	beq.n	8007ae4 <_strtod_l+0x34c>
 8007a9c:	2b4e      	cmp	r3, #78	; 0x4e
 8007a9e:	f47f aed8 	bne.w	8007852 <_strtod_l+0xba>
 8007aa2:	499c      	ldr	r1, [pc, #624]	; (8007d14 <_strtod_l+0x57c>)
 8007aa4:	a81b      	add	r0, sp, #108	; 0x6c
 8007aa6:	f001 fe29 	bl	80096fc <__match>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f43f aed1 	beq.w	8007852 <_strtod_l+0xba>
 8007ab0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b28      	cmp	r3, #40	; 0x28
 8007ab6:	d12c      	bne.n	8007b12 <_strtod_l+0x37a>
 8007ab8:	4997      	ldr	r1, [pc, #604]	; (8007d18 <_strtod_l+0x580>)
 8007aba:	aa1e      	add	r2, sp, #120	; 0x78
 8007abc:	a81b      	add	r0, sp, #108	; 0x6c
 8007abe:	f001 fe31 	bl	8009724 <__hexnan>
 8007ac2:	2805      	cmp	r0, #5
 8007ac4:	d125      	bne.n	8007b12 <_strtod_l+0x37a>
 8007ac6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ac8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007acc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007ad0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007ad4:	e6a1      	b.n	800781a <_strtod_l+0x82>
 8007ad6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007ada:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007ade:	e7bc      	b.n	8007a5a <_strtod_l+0x2c2>
 8007ae0:	2b6e      	cmp	r3, #110	; 0x6e
 8007ae2:	e7dc      	b.n	8007a9e <_strtod_l+0x306>
 8007ae4:	498d      	ldr	r1, [pc, #564]	; (8007d1c <_strtod_l+0x584>)
 8007ae6:	a81b      	add	r0, sp, #108	; 0x6c
 8007ae8:	f001 fe08 	bl	80096fc <__match>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f aeb0 	beq.w	8007852 <_strtod_l+0xba>
 8007af2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007af4:	498a      	ldr	r1, [pc, #552]	; (8007d20 <_strtod_l+0x588>)
 8007af6:	3b01      	subs	r3, #1
 8007af8:	a81b      	add	r0, sp, #108	; 0x6c
 8007afa:	931b      	str	r3, [sp, #108]	; 0x6c
 8007afc:	f001 fdfe 	bl	80096fc <__match>
 8007b00:	b910      	cbnz	r0, 8007b08 <_strtod_l+0x370>
 8007b02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b04:	3301      	adds	r3, #1
 8007b06:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b08:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007d30 <_strtod_l+0x598>
 8007b0c:	f04f 0800 	mov.w	r8, #0
 8007b10:	e683      	b.n	800781a <_strtod_l+0x82>
 8007b12:	4884      	ldr	r0, [pc, #528]	; (8007d24 <_strtod_l+0x58c>)
 8007b14:	f002 fd94 	bl	800a640 <nan>
 8007b18:	4680      	mov	r8, r0
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	e67d      	b.n	800781a <_strtod_l+0x82>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	9806      	ldr	r0, [sp, #24]
 8007b22:	1aeb      	subs	r3, r5, r3
 8007b24:	f1bb 0f00 	cmp.w	fp, #0
 8007b28:	bf08      	it	eq
 8007b2a:	46a3      	moveq	fp, r4
 8007b2c:	2c10      	cmp	r4, #16
 8007b2e:	9307      	str	r3, [sp, #28]
 8007b30:	4626      	mov	r6, r4
 8007b32:	bfa8      	it	ge
 8007b34:	2610      	movge	r6, #16
 8007b36:	f7f8 fcbd 	bl	80004b4 <__aeabi_ui2d>
 8007b3a:	2c09      	cmp	r4, #9
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4689      	mov	r9, r1
 8007b40:	dd13      	ble.n	8007b6a <_strtod_l+0x3d2>
 8007b42:	4b79      	ldr	r3, [pc, #484]	; (8007d28 <_strtod_l+0x590>)
 8007b44:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b48:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b4c:	f7f8 fd2c 	bl	80005a8 <__aeabi_dmul>
 8007b50:	4680      	mov	r8, r0
 8007b52:	9805      	ldr	r0, [sp, #20]
 8007b54:	4689      	mov	r9, r1
 8007b56:	f7f8 fcad 	bl	80004b4 <__aeabi_ui2d>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4640      	mov	r0, r8
 8007b60:	4649      	mov	r1, r9
 8007b62:	f7f8 fb6b 	bl	800023c <__adddf3>
 8007b66:	4680      	mov	r8, r0
 8007b68:	4689      	mov	r9, r1
 8007b6a:	2c0f      	cmp	r4, #15
 8007b6c:	dc36      	bgt.n	8007bdc <_strtod_l+0x444>
 8007b6e:	9b07      	ldr	r3, [sp, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f43f ae52 	beq.w	800781a <_strtod_l+0x82>
 8007b76:	dd22      	ble.n	8007bbe <_strtod_l+0x426>
 8007b78:	2b16      	cmp	r3, #22
 8007b7a:	dc09      	bgt.n	8007b90 <_strtod_l+0x3f8>
 8007b7c:	4c6a      	ldr	r4, [pc, #424]	; (8007d28 <_strtod_l+0x590>)
 8007b7e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007b82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007b86:	4642      	mov	r2, r8
 8007b88:	464b      	mov	r3, r9
 8007b8a:	f7f8 fd0d 	bl	80005a8 <__aeabi_dmul>
 8007b8e:	e7c3      	b.n	8007b18 <_strtod_l+0x380>
 8007b90:	9a07      	ldr	r2, [sp, #28]
 8007b92:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007b96:	4293      	cmp	r3, r2
 8007b98:	db20      	blt.n	8007bdc <_strtod_l+0x444>
 8007b9a:	4d63      	ldr	r5, [pc, #396]	; (8007d28 <_strtod_l+0x590>)
 8007b9c:	f1c4 040f 	rsb	r4, r4, #15
 8007ba0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bac:	f7f8 fcfc 	bl	80005a8 <__aeabi_dmul>
 8007bb0:	9b07      	ldr	r3, [sp, #28]
 8007bb2:	1b1c      	subs	r4, r3, r4
 8007bb4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bbc:	e7e5      	b.n	8007b8a <_strtod_l+0x3f2>
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	3316      	adds	r3, #22
 8007bc2:	db0b      	blt.n	8007bdc <_strtod_l+0x444>
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	4a58      	ldr	r2, [pc, #352]	; (8007d28 <_strtod_l+0x590>)
 8007bc8:	1b5d      	subs	r5, r3, r5
 8007bca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007bce:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f8 fe11 	bl	80007fc <__aeabi_ddiv>
 8007bda:	e79d      	b.n	8007b18 <_strtod_l+0x380>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	1ba6      	subs	r6, r4, r6
 8007be0:	441e      	add	r6, r3
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	dd71      	ble.n	8007cca <_strtod_l+0x532>
 8007be6:	f016 030f 	ands.w	r3, r6, #15
 8007bea:	d00a      	beq.n	8007c02 <_strtod_l+0x46a>
 8007bec:	494e      	ldr	r1, [pc, #312]	; (8007d28 <_strtod_l+0x590>)
 8007bee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bfa:	f7f8 fcd5 	bl	80005a8 <__aeabi_dmul>
 8007bfe:	4680      	mov	r8, r0
 8007c00:	4689      	mov	r9, r1
 8007c02:	f036 060f 	bics.w	r6, r6, #15
 8007c06:	d050      	beq.n	8007caa <_strtod_l+0x512>
 8007c08:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007c0c:	dd27      	ble.n	8007c5e <_strtod_l+0x4c6>
 8007c0e:	f04f 0b00 	mov.w	fp, #0
 8007c12:	f8cd b010 	str.w	fp, [sp, #16]
 8007c16:	f8cd b020 	str.w	fp, [sp, #32]
 8007c1a:	f8cd b018 	str.w	fp, [sp, #24]
 8007c1e:	2322      	movs	r3, #34	; 0x22
 8007c20:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007d30 <_strtod_l+0x598>
 8007c24:	f8ca 3000 	str.w	r3, [sl]
 8007c28:	f04f 0800 	mov.w	r8, #0
 8007c2c:	9b08      	ldr	r3, [sp, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f43f adf3 	beq.w	800781a <_strtod_l+0x82>
 8007c34:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c36:	4650      	mov	r0, sl
 8007c38:	f001 fe7c 	bl	8009934 <_Bfree>
 8007c3c:	9906      	ldr	r1, [sp, #24]
 8007c3e:	4650      	mov	r0, sl
 8007c40:	f001 fe78 	bl	8009934 <_Bfree>
 8007c44:	9904      	ldr	r1, [sp, #16]
 8007c46:	4650      	mov	r0, sl
 8007c48:	f001 fe74 	bl	8009934 <_Bfree>
 8007c4c:	9908      	ldr	r1, [sp, #32]
 8007c4e:	4650      	mov	r0, sl
 8007c50:	f001 fe70 	bl	8009934 <_Bfree>
 8007c54:	4659      	mov	r1, fp
 8007c56:	4650      	mov	r0, sl
 8007c58:	f001 fe6c 	bl	8009934 <_Bfree>
 8007c5c:	e5dd      	b.n	800781a <_strtod_l+0x82>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	1136      	asrs	r6, r6, #4
 8007c62:	4640      	mov	r0, r8
 8007c64:	4649      	mov	r1, r9
 8007c66:	461f      	mov	r7, r3
 8007c68:	2e01      	cmp	r6, #1
 8007c6a:	dc21      	bgt.n	8007cb0 <_strtod_l+0x518>
 8007c6c:	b10b      	cbz	r3, 8007c72 <_strtod_l+0x4da>
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <_strtod_l+0x594>)
 8007c74:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007c78:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	464b      	mov	r3, r9
 8007c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c84:	f7f8 fc90 	bl	80005a8 <__aeabi_dmul>
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <_strtod_l+0x598>)
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	400b      	ands	r3, r1
 8007c8e:	4929      	ldr	r1, [pc, #164]	; (8007d34 <_strtod_l+0x59c>)
 8007c90:	428b      	cmp	r3, r1
 8007c92:	4680      	mov	r8, r0
 8007c94:	d8bb      	bhi.n	8007c0e <_strtod_l+0x476>
 8007c96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c9a:	428b      	cmp	r3, r1
 8007c9c:	bf86      	itte	hi
 8007c9e:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8007d38 <_strtod_l+0x5a0>
 8007ca2:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ca6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007caa:	2300      	movs	r3, #0
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	e07e      	b.n	8007dae <_strtod_l+0x616>
 8007cb0:	07f2      	lsls	r2, r6, #31
 8007cb2:	d507      	bpl.n	8007cc4 <_strtod_l+0x52c>
 8007cb4:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <_strtod_l+0x594>)
 8007cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fc73 	bl	80005a8 <__aeabi_dmul>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	3701      	adds	r7, #1
 8007cc6:	1076      	asrs	r6, r6, #1
 8007cc8:	e7ce      	b.n	8007c68 <_strtod_l+0x4d0>
 8007cca:	d0ee      	beq.n	8007caa <_strtod_l+0x512>
 8007ccc:	4276      	negs	r6, r6
 8007cce:	f016 020f 	ands.w	r2, r6, #15
 8007cd2:	d00a      	beq.n	8007cea <_strtod_l+0x552>
 8007cd4:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <_strtod_l+0x590>)
 8007cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 fd8b 	bl	80007fc <__aeabi_ddiv>
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	1136      	asrs	r6, r6, #4
 8007cec:	d0dd      	beq.n	8007caa <_strtod_l+0x512>
 8007cee:	2e1f      	cmp	r6, #31
 8007cf0:	dd24      	ble.n	8007d3c <_strtod_l+0x5a4>
 8007cf2:	f04f 0b00 	mov.w	fp, #0
 8007cf6:	f8cd b010 	str.w	fp, [sp, #16]
 8007cfa:	f8cd b020 	str.w	fp, [sp, #32]
 8007cfe:	f8cd b018 	str.w	fp, [sp, #24]
 8007d02:	2322      	movs	r3, #34	; 0x22
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	f04f 0900 	mov.w	r9, #0
 8007d0c:	f8ca 3000 	str.w	r3, [sl]
 8007d10:	e78c      	b.n	8007c2c <_strtod_l+0x494>
 8007d12:	bf00      	nop
 8007d14:	0800b3dd 	.word	0x0800b3dd
 8007d18:	0800b420 	.word	0x0800b420
 8007d1c:	0800b3d5 	.word	0x0800b3d5
 8007d20:	0800b564 	.word	0x0800b564
 8007d24:	0800b820 	.word	0x0800b820
 8007d28:	0800b700 	.word	0x0800b700
 8007d2c:	0800b6d8 	.word	0x0800b6d8
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	7ca00000 	.word	0x7ca00000
 8007d38:	7fefffff 	.word	0x7fefffff
 8007d3c:	f016 0310 	ands.w	r3, r6, #16
 8007d40:	bf18      	it	ne
 8007d42:	236a      	movne	r3, #106	; 0x6a
 8007d44:	4fb3      	ldr	r7, [pc, #716]	; (8008014 <_strtod_l+0x87c>)
 8007d46:	9305      	str	r3, [sp, #20]
 8007d48:	4640      	mov	r0, r8
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	07f2      	lsls	r2, r6, #31
 8007d50:	d504      	bpl.n	8007d5c <_strtod_l+0x5c4>
 8007d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d56:	f7f8 fc27 	bl	80005a8 <__aeabi_dmul>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	1076      	asrs	r6, r6, #1
 8007d5e:	f107 0708 	add.w	r7, r7, #8
 8007d62:	d1f4      	bne.n	8007d4e <_strtod_l+0x5b6>
 8007d64:	b10b      	cbz	r3, 8007d6a <_strtod_l+0x5d2>
 8007d66:	4680      	mov	r8, r0
 8007d68:	4689      	mov	r9, r1
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	b1bb      	cbz	r3, 8007d9e <_strtod_l+0x606>
 8007d6e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	4649      	mov	r1, r9
 8007d7a:	dd10      	ble.n	8007d9e <_strtod_l+0x606>
 8007d7c:	2b1f      	cmp	r3, #31
 8007d7e:	f340 8128 	ble.w	8007fd2 <_strtod_l+0x83a>
 8007d82:	2b34      	cmp	r3, #52	; 0x34
 8007d84:	bfde      	ittt	le
 8007d86:	3b20      	suble	r3, #32
 8007d88:	f04f 32ff 	movle.w	r2, #4294967295
 8007d8c:	fa02 f303 	lslle.w	r3, r2, r3
 8007d90:	f04f 0800 	mov.w	r8, #0
 8007d94:	bfcc      	ite	gt
 8007d96:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d9a:	ea03 0901 	andle.w	r9, r3, r1
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	4640      	mov	r0, r8
 8007da4:	4649      	mov	r1, r9
 8007da6:	f7f8 fe67 	bl	8000a78 <__aeabi_dcmpeq>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1a1      	bne.n	8007cf2 <_strtod_l+0x55a>
 8007dae:	9b06      	ldr	r3, [sp, #24]
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	9908      	ldr	r1, [sp, #32]
 8007db4:	4623      	mov	r3, r4
 8007db6:	465a      	mov	r2, fp
 8007db8:	4650      	mov	r0, sl
 8007dba:	f001 fe27 	bl	8009a0c <__s2b>
 8007dbe:	9008      	str	r0, [sp, #32]
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f43f af24 	beq.w	8007c0e <_strtod_l+0x476>
 8007dc6:	9b04      	ldr	r3, [sp, #16]
 8007dc8:	1b5d      	subs	r5, r3, r5
 8007dca:	9b07      	ldr	r3, [sp, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bfb4      	ite	lt
 8007dd0:	462b      	movlt	r3, r5
 8007dd2:	2300      	movge	r3, #0
 8007dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	f04f 0b00 	mov.w	fp, #0
 8007ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007de0:	9316      	str	r3, [sp, #88]	; 0x58
 8007de2:	f8cd b010 	str.w	fp, [sp, #16]
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	4650      	mov	r0, sl
 8007dea:	6859      	ldr	r1, [r3, #4]
 8007dec:	f001 fd62 	bl	80098b4 <_Balloc>
 8007df0:	9006      	str	r0, [sp, #24]
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f43f af13 	beq.w	8007c1e <_strtod_l+0x486>
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	3202      	adds	r2, #2
 8007dfe:	f103 010c 	add.w	r1, r3, #12
 8007e02:	0092      	lsls	r2, r2, #2
 8007e04:	300c      	adds	r0, #12
 8007e06:	f001 fd47 	bl	8009898 <memcpy>
 8007e0a:	ab1e      	add	r3, sp, #120	; 0x78
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	4642      	mov	r2, r8
 8007e14:	464b      	mov	r3, r9
 8007e16:	4650      	mov	r0, sl
 8007e18:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8007e1c:	f002 f930 	bl	800a080 <__d2b>
 8007e20:	901c      	str	r0, [sp, #112]	; 0x70
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f43f aefb 	beq.w	8007c1e <_strtod_l+0x486>
 8007e28:	2101      	movs	r1, #1
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f001 fe86 	bl	8009b3c <__i2b>
 8007e30:	9004      	str	r0, [sp, #16]
 8007e32:	4603      	mov	r3, r0
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f43f aef2 	beq.w	8007c1e <_strtod_l+0x486>
 8007e3a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007e3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	bfab      	itete	ge
 8007e42:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007e44:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007e46:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007e48:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007e4a:	bfac      	ite	ge
 8007e4c:	18ee      	addge	r6, r5, r3
 8007e4e:	1b5c      	sublt	r4, r3, r5
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	1aed      	subs	r5, r5, r3
 8007e54:	4415      	add	r5, r2
 8007e56:	4b70      	ldr	r3, [pc, #448]	; (8008018 <_strtod_l+0x880>)
 8007e58:	3d01      	subs	r5, #1
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e60:	f280 80c9 	bge.w	8007ff6 <_strtod_l+0x85e>
 8007e64:	1b5b      	subs	r3, r3, r5
 8007e66:	2b1f      	cmp	r3, #31
 8007e68:	eba2 0203 	sub.w	r2, r2, r3
 8007e6c:	f04f 0701 	mov.w	r7, #1
 8007e70:	f300 80b6 	bgt.w	8007fe0 <_strtod_l+0x848>
 8007e74:	fa07 f303 	lsl.w	r3, r7, r3
 8007e78:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	18b7      	adds	r7, r6, r2
 8007e7e:	9b05      	ldr	r3, [sp, #20]
 8007e80:	42be      	cmp	r6, r7
 8007e82:	4414      	add	r4, r2
 8007e84:	441c      	add	r4, r3
 8007e86:	4633      	mov	r3, r6
 8007e88:	bfa8      	it	ge
 8007e8a:	463b      	movge	r3, r7
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	bfa8      	it	ge
 8007e90:	4623      	movge	r3, r4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfc2      	ittt	gt
 8007e96:	1aff      	subgt	r7, r7, r3
 8007e98:	1ae4      	subgt	r4, r4, r3
 8007e9a:	1af6      	subgt	r6, r6, r3
 8007e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd17      	ble.n	8007ed2 <_strtod_l+0x73a>
 8007ea2:	9904      	ldr	r1, [sp, #16]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4650      	mov	r0, sl
 8007ea8:	f001 ff04 	bl	8009cb4 <__pow5mult>
 8007eac:	9004      	str	r0, [sp, #16]
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f43f aeb5 	beq.w	8007c1e <_strtod_l+0x486>
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007eb8:	4650      	mov	r0, sl
 8007eba:	f001 fe55 	bl	8009b68 <__multiply>
 8007ebe:	9009      	str	r0, [sp, #36]	; 0x24
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f aeac 	beq.w	8007c1e <_strtod_l+0x486>
 8007ec6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ec8:	4650      	mov	r0, sl
 8007eca:	f001 fd33 	bl	8009934 <_Bfree>
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	931c      	str	r3, [sp, #112]	; 0x70
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	f300 8093 	bgt.w	8007ffe <_strtod_l+0x866>
 8007ed8:	9b07      	ldr	r3, [sp, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dd08      	ble.n	8007ef0 <_strtod_l+0x758>
 8007ede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ee0:	9906      	ldr	r1, [sp, #24]
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f001 fee6 	bl	8009cb4 <__pow5mult>
 8007ee8:	9006      	str	r0, [sp, #24]
 8007eea:	2800      	cmp	r0, #0
 8007eec:	f43f ae97 	beq.w	8007c1e <_strtod_l+0x486>
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	dd08      	ble.n	8007f06 <_strtod_l+0x76e>
 8007ef4:	9906      	ldr	r1, [sp, #24]
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	4650      	mov	r0, sl
 8007efa:	f001 ff35 	bl	8009d68 <__lshift>
 8007efe:	9006      	str	r0, [sp, #24]
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f43f ae8c 	beq.w	8007c1e <_strtod_l+0x486>
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	dd08      	ble.n	8007f1c <_strtod_l+0x784>
 8007f0a:	9904      	ldr	r1, [sp, #16]
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f001 ff2a 	bl	8009d68 <__lshift>
 8007f14:	9004      	str	r0, [sp, #16]
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f43f ae81 	beq.w	8007c1e <_strtod_l+0x486>
 8007f1c:	9a06      	ldr	r2, [sp, #24]
 8007f1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f20:	4650      	mov	r0, sl
 8007f22:	f001 ffa9 	bl	8009e78 <__mdiff>
 8007f26:	4683      	mov	fp, r0
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f43f ae78 	beq.w	8007c1e <_strtod_l+0x486>
 8007f2e:	2400      	movs	r4, #0
 8007f30:	68c3      	ldr	r3, [r0, #12]
 8007f32:	9904      	ldr	r1, [sp, #16]
 8007f34:	60c4      	str	r4, [r0, #12]
 8007f36:	930d      	str	r3, [sp, #52]	; 0x34
 8007f38:	f001 ff82 	bl	8009e40 <__mcmp>
 8007f3c:	42a0      	cmp	r0, r4
 8007f3e:	da71      	bge.n	8008024 <_strtod_l+0x88c>
 8007f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f42:	ea53 0308 	orrs.w	r3, r3, r8
 8007f46:	f040 8097 	bne.w	8008078 <_strtod_l+0x8e0>
 8007f4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 8092 	bne.w	8008078 <_strtod_l+0x8e0>
 8007f54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f58:	0d1b      	lsrs	r3, r3, #20
 8007f5a:	051b      	lsls	r3, r3, #20
 8007f5c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f60:	f240 808a 	bls.w	8008078 <_strtod_l+0x8e0>
 8007f64:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007f68:	b923      	cbnz	r3, 8007f74 <_strtod_l+0x7dc>
 8007f6a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	f340 8082 	ble.w	8008078 <_strtod_l+0x8e0>
 8007f74:	4659      	mov	r1, fp
 8007f76:	2201      	movs	r2, #1
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f001 fef5 	bl	8009d68 <__lshift>
 8007f7e:	9904      	ldr	r1, [sp, #16]
 8007f80:	4683      	mov	fp, r0
 8007f82:	f001 ff5d 	bl	8009e40 <__mcmp>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	dd76      	ble.n	8008078 <_strtod_l+0x8e0>
 8007f8a:	9905      	ldr	r1, [sp, #20]
 8007f8c:	4a23      	ldr	r2, [pc, #140]	; (800801c <_strtod_l+0x884>)
 8007f8e:	464b      	mov	r3, r9
 8007f90:	2900      	cmp	r1, #0
 8007f92:	f000 8092 	beq.w	80080ba <_strtod_l+0x922>
 8007f96:	ea02 0109 	and.w	r1, r2, r9
 8007f9a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f9e:	f300 808c 	bgt.w	80080ba <_strtod_l+0x922>
 8007fa2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007fa6:	f77f aeac 	ble.w	8007d02 <_strtod_l+0x56a>
 8007faa:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <_strtod_l+0x888>)
 8007fac:	2300      	movs	r3, #0
 8007fae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007fb8:	4649      	mov	r1, r9
 8007fba:	f7f8 faf5 	bl	80005a8 <__aeabi_dmul>
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4303      	orrs	r3, r0
 8007fc2:	bf08      	it	eq
 8007fc4:	2322      	moveq	r3, #34	; 0x22
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	4689      	mov	r9, r1
 8007fca:	bf08      	it	eq
 8007fcc:	f8ca 3000 	streq.w	r3, [sl]
 8007fd0:	e630      	b.n	8007c34 <_strtod_l+0x49c>
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	ea03 0808 	and.w	r8, r3, r8
 8007fde:	e6de      	b.n	8007d9e <_strtod_l+0x606>
 8007fe0:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007fe4:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007fe8:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007fec:	35e2      	adds	r5, #226	; 0xe2
 8007fee:	fa07 f505 	lsl.w	r5, r7, r5
 8007ff2:	970f      	str	r7, [sp, #60]	; 0x3c
 8007ff4:	e742      	b.n	8007e7c <_strtod_l+0x6e4>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ffc:	e73e      	b.n	8007e7c <_strtod_l+0x6e4>
 8007ffe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008000:	463a      	mov	r2, r7
 8008002:	4650      	mov	r0, sl
 8008004:	f001 feb0 	bl	8009d68 <__lshift>
 8008008:	901c      	str	r0, [sp, #112]	; 0x70
 800800a:	2800      	cmp	r0, #0
 800800c:	f47f af64 	bne.w	8007ed8 <_strtod_l+0x740>
 8008010:	e605      	b.n	8007c1e <_strtod_l+0x486>
 8008012:	bf00      	nop
 8008014:	0800b438 	.word	0x0800b438
 8008018:	fffffc02 	.word	0xfffffc02
 800801c:	7ff00000 	.word	0x7ff00000
 8008020:	39500000 	.word	0x39500000
 8008024:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008028:	d166      	bne.n	80080f8 <_strtod_l+0x960>
 800802a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800802c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008030:	b35a      	cbz	r2, 800808a <_strtod_l+0x8f2>
 8008032:	4a9d      	ldr	r2, [pc, #628]	; (80082a8 <_strtod_l+0xb10>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d12c      	bne.n	8008092 <_strtod_l+0x8fa>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	4640      	mov	r0, r8
 800803c:	b303      	cbz	r3, 8008080 <_strtod_l+0x8e8>
 800803e:	4a9b      	ldr	r2, [pc, #620]	; (80082ac <_strtod_l+0xb14>)
 8008040:	464b      	mov	r3, r9
 8008042:	401a      	ands	r2, r3
 8008044:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008048:	f04f 31ff 	mov.w	r1, #4294967295
 800804c:	d81b      	bhi.n	8008086 <_strtod_l+0x8ee>
 800804e:	0d12      	lsrs	r2, r2, #20
 8008050:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008054:	fa01 f303 	lsl.w	r3, r1, r3
 8008058:	4298      	cmp	r0, r3
 800805a:	d11a      	bne.n	8008092 <_strtod_l+0x8fa>
 800805c:	4b94      	ldr	r3, [pc, #592]	; (80082b0 <_strtod_l+0xb18>)
 800805e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008060:	429a      	cmp	r2, r3
 8008062:	d102      	bne.n	800806a <_strtod_l+0x8d2>
 8008064:	3001      	adds	r0, #1
 8008066:	f43f adda 	beq.w	8007c1e <_strtod_l+0x486>
 800806a:	4b90      	ldr	r3, [pc, #576]	; (80082ac <_strtod_l+0xb14>)
 800806c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800806e:	401a      	ands	r2, r3
 8008070:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008074:	f04f 0800 	mov.w	r8, #0
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d195      	bne.n	8007faa <_strtod_l+0x812>
 800807e:	e5d9      	b.n	8007c34 <_strtod_l+0x49c>
 8008080:	f04f 33ff 	mov.w	r3, #4294967295
 8008084:	e7e8      	b.n	8008058 <_strtod_l+0x8c0>
 8008086:	460b      	mov	r3, r1
 8008088:	e7e6      	b.n	8008058 <_strtod_l+0x8c0>
 800808a:	ea53 0308 	orrs.w	r3, r3, r8
 800808e:	f43f af7c 	beq.w	8007f8a <_strtod_l+0x7f2>
 8008092:	b1e5      	cbz	r5, 80080ce <_strtod_l+0x936>
 8008094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008096:	421d      	tst	r5, r3
 8008098:	d0ee      	beq.n	8008078 <_strtod_l+0x8e0>
 800809a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800809c:	9a05      	ldr	r2, [sp, #20]
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	b1c3      	cbz	r3, 80080d6 <_strtod_l+0x93e>
 80080a4:	f7ff fb54 	bl	8007750 <sulp>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080b0:	f7f8 f8c4 	bl	800023c <__adddf3>
 80080b4:	4680      	mov	r8, r0
 80080b6:	4689      	mov	r9, r1
 80080b8:	e7de      	b.n	8008078 <_strtod_l+0x8e0>
 80080ba:	4013      	ands	r3, r2
 80080bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80080c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80080c8:	f04f 38ff 	mov.w	r8, #4294967295
 80080cc:	e7d4      	b.n	8008078 <_strtod_l+0x8e0>
 80080ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d0:	ea13 0f08 	tst.w	r3, r8
 80080d4:	e7e0      	b.n	8008098 <_strtod_l+0x900>
 80080d6:	f7ff fb3b 	bl	8007750 <sulp>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080e2:	f7f8 f8a9 	bl	8000238 <__aeabi_dsub>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	f7f8 fcc3 	bl	8000a78 <__aeabi_dcmpeq>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0c0      	beq.n	8008078 <_strtod_l+0x8e0>
 80080f6:	e604      	b.n	8007d02 <_strtod_l+0x56a>
 80080f8:	9904      	ldr	r1, [sp, #16]
 80080fa:	4658      	mov	r0, fp
 80080fc:	f002 f81c 	bl	800a138 <__ratio>
 8008100:	2200      	movs	r2, #0
 8008102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008106:	4606      	mov	r6, r0
 8008108:	460f      	mov	r7, r1
 800810a:	f7f8 fcc9 	bl	8000aa0 <__aeabi_dcmple>
 800810e:	2800      	cmp	r0, #0
 8008110:	d075      	beq.n	80081fe <_strtod_l+0xa66>
 8008112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008114:	2b00      	cmp	r3, #0
 8008116:	d047      	beq.n	80081a8 <_strtod_l+0xa10>
 8008118:	4f66      	ldr	r7, [pc, #408]	; (80082b4 <_strtod_l+0xb1c>)
 800811a:	2600      	movs	r6, #0
 800811c:	4d65      	ldr	r5, [pc, #404]	; (80082b4 <_strtod_l+0xb1c>)
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008124:	0d1b      	lsrs	r3, r3, #20
 8008126:	051b      	lsls	r3, r3, #20
 8008128:	930f      	str	r3, [sp, #60]	; 0x3c
 800812a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800812c:	4b62      	ldr	r3, [pc, #392]	; (80082b8 <_strtod_l+0xb20>)
 800812e:	429a      	cmp	r2, r3
 8008130:	f040 80ca 	bne.w	80082c8 <_strtod_l+0xb30>
 8008134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008138:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f001 ff21 	bl	8009f8c <__ulp>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 fa29 	bl	80005a8 <__aeabi_dmul>
 8008156:	4642      	mov	r2, r8
 8008158:	464b      	mov	r3, r9
 800815a:	f7f8 f86f 	bl	800023c <__adddf3>
 800815e:	460b      	mov	r3, r1
 8008160:	4952      	ldr	r1, [pc, #328]	; (80082ac <_strtod_l+0xb14>)
 8008162:	4a56      	ldr	r2, [pc, #344]	; (80082bc <_strtod_l+0xb24>)
 8008164:	4019      	ands	r1, r3
 8008166:	4291      	cmp	r1, r2
 8008168:	4680      	mov	r8, r0
 800816a:	d95e      	bls.n	800822a <_strtod_l+0xa92>
 800816c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008172:	4293      	cmp	r3, r2
 8008174:	d103      	bne.n	800817e <_strtod_l+0x9e6>
 8008176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008178:	3301      	adds	r3, #1
 800817a:	f43f ad50 	beq.w	8007c1e <_strtod_l+0x486>
 800817e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80082b0 <_strtod_l+0xb18>
 8008182:	f04f 38ff 	mov.w	r8, #4294967295
 8008186:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008188:	4650      	mov	r0, sl
 800818a:	f001 fbd3 	bl	8009934 <_Bfree>
 800818e:	9906      	ldr	r1, [sp, #24]
 8008190:	4650      	mov	r0, sl
 8008192:	f001 fbcf 	bl	8009934 <_Bfree>
 8008196:	9904      	ldr	r1, [sp, #16]
 8008198:	4650      	mov	r0, sl
 800819a:	f001 fbcb 	bl	8009934 <_Bfree>
 800819e:	4659      	mov	r1, fp
 80081a0:	4650      	mov	r0, sl
 80081a2:	f001 fbc7 	bl	8009934 <_Bfree>
 80081a6:	e61e      	b.n	8007de6 <_strtod_l+0x64e>
 80081a8:	f1b8 0f00 	cmp.w	r8, #0
 80081ac:	d119      	bne.n	80081e2 <_strtod_l+0xa4a>
 80081ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b4:	b9e3      	cbnz	r3, 80081f0 <_strtod_l+0xa58>
 80081b6:	4b3f      	ldr	r3, [pc, #252]	; (80082b4 <_strtod_l+0xb1c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 fc65 	bl	8000a8c <__aeabi_dcmplt>
 80081c2:	b9c8      	cbnz	r0, 80081f8 <_strtod_l+0xa60>
 80081c4:	4b3e      	ldr	r3, [pc, #248]	; (80082c0 <_strtod_l+0xb28>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 f9ec 	bl	80005a8 <__aeabi_dmul>
 80081d0:	4604      	mov	r4, r0
 80081d2:	460d      	mov	r5, r1
 80081d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80081d8:	9418      	str	r4, [sp, #96]	; 0x60
 80081da:	9319      	str	r3, [sp, #100]	; 0x64
 80081dc:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80081e0:	e79d      	b.n	800811e <_strtod_l+0x986>
 80081e2:	f1b8 0f01 	cmp.w	r8, #1
 80081e6:	d103      	bne.n	80081f0 <_strtod_l+0xa58>
 80081e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f43f ad89 	beq.w	8007d02 <_strtod_l+0x56a>
 80081f0:	4f34      	ldr	r7, [pc, #208]	; (80082c4 <_strtod_l+0xb2c>)
 80081f2:	2600      	movs	r6, #0
 80081f4:	2400      	movs	r4, #0
 80081f6:	e791      	b.n	800811c <_strtod_l+0x984>
 80081f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80081fa:	4d31      	ldr	r5, [pc, #196]	; (80082c0 <_strtod_l+0xb28>)
 80081fc:	e7ea      	b.n	80081d4 <_strtod_l+0xa3c>
 80081fe:	4b30      	ldr	r3, [pc, #192]	; (80082c0 <_strtod_l+0xb28>)
 8008200:	2200      	movs	r2, #0
 8008202:	4630      	mov	r0, r6
 8008204:	4639      	mov	r1, r7
 8008206:	f7f8 f9cf 	bl	80005a8 <__aeabi_dmul>
 800820a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	b933      	cbnz	r3, 8008220 <_strtod_l+0xa88>
 8008212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008216:	9010      	str	r0, [sp, #64]	; 0x40
 8008218:	9311      	str	r3, [sp, #68]	; 0x44
 800821a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800821e:	e77e      	b.n	800811e <_strtod_l+0x986>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008228:	e7f7      	b.n	800821a <_strtod_l+0xa82>
 800822a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800822e:	9b05      	ldr	r3, [sp, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1a8      	bne.n	8008186 <_strtod_l+0x9ee>
 8008234:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800823a:	0d1b      	lsrs	r3, r3, #20
 800823c:	051b      	lsls	r3, r3, #20
 800823e:	429a      	cmp	r2, r3
 8008240:	d1a1      	bne.n	8008186 <_strtod_l+0x9ee>
 8008242:	4620      	mov	r0, r4
 8008244:	4629      	mov	r1, r5
 8008246:	f7f8 fe1d 	bl	8000e84 <__aeabi_d2lz>
 800824a:	f7f8 f97f 	bl	800054c <__aeabi_l2d>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f7 ffef 	bl	8000238 <__aeabi_dsub>
 800825a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800825c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008260:	ea43 0308 	orr.w	r3, r3, r8
 8008264:	4313      	orrs	r3, r2
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	d068      	beq.n	800833e <_strtod_l+0xba6>
 800826c:	a30a      	add	r3, pc, #40	; (adr r3, 8008298 <_strtod_l+0xb00>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 fc0b 	bl	8000a8c <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	f47f acdc 	bne.w	8007c34 <_strtod_l+0x49c>
 800827c:	a308      	add	r3, pc, #32	; (adr r3, 80082a0 <_strtod_l+0xb08>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f7f8 fc1f 	bl	8000ac8 <__aeabi_dcmpgt>
 800828a:	2800      	cmp	r0, #0
 800828c:	f43f af7b 	beq.w	8008186 <_strtod_l+0x9ee>
 8008290:	e4d0      	b.n	8007c34 <_strtod_l+0x49c>
 8008292:	bf00      	nop
 8008294:	f3af 8000 	nop.w
 8008298:	94a03595 	.word	0x94a03595
 800829c:	3fdfffff 	.word	0x3fdfffff
 80082a0:	35afe535 	.word	0x35afe535
 80082a4:	3fe00000 	.word	0x3fe00000
 80082a8:	000fffff 	.word	0x000fffff
 80082ac:	7ff00000 	.word	0x7ff00000
 80082b0:	7fefffff 	.word	0x7fefffff
 80082b4:	3ff00000 	.word	0x3ff00000
 80082b8:	7fe00000 	.word	0x7fe00000
 80082bc:	7c9fffff 	.word	0x7c9fffff
 80082c0:	3fe00000 	.word	0x3fe00000
 80082c4:	bff00000 	.word	0xbff00000
 80082c8:	9b05      	ldr	r3, [sp, #20]
 80082ca:	b313      	cbz	r3, 8008312 <_strtod_l+0xb7a>
 80082cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082d2:	d81e      	bhi.n	8008312 <_strtod_l+0xb7a>
 80082d4:	a326      	add	r3, pc, #152	; (adr r3, 8008370 <_strtod_l+0xbd8>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f8 fbdf 	bl	8000aa0 <__aeabi_dcmple>
 80082e2:	b190      	cbz	r0, 800830a <_strtod_l+0xb72>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7f8 fc36 	bl	8000b58 <__aeabi_d2uiz>
 80082ec:	2801      	cmp	r0, #1
 80082ee:	bf38      	it	cc
 80082f0:	2001      	movcc	r0, #1
 80082f2:	f7f8 f8df 	bl	80004b4 <__aeabi_ui2d>
 80082f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	b9d3      	cbnz	r3, 8008334 <_strtod_l+0xb9c>
 80082fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008302:	9012      	str	r0, [sp, #72]	; 0x48
 8008304:	9313      	str	r3, [sp, #76]	; 0x4c
 8008306:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800830a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800830c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008310:	1a9f      	subs	r7, r3, r2
 8008312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008316:	f001 fe39 	bl	8009f8c <__ulp>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f8 f941 	bl	80005a8 <__aeabi_dmul>
 8008326:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800832a:	f7f7 ff87 	bl	800023c <__adddf3>
 800832e:	4680      	mov	r8, r0
 8008330:	4689      	mov	r9, r1
 8008332:	e77c      	b.n	800822e <_strtod_l+0xa96>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800833c:	e7e3      	b.n	8008306 <_strtod_l+0xb6e>
 800833e:	a30e      	add	r3, pc, #56	; (adr r3, 8008378 <_strtod_l+0xbe0>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f7f8 fba2 	bl	8000a8c <__aeabi_dcmplt>
 8008348:	e79f      	b.n	800828a <_strtod_l+0xaf2>
 800834a:	2300      	movs	r3, #0
 800834c:	930c      	str	r3, [sp, #48]	; 0x30
 800834e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008350:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	f7ff ba65 	b.w	8007822 <_strtod_l+0x8a>
 8008358:	2b65      	cmp	r3, #101	; 0x65
 800835a:	f43f ab5c 	beq.w	8007a16 <_strtod_l+0x27e>
 800835e:	2b45      	cmp	r3, #69	; 0x45
 8008360:	f43f ab59 	beq.w	8007a16 <_strtod_l+0x27e>
 8008364:	2201      	movs	r2, #1
 8008366:	f7ff bb8d 	b.w	8007a84 <_strtod_l+0x2ec>
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w
 8008370:	ffc00000 	.word	0xffc00000
 8008374:	41dfffff 	.word	0x41dfffff
 8008378:	94a03595 	.word	0x94a03595
 800837c:	3fcfffff 	.word	0x3fcfffff

08008380 <_strtod_r>:
 8008380:	4b01      	ldr	r3, [pc, #4]	; (8008388 <_strtod_r+0x8>)
 8008382:	f7ff ba09 	b.w	8007798 <_strtod_l>
 8008386:	bf00      	nop
 8008388:	20000074 	.word	0x20000074

0800838c <_strtol_l.isra.0>:
 800838c:	2b01      	cmp	r3, #1
 800838e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008392:	4686      	mov	lr, r0
 8008394:	d001      	beq.n	800839a <_strtol_l.isra.0+0xe>
 8008396:	2b24      	cmp	r3, #36	; 0x24
 8008398:	d906      	bls.n	80083a8 <_strtol_l.isra.0+0x1c>
 800839a:	f7fe fb17 	bl	80069cc <__errno>
 800839e:	2316      	movs	r3, #22
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	2000      	movs	r0, #0
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	4e3a      	ldr	r6, [pc, #232]	; (8008494 <_strtol_l.isra.0+0x108>)
 80083aa:	468c      	mov	ip, r1
 80083ac:	4660      	mov	r0, ip
 80083ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80083b2:	5da5      	ldrb	r5, [r4, r6]
 80083b4:	f015 0508 	ands.w	r5, r5, #8
 80083b8:	d1f8      	bne.n	80083ac <_strtol_l.isra.0+0x20>
 80083ba:	2c2d      	cmp	r4, #45	; 0x2d
 80083bc:	d133      	bne.n	8008426 <_strtol_l.isra.0+0x9a>
 80083be:	f89c 4000 	ldrb.w	r4, [ip]
 80083c2:	f04f 0801 	mov.w	r8, #1
 80083c6:	f100 0c02 	add.w	ip, r0, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d05d      	beq.n	800848a <_strtol_l.isra.0+0xfe>
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d10c      	bne.n	80083ec <_strtol_l.isra.0+0x60>
 80083d2:	2c30      	cmp	r4, #48	; 0x30
 80083d4:	d10a      	bne.n	80083ec <_strtol_l.isra.0+0x60>
 80083d6:	f89c 0000 	ldrb.w	r0, [ip]
 80083da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80083de:	2858      	cmp	r0, #88	; 0x58
 80083e0:	d14e      	bne.n	8008480 <_strtol_l.isra.0+0xf4>
 80083e2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80083e6:	2310      	movs	r3, #16
 80083e8:	f10c 0c02 	add.w	ip, ip, #2
 80083ec:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80083f0:	3f01      	subs	r7, #1
 80083f2:	2500      	movs	r5, #0
 80083f4:	fbb7 f9f3 	udiv	r9, r7, r3
 80083f8:	4628      	mov	r0, r5
 80083fa:	fb03 7a19 	mls	sl, r3, r9, r7
 80083fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008402:	2e09      	cmp	r6, #9
 8008404:	d818      	bhi.n	8008438 <_strtol_l.isra.0+0xac>
 8008406:	4634      	mov	r4, r6
 8008408:	42a3      	cmp	r3, r4
 800840a:	dd24      	ble.n	8008456 <_strtol_l.isra.0+0xca>
 800840c:	2d00      	cmp	r5, #0
 800840e:	db1f      	blt.n	8008450 <_strtol_l.isra.0+0xc4>
 8008410:	4581      	cmp	r9, r0
 8008412:	d31d      	bcc.n	8008450 <_strtol_l.isra.0+0xc4>
 8008414:	d101      	bne.n	800841a <_strtol_l.isra.0+0x8e>
 8008416:	45a2      	cmp	sl, r4
 8008418:	db1a      	blt.n	8008450 <_strtol_l.isra.0+0xc4>
 800841a:	fb00 4003 	mla	r0, r0, r3, r4
 800841e:	2501      	movs	r5, #1
 8008420:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008424:	e7eb      	b.n	80083fe <_strtol_l.isra.0+0x72>
 8008426:	2c2b      	cmp	r4, #43	; 0x2b
 8008428:	bf08      	it	eq
 800842a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800842e:	46a8      	mov	r8, r5
 8008430:	bf08      	it	eq
 8008432:	f100 0c02 	addeq.w	ip, r0, #2
 8008436:	e7c8      	b.n	80083ca <_strtol_l.isra.0+0x3e>
 8008438:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800843c:	2e19      	cmp	r6, #25
 800843e:	d801      	bhi.n	8008444 <_strtol_l.isra.0+0xb8>
 8008440:	3c37      	subs	r4, #55	; 0x37
 8008442:	e7e1      	b.n	8008408 <_strtol_l.isra.0+0x7c>
 8008444:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008448:	2e19      	cmp	r6, #25
 800844a:	d804      	bhi.n	8008456 <_strtol_l.isra.0+0xca>
 800844c:	3c57      	subs	r4, #87	; 0x57
 800844e:	e7db      	b.n	8008408 <_strtol_l.isra.0+0x7c>
 8008450:	f04f 35ff 	mov.w	r5, #4294967295
 8008454:	e7e4      	b.n	8008420 <_strtol_l.isra.0+0x94>
 8008456:	2d00      	cmp	r5, #0
 8008458:	da08      	bge.n	800846c <_strtol_l.isra.0+0xe0>
 800845a:	2322      	movs	r3, #34	; 0x22
 800845c:	f8ce 3000 	str.w	r3, [lr]
 8008460:	4638      	mov	r0, r7
 8008462:	2a00      	cmp	r2, #0
 8008464:	d09e      	beq.n	80083a4 <_strtol_l.isra.0+0x18>
 8008466:	f10c 31ff 	add.w	r1, ip, #4294967295
 800846a:	e007      	b.n	800847c <_strtol_l.isra.0+0xf0>
 800846c:	f1b8 0f00 	cmp.w	r8, #0
 8008470:	d000      	beq.n	8008474 <_strtol_l.isra.0+0xe8>
 8008472:	4240      	negs	r0, r0
 8008474:	2a00      	cmp	r2, #0
 8008476:	d095      	beq.n	80083a4 <_strtol_l.isra.0+0x18>
 8008478:	2d00      	cmp	r5, #0
 800847a:	d1f4      	bne.n	8008466 <_strtol_l.isra.0+0xda>
 800847c:	6011      	str	r1, [r2, #0]
 800847e:	e791      	b.n	80083a4 <_strtol_l.isra.0+0x18>
 8008480:	2430      	movs	r4, #48	; 0x30
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1b2      	bne.n	80083ec <_strtol_l.isra.0+0x60>
 8008486:	2308      	movs	r3, #8
 8008488:	e7b0      	b.n	80083ec <_strtol_l.isra.0+0x60>
 800848a:	2c30      	cmp	r4, #48	; 0x30
 800848c:	d0a3      	beq.n	80083d6 <_strtol_l.isra.0+0x4a>
 800848e:	230a      	movs	r3, #10
 8008490:	e7ac      	b.n	80083ec <_strtol_l.isra.0+0x60>
 8008492:	bf00      	nop
 8008494:	0800b461 	.word	0x0800b461

08008498 <_strtol_r>:
 8008498:	f7ff bf78 	b.w	800838c <_strtol_l.isra.0>

0800849c <quorem>:
 800849c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	6903      	ldr	r3, [r0, #16]
 80084a2:	690c      	ldr	r4, [r1, #16]
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	4607      	mov	r7, r0
 80084a8:	f2c0 8081 	blt.w	80085ae <quorem+0x112>
 80084ac:	3c01      	subs	r4, #1
 80084ae:	f101 0814 	add.w	r8, r1, #20
 80084b2:	f100 0514 	add.w	r5, r0, #20
 80084b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c4:	3301      	adds	r3, #1
 80084c6:	429a      	cmp	r2, r3
 80084c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80084d4:	d331      	bcc.n	800853a <quorem+0x9e>
 80084d6:	f04f 0e00 	mov.w	lr, #0
 80084da:	4640      	mov	r0, r8
 80084dc:	46ac      	mov	ip, r5
 80084de:	46f2      	mov	sl, lr
 80084e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80084e4:	b293      	uxth	r3, r2
 80084e6:	fb06 e303 	mla	r3, r6, r3, lr
 80084ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	ebaa 0303 	sub.w	r3, sl, r3
 80084f4:	0c12      	lsrs	r2, r2, #16
 80084f6:	f8dc a000 	ldr.w	sl, [ip]
 80084fa:	fb06 e202 	mla	r2, r6, r2, lr
 80084fe:	fa13 f38a 	uxtah	r3, r3, sl
 8008502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008506:	fa1f fa82 	uxth.w	sl, r2
 800850a:	f8dc 2000 	ldr.w	r2, [ip]
 800850e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008512:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800851c:	4581      	cmp	r9, r0
 800851e:	f84c 3b04 	str.w	r3, [ip], #4
 8008522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008526:	d2db      	bcs.n	80084e0 <quorem+0x44>
 8008528:	f855 300b 	ldr.w	r3, [r5, fp]
 800852c:	b92b      	cbnz	r3, 800853a <quorem+0x9e>
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	3b04      	subs	r3, #4
 8008532:	429d      	cmp	r5, r3
 8008534:	461a      	mov	r2, r3
 8008536:	d32e      	bcc.n	8008596 <quorem+0xfa>
 8008538:	613c      	str	r4, [r7, #16]
 800853a:	4638      	mov	r0, r7
 800853c:	f001 fc80 	bl	8009e40 <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	db24      	blt.n	800858e <quorem+0xf2>
 8008544:	3601      	adds	r6, #1
 8008546:	4628      	mov	r0, r5
 8008548:	f04f 0c00 	mov.w	ip, #0
 800854c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008550:	f8d0 e000 	ldr.w	lr, [r0]
 8008554:	b293      	uxth	r3, r2
 8008556:	ebac 0303 	sub.w	r3, ip, r3
 800855a:	0c12      	lsrs	r2, r2, #16
 800855c:	fa13 f38e 	uxtah	r3, r3, lr
 8008560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800856e:	45c1      	cmp	r9, r8
 8008570:	f840 3b04 	str.w	r3, [r0], #4
 8008574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008578:	d2e8      	bcs.n	800854c <quorem+0xb0>
 800857a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800857e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008582:	b922      	cbnz	r2, 800858e <quorem+0xf2>
 8008584:	3b04      	subs	r3, #4
 8008586:	429d      	cmp	r5, r3
 8008588:	461a      	mov	r2, r3
 800858a:	d30a      	bcc.n	80085a2 <quorem+0x106>
 800858c:	613c      	str	r4, [r7, #16]
 800858e:	4630      	mov	r0, r6
 8008590:	b003      	add	sp, #12
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	3b04      	subs	r3, #4
 800859a:	2a00      	cmp	r2, #0
 800859c:	d1cc      	bne.n	8008538 <quorem+0x9c>
 800859e:	3c01      	subs	r4, #1
 80085a0:	e7c7      	b.n	8008532 <quorem+0x96>
 80085a2:	6812      	ldr	r2, [r2, #0]
 80085a4:	3b04      	subs	r3, #4
 80085a6:	2a00      	cmp	r2, #0
 80085a8:	d1f0      	bne.n	800858c <quorem+0xf0>
 80085aa:	3c01      	subs	r4, #1
 80085ac:	e7eb      	b.n	8008586 <quorem+0xea>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e7ee      	b.n	8008590 <quorem+0xf4>
 80085b2:	0000      	movs	r0, r0
 80085b4:	0000      	movs	r0, r0
	...

080085b8 <_dtoa_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085be:	b099      	sub	sp, #100	; 0x64
 80085c0:	4616      	mov	r6, r2
 80085c2:	461f      	mov	r7, r3
 80085c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80085c8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80085cc:	4605      	mov	r5, r0
 80085ce:	b974      	cbnz	r4, 80085ee <_dtoa_r+0x36>
 80085d0:	2010      	movs	r0, #16
 80085d2:	f001 f947 	bl	8009864 <malloc>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6268      	str	r0, [r5, #36]	; 0x24
 80085da:	b920      	cbnz	r0, 80085e6 <_dtoa_r+0x2e>
 80085dc:	4ba8      	ldr	r3, [pc, #672]	; (8008880 <_dtoa_r+0x2c8>)
 80085de:	21ea      	movs	r1, #234	; 0xea
 80085e0:	48a8      	ldr	r0, [pc, #672]	; (8008884 <_dtoa_r+0x2cc>)
 80085e2:	f002 f863 	bl	800a6ac <__assert_func>
 80085e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085ea:	6004      	str	r4, [r0, #0]
 80085ec:	60c4      	str	r4, [r0, #12]
 80085ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085f0:	6819      	ldr	r1, [r3, #0]
 80085f2:	b151      	cbz	r1, 800860a <_dtoa_r+0x52>
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	604a      	str	r2, [r1, #4]
 80085f8:	2301      	movs	r3, #1
 80085fa:	4093      	lsls	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]
 80085fe:	4628      	mov	r0, r5
 8008600:	f001 f998 	bl	8009934 <_Bfree>
 8008604:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	1e3b      	subs	r3, r7, #0
 800860c:	bfb9      	ittee	lt
 800860e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008612:	9305      	strlt	r3, [sp, #20]
 8008614:	2300      	movge	r3, #0
 8008616:	f8c8 3000 	strge.w	r3, [r8]
 800861a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800861e:	4b9a      	ldr	r3, [pc, #616]	; (8008888 <_dtoa_r+0x2d0>)
 8008620:	bfbc      	itt	lt
 8008622:	2201      	movlt	r2, #1
 8008624:	f8c8 2000 	strlt.w	r2, [r8]
 8008628:	ea33 0309 	bics.w	r3, r3, r9
 800862c:	d119      	bne.n	8008662 <_dtoa_r+0xaa>
 800862e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008630:	f242 730f 	movw	r3, #9999	; 0x270f
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800863a:	4333      	orrs	r3, r6
 800863c:	f000 8581 	beq.w	8009142 <_dtoa_r+0xb8a>
 8008640:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008642:	b953      	cbnz	r3, 800865a <_dtoa_r+0xa2>
 8008644:	4b91      	ldr	r3, [pc, #580]	; (800888c <_dtoa_r+0x2d4>)
 8008646:	e022      	b.n	800868e <_dtoa_r+0xd6>
 8008648:	4b91      	ldr	r3, [pc, #580]	; (8008890 <_dtoa_r+0x2d8>)
 800864a:	9308      	str	r3, [sp, #32]
 800864c:	3308      	adds	r3, #8
 800864e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	9808      	ldr	r0, [sp, #32]
 8008654:	b019      	add	sp, #100	; 0x64
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	4b8c      	ldr	r3, [pc, #560]	; (800888c <_dtoa_r+0x2d4>)
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	3303      	adds	r3, #3
 8008660:	e7f5      	b.n	800864e <_dtoa_r+0x96>
 8008662:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008666:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800866a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	2300      	movs	r3, #0
 8008672:	f7f8 fa01 	bl	8000a78 <__aeabi_dcmpeq>
 8008676:	4680      	mov	r8, r0
 8008678:	b158      	cbz	r0, 8008692 <_dtoa_r+0xda>
 800867a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800867c:	2301      	movs	r3, #1
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 855a 	beq.w	800913c <_dtoa_r+0xb84>
 8008688:	4882      	ldr	r0, [pc, #520]	; (8008894 <_dtoa_r+0x2dc>)
 800868a:	6018      	str	r0, [r3, #0]
 800868c:	1e43      	subs	r3, r0, #1
 800868e:	9308      	str	r3, [sp, #32]
 8008690:	e7df      	b.n	8008652 <_dtoa_r+0x9a>
 8008692:	ab16      	add	r3, sp, #88	; 0x58
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	ab17      	add	r3, sp, #92	; 0x5c
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	4628      	mov	r0, r5
 800869c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086a0:	f001 fcee 	bl	800a080 <__d2b>
 80086a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086a8:	4682      	mov	sl, r0
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	d07e      	beq.n	80087ac <_dtoa_r+0x1f4>
 80086ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80086b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086bc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80086c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80086c4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80086c8:	4b73      	ldr	r3, [pc, #460]	; (8008898 <_dtoa_r+0x2e0>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	f7f7 fdb4 	bl	8000238 <__aeabi_dsub>
 80086d0:	a365      	add	r3, pc, #404	; (adr r3, 8008868 <_dtoa_r+0x2b0>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 ff67 	bl	80005a8 <__aeabi_dmul>
 80086da:	a365      	add	r3, pc, #404	; (adr r3, 8008870 <_dtoa_r+0x2b8>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 fdac 	bl	800023c <__adddf3>
 80086e4:	4606      	mov	r6, r0
 80086e6:	4620      	mov	r0, r4
 80086e8:	460f      	mov	r7, r1
 80086ea:	f7f7 fef3 	bl	80004d4 <__aeabi_i2d>
 80086ee:	a362      	add	r3, pc, #392	; (adr r3, 8008878 <_dtoa_r+0x2c0>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 ff58 	bl	80005a8 <__aeabi_dmul>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f7 fd9c 	bl	800023c <__adddf3>
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	f7f8 f9fe 	bl	8000b08 <__aeabi_d2iz>
 800870c:	2200      	movs	r2, #0
 800870e:	4681      	mov	r9, r0
 8008710:	2300      	movs	r3, #0
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f8 f9b9 	bl	8000a8c <__aeabi_dcmplt>
 800871a:	b148      	cbz	r0, 8008730 <_dtoa_r+0x178>
 800871c:	4648      	mov	r0, r9
 800871e:	f7f7 fed9 	bl	80004d4 <__aeabi_i2d>
 8008722:	4632      	mov	r2, r6
 8008724:	463b      	mov	r3, r7
 8008726:	f7f8 f9a7 	bl	8000a78 <__aeabi_dcmpeq>
 800872a:	b908      	cbnz	r0, 8008730 <_dtoa_r+0x178>
 800872c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008730:	f1b9 0f16 	cmp.w	r9, #22
 8008734:	d857      	bhi.n	80087e6 <_dtoa_r+0x22e>
 8008736:	4b59      	ldr	r3, [pc, #356]	; (800889c <_dtoa_r+0x2e4>)
 8008738:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008744:	f7f8 f9a2 	bl	8000a8c <__aeabi_dcmplt>
 8008748:	2800      	cmp	r0, #0
 800874a:	d04e      	beq.n	80087ea <_dtoa_r+0x232>
 800874c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008750:	2300      	movs	r3, #0
 8008752:	930f      	str	r3, [sp, #60]	; 0x3c
 8008754:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008756:	1b1c      	subs	r4, r3, r4
 8008758:	1e63      	subs	r3, r4, #1
 800875a:	9309      	str	r3, [sp, #36]	; 0x24
 800875c:	bf45      	ittet	mi
 800875e:	f1c4 0301 	rsbmi	r3, r4, #1
 8008762:	9306      	strmi	r3, [sp, #24]
 8008764:	2300      	movpl	r3, #0
 8008766:	2300      	movmi	r3, #0
 8008768:	bf4c      	ite	mi
 800876a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800876c:	9306      	strpl	r3, [sp, #24]
 800876e:	f1b9 0f00 	cmp.w	r9, #0
 8008772:	db3c      	blt.n	80087ee <_dtoa_r+0x236>
 8008774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008776:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800877a:	444b      	add	r3, r9
 800877c:	9309      	str	r3, [sp, #36]	; 0x24
 800877e:	2300      	movs	r3, #0
 8008780:	930a      	str	r3, [sp, #40]	; 0x28
 8008782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008784:	2b09      	cmp	r3, #9
 8008786:	f200 808d 	bhi.w	80088a4 <_dtoa_r+0x2ec>
 800878a:	2b05      	cmp	r3, #5
 800878c:	bfc4      	itt	gt
 800878e:	3b04      	subgt	r3, #4
 8008790:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008792:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008794:	f1a3 0302 	sub.w	r3, r3, #2
 8008798:	bfcc      	ite	gt
 800879a:	2400      	movgt	r4, #0
 800879c:	2401      	movle	r4, #1
 800879e:	2b03      	cmp	r3, #3
 80087a0:	f200 808c 	bhi.w	80088bc <_dtoa_r+0x304>
 80087a4:	e8df f003 	tbb	[pc, r3]
 80087a8:	5b4d4f2d 	.word	0x5b4d4f2d
 80087ac:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80087b0:	441c      	add	r4, r3
 80087b2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	bfc3      	ittte	gt
 80087ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087be:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80087c2:	fa09 f303 	lslgt.w	r3, r9, r3
 80087c6:	f1c3 0320 	rsble	r3, r3, #32
 80087ca:	bfc6      	itte	gt
 80087cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087d0:	4318      	orrgt	r0, r3
 80087d2:	fa06 f003 	lslle.w	r0, r6, r3
 80087d6:	f7f7 fe6d 	bl	80004b4 <__aeabi_ui2d>
 80087da:	2301      	movs	r3, #1
 80087dc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80087e0:	3c01      	subs	r4, #1
 80087e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80087e4:	e770      	b.n	80086c8 <_dtoa_r+0x110>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e7b3      	b.n	8008752 <_dtoa_r+0x19a>
 80087ea:	900f      	str	r0, [sp, #60]	; 0x3c
 80087ec:	e7b2      	b.n	8008754 <_dtoa_r+0x19c>
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	eba3 0309 	sub.w	r3, r3, r9
 80087f4:	9306      	str	r3, [sp, #24]
 80087f6:	f1c9 0300 	rsb	r3, r9, #0
 80087fa:	930a      	str	r3, [sp, #40]	; 0x28
 80087fc:	2300      	movs	r3, #0
 80087fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008800:	e7bf      	b.n	8008782 <_dtoa_r+0x1ca>
 8008802:	2300      	movs	r3, #0
 8008804:	930b      	str	r3, [sp, #44]	; 0x2c
 8008806:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008808:	2b00      	cmp	r3, #0
 800880a:	dc5a      	bgt.n	80088c2 <_dtoa_r+0x30a>
 800880c:	f04f 0b01 	mov.w	fp, #1
 8008810:	f8cd b008 	str.w	fp, [sp, #8]
 8008814:	465b      	mov	r3, fp
 8008816:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800881a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800881c:	2200      	movs	r2, #0
 800881e:	6042      	str	r2, [r0, #4]
 8008820:	2204      	movs	r2, #4
 8008822:	f102 0614 	add.w	r6, r2, #20
 8008826:	429e      	cmp	r6, r3
 8008828:	6841      	ldr	r1, [r0, #4]
 800882a:	d950      	bls.n	80088ce <_dtoa_r+0x316>
 800882c:	4628      	mov	r0, r5
 800882e:	f001 f841 	bl	80098b4 <_Balloc>
 8008832:	9008      	str	r0, [sp, #32]
 8008834:	2800      	cmp	r0, #0
 8008836:	d14e      	bne.n	80088d6 <_dtoa_r+0x31e>
 8008838:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <_dtoa_r+0x2e8>)
 800883a:	4602      	mov	r2, r0
 800883c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008840:	e6ce      	b.n	80085e0 <_dtoa_r+0x28>
 8008842:	2301      	movs	r3, #1
 8008844:	e7de      	b.n	8008804 <_dtoa_r+0x24c>
 8008846:	2300      	movs	r3, #0
 8008848:	930b      	str	r3, [sp, #44]	; 0x2c
 800884a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800884c:	eb09 0b03 	add.w	fp, r9, r3
 8008850:	f10b 0301 	add.w	r3, fp, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	9302      	str	r3, [sp, #8]
 8008858:	bfb8      	it	lt
 800885a:	2301      	movlt	r3, #1
 800885c:	e7dd      	b.n	800881a <_dtoa_r+0x262>
 800885e:	2301      	movs	r3, #1
 8008860:	e7f2      	b.n	8008848 <_dtoa_r+0x290>
 8008862:	bf00      	nop
 8008864:	f3af 8000 	nop.w
 8008868:	636f4361 	.word	0x636f4361
 800886c:	3fd287a7 	.word	0x3fd287a7
 8008870:	8b60c8b3 	.word	0x8b60c8b3
 8008874:	3fc68a28 	.word	0x3fc68a28
 8008878:	509f79fb 	.word	0x509f79fb
 800887c:	3fd34413 	.word	0x3fd34413
 8008880:	0800b56e 	.word	0x0800b56e
 8008884:	0800b585 	.word	0x0800b585
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	0800b56a 	.word	0x0800b56a
 8008890:	0800b561 	.word	0x0800b561
 8008894:	0800b3e1 	.word	0x0800b3e1
 8008898:	3ff80000 	.word	0x3ff80000
 800889c:	0800b700 	.word	0x0800b700
 80088a0:	0800b5e4 	.word	0x0800b5e4
 80088a4:	2401      	movs	r4, #1
 80088a6:	2300      	movs	r3, #0
 80088a8:	9322      	str	r3, [sp, #136]	; 0x88
 80088aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80088ac:	f04f 3bff 	mov.w	fp, #4294967295
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8cd b008 	str.w	fp, [sp, #8]
 80088b6:	2312      	movs	r3, #18
 80088b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80088ba:	e7ae      	b.n	800881a <_dtoa_r+0x262>
 80088bc:	2301      	movs	r3, #1
 80088be:	930b      	str	r3, [sp, #44]	; 0x2c
 80088c0:	e7f4      	b.n	80088ac <_dtoa_r+0x2f4>
 80088c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80088c6:	f8cd b008 	str.w	fp, [sp, #8]
 80088ca:	465b      	mov	r3, fp
 80088cc:	e7a5      	b.n	800881a <_dtoa_r+0x262>
 80088ce:	3101      	adds	r1, #1
 80088d0:	6041      	str	r1, [r0, #4]
 80088d2:	0052      	lsls	r2, r2, #1
 80088d4:	e7a5      	b.n	8008822 <_dtoa_r+0x26a>
 80088d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088d8:	9a08      	ldr	r2, [sp, #32]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	9b02      	ldr	r3, [sp, #8]
 80088de:	2b0e      	cmp	r3, #14
 80088e0:	f200 80a8 	bhi.w	8008a34 <_dtoa_r+0x47c>
 80088e4:	2c00      	cmp	r4, #0
 80088e6:	f000 80a5 	beq.w	8008a34 <_dtoa_r+0x47c>
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	dd34      	ble.n	800895a <_dtoa_r+0x3a2>
 80088f0:	4a9a      	ldr	r2, [pc, #616]	; (8008b5c <_dtoa_r+0x5a4>)
 80088f2:	f009 030f 	and.w	r3, r9, #15
 80088f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088fe:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008902:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008906:	ea4f 1429 	mov.w	r4, r9, asr #4
 800890a:	d016      	beq.n	800893a <_dtoa_r+0x382>
 800890c:	4b94      	ldr	r3, [pc, #592]	; (8008b60 <_dtoa_r+0x5a8>)
 800890e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008912:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008916:	f7f7 ff71 	bl	80007fc <__aeabi_ddiv>
 800891a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800891e:	f004 040f 	and.w	r4, r4, #15
 8008922:	2703      	movs	r7, #3
 8008924:	4e8e      	ldr	r6, [pc, #568]	; (8008b60 <_dtoa_r+0x5a8>)
 8008926:	b954      	cbnz	r4, 800893e <_dtoa_r+0x386>
 8008928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800892c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008930:	f7f7 ff64 	bl	80007fc <__aeabi_ddiv>
 8008934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008938:	e029      	b.n	800898e <_dtoa_r+0x3d6>
 800893a:	2702      	movs	r7, #2
 800893c:	e7f2      	b.n	8008924 <_dtoa_r+0x36c>
 800893e:	07e1      	lsls	r1, r4, #31
 8008940:	d508      	bpl.n	8008954 <_dtoa_r+0x39c>
 8008942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008946:	e9d6 2300 	ldrd	r2, r3, [r6]
 800894a:	f7f7 fe2d 	bl	80005a8 <__aeabi_dmul>
 800894e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008952:	3701      	adds	r7, #1
 8008954:	1064      	asrs	r4, r4, #1
 8008956:	3608      	adds	r6, #8
 8008958:	e7e5      	b.n	8008926 <_dtoa_r+0x36e>
 800895a:	f000 80a5 	beq.w	8008aa8 <_dtoa_r+0x4f0>
 800895e:	f1c9 0400 	rsb	r4, r9, #0
 8008962:	4b7e      	ldr	r3, [pc, #504]	; (8008b5c <_dtoa_r+0x5a4>)
 8008964:	4e7e      	ldr	r6, [pc, #504]	; (8008b60 <_dtoa_r+0x5a8>)
 8008966:	f004 020f 	and.w	r2, r4, #15
 800896a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008976:	f7f7 fe17 	bl	80005a8 <__aeabi_dmul>
 800897a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800897e:	1124      	asrs	r4, r4, #4
 8008980:	2300      	movs	r3, #0
 8008982:	2702      	movs	r7, #2
 8008984:	2c00      	cmp	r4, #0
 8008986:	f040 8084 	bne.w	8008a92 <_dtoa_r+0x4da>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d2      	bne.n	8008934 <_dtoa_r+0x37c>
 800898e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 808b 	beq.w	8008aac <_dtoa_r+0x4f4>
 8008996:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800899a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800899e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089a2:	4b70      	ldr	r3, [pc, #448]	; (8008b64 <_dtoa_r+0x5ac>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	f7f8 f871 	bl	8000a8c <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d07e      	beq.n	8008aac <_dtoa_r+0x4f4>
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d07b      	beq.n	8008aac <_dtoa_r+0x4f4>
 80089b4:	f1bb 0f00 	cmp.w	fp, #0
 80089b8:	dd38      	ble.n	8008a2c <_dtoa_r+0x474>
 80089ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089be:	4b6a      	ldr	r3, [pc, #424]	; (8008b68 <_dtoa_r+0x5b0>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	f7f7 fdf1 	bl	80005a8 <__aeabi_dmul>
 80089c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089ca:	f109 38ff 	add.w	r8, r9, #4294967295
 80089ce:	3701      	adds	r7, #1
 80089d0:	465c      	mov	r4, fp
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7f7 fd7e 	bl	80004d4 <__aeabi_i2d>
 80089d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089dc:	f7f7 fde4 	bl	80005a8 <__aeabi_dmul>
 80089e0:	4b62      	ldr	r3, [pc, #392]	; (8008b6c <_dtoa_r+0x5b4>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	f7f7 fc2a 	bl	800023c <__adddf3>
 80089e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80089ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089f0:	9611      	str	r6, [sp, #68]	; 0x44
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	d15d      	bne.n	8008ab2 <_dtoa_r+0x4fa>
 80089f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089fa:	4b5d      	ldr	r3, [pc, #372]	; (8008b70 <_dtoa_r+0x5b8>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	f7f7 fc1b 	bl	8000238 <__aeabi_dsub>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a0c:	4633      	mov	r3, r6
 8008a0e:	f7f8 f85b 	bl	8000ac8 <__aeabi_dcmpgt>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f040 829e 	bne.w	8008f54 <_dtoa_r+0x99c>
 8008a18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008a22:	f7f8 f833 	bl	8000a8c <__aeabi_dcmplt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f040 8292 	bne.w	8008f50 <_dtoa_r+0x998>
 8008a2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008a30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f2c0 8153 	blt.w	8008ce2 <_dtoa_r+0x72a>
 8008a3c:	f1b9 0f0e 	cmp.w	r9, #14
 8008a40:	f300 814f 	bgt.w	8008ce2 <_dtoa_r+0x72a>
 8008a44:	4b45      	ldr	r3, [pc, #276]	; (8008b5c <_dtoa_r+0x5a4>)
 8008a46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008a4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f280 80db 	bge.w	8008c10 <_dtoa_r+0x658>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f300 80d7 	bgt.w	8008c10 <_dtoa_r+0x658>
 8008a62:	f040 8274 	bne.w	8008f4e <_dtoa_r+0x996>
 8008a66:	4b42      	ldr	r3, [pc, #264]	; (8008b70 <_dtoa_r+0x5b8>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a6e:	f7f7 fd9b 	bl	80005a8 <__aeabi_dmul>
 8008a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a76:	f7f8 f81d 	bl	8000ab4 <__aeabi_dcmpge>
 8008a7a:	9c02      	ldr	r4, [sp, #8]
 8008a7c:	4626      	mov	r6, r4
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f040 824a 	bne.w	8008f18 <_dtoa_r+0x960>
 8008a84:	9f08      	ldr	r7, [sp, #32]
 8008a86:	2331      	movs	r3, #49	; 0x31
 8008a88:	f807 3b01 	strb.w	r3, [r7], #1
 8008a8c:	f109 0901 	add.w	r9, r9, #1
 8008a90:	e246      	b.n	8008f20 <_dtoa_r+0x968>
 8008a92:	07e2      	lsls	r2, r4, #31
 8008a94:	d505      	bpl.n	8008aa2 <_dtoa_r+0x4ea>
 8008a96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a9a:	f7f7 fd85 	bl	80005a8 <__aeabi_dmul>
 8008a9e:	3701      	adds	r7, #1
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	1064      	asrs	r4, r4, #1
 8008aa4:	3608      	adds	r6, #8
 8008aa6:	e76d      	b.n	8008984 <_dtoa_r+0x3cc>
 8008aa8:	2702      	movs	r7, #2
 8008aaa:	e770      	b.n	800898e <_dtoa_r+0x3d6>
 8008aac:	9c02      	ldr	r4, [sp, #8]
 8008aae:	46c8      	mov	r8, r9
 8008ab0:	e78f      	b.n	80089d2 <_dtoa_r+0x41a>
 8008ab2:	9908      	ldr	r1, [sp, #32]
 8008ab4:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <_dtoa_r+0x5a4>)
 8008ab6:	4421      	add	r1, r4
 8008ab8:	9112      	str	r1, [sp, #72]	; 0x48
 8008aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ac0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008ac4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	d055      	beq.n	8008b78 <_dtoa_r+0x5c0>
 8008acc:	4929      	ldr	r1, [pc, #164]	; (8008b74 <_dtoa_r+0x5bc>)
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f7f7 fe94 	bl	80007fc <__aeabi_ddiv>
 8008ad4:	463b      	mov	r3, r7
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	f7f7 fbae 	bl	8000238 <__aeabi_dsub>
 8008adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ae0:	9f08      	ldr	r7, [sp, #32]
 8008ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae6:	f7f8 f80f 	bl	8000b08 <__aeabi_d2iz>
 8008aea:	4604      	mov	r4, r0
 8008aec:	f7f7 fcf2 	bl	80004d4 <__aeabi_i2d>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af8:	f7f7 fb9e 	bl	8000238 <__aeabi_dsub>
 8008afc:	3430      	adds	r4, #48	; 0x30
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b06:	f807 4b01 	strb.w	r4, [r7], #1
 8008b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b0e:	f7f7 ffbd 	bl	8000a8c <__aeabi_dcmplt>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d174      	bne.n	8008c00 <_dtoa_r+0x648>
 8008b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b1a:	4912      	ldr	r1, [pc, #72]	; (8008b64 <_dtoa_r+0x5ac>)
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7f7 fb8b 	bl	8000238 <__aeabi_dsub>
 8008b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b26:	f7f7 ffb1 	bl	8000a8c <__aeabi_dcmplt>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f040 80b6 	bne.w	8008c9c <_dtoa_r+0x6e4>
 8008b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b32:	429f      	cmp	r7, r3
 8008b34:	f43f af7a 	beq.w	8008a2c <_dtoa_r+0x474>
 8008b38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <_dtoa_r+0x5b0>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f7f7 fd32 	bl	80005a8 <__aeabi_dmul>
 8008b44:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <_dtoa_r+0x5b0>)
 8008b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b50:	f7f7 fd2a 	bl	80005a8 <__aeabi_dmul>
 8008b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b58:	e7c3      	b.n	8008ae2 <_dtoa_r+0x52a>
 8008b5a:	bf00      	nop
 8008b5c:	0800b700 	.word	0x0800b700
 8008b60:	0800b6d8 	.word	0x0800b6d8
 8008b64:	3ff00000 	.word	0x3ff00000
 8008b68:	40240000 	.word	0x40240000
 8008b6c:	401c0000 	.word	0x401c0000
 8008b70:	40140000 	.word	0x40140000
 8008b74:	3fe00000 	.word	0x3fe00000
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fd14 	bl	80005a8 <__aeabi_dmul>
 8008b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b86:	9c08      	ldr	r4, [sp, #32]
 8008b88:	9314      	str	r3, [sp, #80]	; 0x50
 8008b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b8e:	f7f7 ffbb 	bl	8000b08 <__aeabi_d2iz>
 8008b92:	9015      	str	r0, [sp, #84]	; 0x54
 8008b94:	f7f7 fc9e 	bl	80004d4 <__aeabi_i2d>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba0:	f7f7 fb4a 	bl	8000238 <__aeabi_dsub>
 8008ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ba6:	3330      	adds	r3, #48	; 0x30
 8008ba8:	f804 3b01 	strb.w	r3, [r4], #1
 8008bac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	460f      	mov	r7, r1
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	d124      	bne.n	8008c04 <_dtoa_r+0x64c>
 8008bba:	4bb2      	ldr	r3, [pc, #712]	; (8008e84 <_dtoa_r+0x8cc>)
 8008bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bc0:	f7f7 fb3c 	bl	800023c <__adddf3>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 ff7c 	bl	8000ac8 <__aeabi_dcmpgt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d162      	bne.n	8008c9a <_dtoa_r+0x6e2>
 8008bd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bd8:	49aa      	ldr	r1, [pc, #680]	; (8008e84 <_dtoa_r+0x8cc>)
 8008bda:	2000      	movs	r0, #0
 8008bdc:	f7f7 fb2c 	bl	8000238 <__aeabi_dsub>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 ff50 	bl	8000a8c <__aeabi_dcmplt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f43f af1d 	beq.w	8008a2c <_dtoa_r+0x474>
 8008bf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008bf4:	1e7b      	subs	r3, r7, #1
 8008bf6:	9314      	str	r3, [sp, #80]	; 0x50
 8008bf8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008bfc:	2b30      	cmp	r3, #48	; 0x30
 8008bfe:	d0f8      	beq.n	8008bf2 <_dtoa_r+0x63a>
 8008c00:	46c1      	mov	r9, r8
 8008c02:	e03a      	b.n	8008c7a <_dtoa_r+0x6c2>
 8008c04:	4ba0      	ldr	r3, [pc, #640]	; (8008e88 <_dtoa_r+0x8d0>)
 8008c06:	f7f7 fccf 	bl	80005a8 <__aeabi_dmul>
 8008c0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c0e:	e7bc      	b.n	8008b8a <_dtoa_r+0x5d2>
 8008c10:	9f08      	ldr	r7, [sp, #32]
 8008c12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c1a:	f7f7 fdef 	bl	80007fc <__aeabi_ddiv>
 8008c1e:	f7f7 ff73 	bl	8000b08 <__aeabi_d2iz>
 8008c22:	4604      	mov	r4, r0
 8008c24:	f7f7 fc56 	bl	80004d4 <__aeabi_i2d>
 8008c28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c2c:	f7f7 fcbc 	bl	80005a8 <__aeabi_dmul>
 8008c30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008c34:	460b      	mov	r3, r1
 8008c36:	4602      	mov	r2, r0
 8008c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c3c:	f7f7 fafc 	bl	8000238 <__aeabi_dsub>
 8008c40:	f807 6b01 	strb.w	r6, [r7], #1
 8008c44:	9e08      	ldr	r6, [sp, #32]
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	1bbe      	subs	r6, r7, r6
 8008c4a:	42b3      	cmp	r3, r6
 8008c4c:	d13a      	bne.n	8008cc4 <_dtoa_r+0x70c>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	f7f7 faf3 	bl	800023c <__adddf3>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c62:	f7f7 ff31 	bl	8000ac8 <__aeabi_dcmpgt>
 8008c66:	bb58      	cbnz	r0, 8008cc0 <_dtoa_r+0x708>
 8008c68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	f7f7 ff02 	bl	8000a78 <__aeabi_dcmpeq>
 8008c74:	b108      	cbz	r0, 8008c7a <_dtoa_r+0x6c2>
 8008c76:	07e1      	lsls	r1, r4, #31
 8008c78:	d422      	bmi.n	8008cc0 <_dtoa_r+0x708>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	f000 fe59 	bl	8009934 <_Bfree>
 8008c82:	2300      	movs	r3, #0
 8008c84:	703b      	strb	r3, [r7, #0]
 8008c86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c88:	f109 0001 	add.w	r0, r9, #1
 8008c8c:	6018      	str	r0, [r3, #0]
 8008c8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f43f acde 	beq.w	8008652 <_dtoa_r+0x9a>
 8008c96:	601f      	str	r7, [r3, #0]
 8008c98:	e4db      	b.n	8008652 <_dtoa_r+0x9a>
 8008c9a:	4627      	mov	r7, r4
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ca4:	2a39      	cmp	r2, #57	; 0x39
 8008ca6:	d107      	bne.n	8008cb8 <_dtoa_r+0x700>
 8008ca8:	9a08      	ldr	r2, [sp, #32]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d1f7      	bne.n	8008c9e <_dtoa_r+0x6e6>
 8008cae:	9908      	ldr	r1, [sp, #32]
 8008cb0:	2230      	movs	r2, #48	; 0x30
 8008cb2:	f108 0801 	add.w	r8, r8, #1
 8008cb6:	700a      	strb	r2, [r1, #0]
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	3201      	adds	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e79f      	b.n	8008c00 <_dtoa_r+0x648>
 8008cc0:	46c8      	mov	r8, r9
 8008cc2:	e7eb      	b.n	8008c9c <_dtoa_r+0x6e4>
 8008cc4:	4b70      	ldr	r3, [pc, #448]	; (8008e88 <_dtoa_r+0x8d0>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f7f7 fc6e 	bl	80005a8 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f7f7 fece 	bl	8000a78 <__aeabi_dcmpeq>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d098      	beq.n	8008c12 <_dtoa_r+0x65a>
 8008ce0:	e7cb      	b.n	8008c7a <_dtoa_r+0x6c2>
 8008ce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	f000 80d1 	beq.w	8008e8c <_dtoa_r+0x8d4>
 8008cea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008cec:	2a01      	cmp	r2, #1
 8008cee:	f300 80af 	bgt.w	8008e50 <_dtoa_r+0x898>
 8008cf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cf4:	2a00      	cmp	r2, #0
 8008cf6:	f000 80a7 	beq.w	8008e48 <_dtoa_r+0x890>
 8008cfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d00:	9f06      	ldr	r7, [sp, #24]
 8008d02:	9a06      	ldr	r2, [sp, #24]
 8008d04:	441a      	add	r2, r3
 8008d06:	9206      	str	r2, [sp, #24]
 8008d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	441a      	add	r2, r3
 8008d0e:	4628      	mov	r0, r5
 8008d10:	9209      	str	r2, [sp, #36]	; 0x24
 8008d12:	f000 ff13 	bl	8009b3c <__i2b>
 8008d16:	4606      	mov	r6, r0
 8008d18:	2f00      	cmp	r7, #0
 8008d1a:	dd0c      	ble.n	8008d36 <_dtoa_r+0x77e>
 8008d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd09      	ble.n	8008d36 <_dtoa_r+0x77e>
 8008d22:	42bb      	cmp	r3, r7
 8008d24:	9a06      	ldr	r2, [sp, #24]
 8008d26:	bfa8      	it	ge
 8008d28:	463b      	movge	r3, r7
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	9206      	str	r2, [sp, #24]
 8008d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d30:	1aff      	subs	r7, r7, r3
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	9309      	str	r3, [sp, #36]	; 0x24
 8008d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d38:	b1f3      	cbz	r3, 8008d78 <_dtoa_r+0x7c0>
 8008d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80a9 	beq.w	8008e94 <_dtoa_r+0x8dc>
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	dd10      	ble.n	8008d68 <_dtoa_r+0x7b0>
 8008d46:	4631      	mov	r1, r6
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 ffb2 	bl	8009cb4 <__pow5mult>
 8008d50:	4652      	mov	r2, sl
 8008d52:	4601      	mov	r1, r0
 8008d54:	4606      	mov	r6, r0
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 ff06 	bl	8009b68 <__multiply>
 8008d5c:	4651      	mov	r1, sl
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4628      	mov	r0, r5
 8008d62:	f000 fde7 	bl	8009934 <_Bfree>
 8008d66:	46c2      	mov	sl, r8
 8008d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6a:	1b1a      	subs	r2, r3, r4
 8008d6c:	d004      	beq.n	8008d78 <_dtoa_r+0x7c0>
 8008d6e:	4651      	mov	r1, sl
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 ff9f 	bl	8009cb4 <__pow5mult>
 8008d76:	4682      	mov	sl, r0
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 fede 	bl	8009b3c <__i2b>
 8008d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	4604      	mov	r4, r0
 8008d86:	f340 8087 	ble.w	8008e98 <_dtoa_r+0x8e0>
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 ff90 	bl	8009cb4 <__pow5mult>
 8008d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	4604      	mov	r4, r0
 8008d9a:	f340 8080 	ble.w	8008e9e <_dtoa_r+0x8e6>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008da8:	6918      	ldr	r0, [r3, #16]
 8008daa:	f000 fe79 	bl	8009aa0 <__hi0bits>
 8008dae:	f1c0 0020 	rsb	r0, r0, #32
 8008db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db4:	4418      	add	r0, r3
 8008db6:	f010 001f 	ands.w	r0, r0, #31
 8008dba:	f000 8092 	beq.w	8008ee2 <_dtoa_r+0x92a>
 8008dbe:	f1c0 0320 	rsb	r3, r0, #32
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	f340 808a 	ble.w	8008edc <_dtoa_r+0x924>
 8008dc8:	f1c0 001c 	rsb	r0, r0, #28
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	4403      	add	r3, r0
 8008dd0:	9306      	str	r3, [sp, #24]
 8008dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd4:	4403      	add	r3, r0
 8008dd6:	4407      	add	r7, r0
 8008dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dd05      	ble.n	8008dec <_dtoa_r+0x834>
 8008de0:	4651      	mov	r1, sl
 8008de2:	461a      	mov	r2, r3
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 ffbf 	bl	8009d68 <__lshift>
 8008dea:	4682      	mov	sl, r0
 8008dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	dd05      	ble.n	8008dfe <_dtoa_r+0x846>
 8008df2:	4621      	mov	r1, r4
 8008df4:	461a      	mov	r2, r3
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 ffb6 	bl	8009d68 <__lshift>
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d070      	beq.n	8008ee6 <_dtoa_r+0x92e>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4650      	mov	r0, sl
 8008e08:	f001 f81a 	bl	8009e40 <__mcmp>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	da6a      	bge.n	8008ee6 <_dtoa_r+0x92e>
 8008e10:	2300      	movs	r3, #0
 8008e12:	4651      	mov	r1, sl
 8008e14:	220a      	movs	r2, #10
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 fdae 	bl	8009978 <__multadd>
 8008e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e22:	4682      	mov	sl, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8193 	beq.w	8009150 <_dtoa_r+0xb98>
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	220a      	movs	r2, #10
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 fda1 	bl	8009978 <__multadd>
 8008e36:	f1bb 0f00 	cmp.w	fp, #0
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	f300 8093 	bgt.w	8008f66 <_dtoa_r+0x9ae>
 8008e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	dc57      	bgt.n	8008ef6 <_dtoa_r+0x93e>
 8008e46:	e08e      	b.n	8008f66 <_dtoa_r+0x9ae>
 8008e48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e4e:	e756      	b.n	8008cfe <_dtoa_r+0x746>
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	1e5c      	subs	r4, r3, #1
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	bfbf      	itttt	lt
 8008e5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008e5c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008e5e:	1ae2      	sublt	r2, r4, r3
 8008e60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008e62:	bfb6      	itet	lt
 8008e64:	189b      	addlt	r3, r3, r2
 8008e66:	1b1c      	subge	r4, r3, r4
 8008e68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	bfb8      	it	lt
 8008e6e:	2400      	movlt	r4, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bfb9      	ittee	lt
 8008e74:	9b06      	ldrlt	r3, [sp, #24]
 8008e76:	9a02      	ldrlt	r2, [sp, #8]
 8008e78:	9f06      	ldrge	r7, [sp, #24]
 8008e7a:	9b02      	ldrge	r3, [sp, #8]
 8008e7c:	bfbc      	itt	lt
 8008e7e:	1a9f      	sublt	r7, r3, r2
 8008e80:	2300      	movlt	r3, #0
 8008e82:	e73e      	b.n	8008d02 <_dtoa_r+0x74a>
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	40240000 	.word	0x40240000
 8008e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e8e:	9f06      	ldr	r7, [sp, #24]
 8008e90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008e92:	e741      	b.n	8008d18 <_dtoa_r+0x760>
 8008e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e96:	e76a      	b.n	8008d6e <_dtoa_r+0x7b6>
 8008e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	dc19      	bgt.n	8008ed2 <_dtoa_r+0x91a>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	b9bb      	cbnz	r3, 8008ed2 <_dtoa_r+0x91a>
 8008ea2:	9b05      	ldr	r3, [sp, #20]
 8008ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea8:	b99b      	cbnz	r3, 8008ed2 <_dtoa_r+0x91a>
 8008eaa:	9b05      	ldr	r3, [sp, #20]
 8008eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eb0:	0d1b      	lsrs	r3, r3, #20
 8008eb2:	051b      	lsls	r3, r3, #20
 8008eb4:	b183      	cbz	r3, 8008ed8 <_dtoa_r+0x920>
 8008eb6:	9b06      	ldr	r3, [sp, #24]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	9306      	str	r3, [sp, #24]
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec2:	f04f 0801 	mov.w	r8, #1
 8008ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f47f af6a 	bne.w	8008da2 <_dtoa_r+0x7ea>
 8008ece:	2001      	movs	r0, #1
 8008ed0:	e76f      	b.n	8008db2 <_dtoa_r+0x7fa>
 8008ed2:	f04f 0800 	mov.w	r8, #0
 8008ed6:	e7f6      	b.n	8008ec6 <_dtoa_r+0x90e>
 8008ed8:	4698      	mov	r8, r3
 8008eda:	e7f4      	b.n	8008ec6 <_dtoa_r+0x90e>
 8008edc:	f43f af7d 	beq.w	8008dda <_dtoa_r+0x822>
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	301c      	adds	r0, #28
 8008ee4:	e772      	b.n	8008dcc <_dtoa_r+0x814>
 8008ee6:	9b02      	ldr	r3, [sp, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	dc36      	bgt.n	8008f5a <_dtoa_r+0x9a2>
 8008eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	dd33      	ble.n	8008f5a <_dtoa_r+0x9a2>
 8008ef2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008ef6:	f1bb 0f00 	cmp.w	fp, #0
 8008efa:	d10d      	bne.n	8008f18 <_dtoa_r+0x960>
 8008efc:	4621      	mov	r1, r4
 8008efe:	465b      	mov	r3, fp
 8008f00:	2205      	movs	r2, #5
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 fd38 	bl	8009978 <__multadd>
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	f000 ff97 	bl	8009e40 <__mcmp>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f73f adb6 	bgt.w	8008a84 <_dtoa_r+0x4cc>
 8008f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f1a:	9f08      	ldr	r7, [sp, #32]
 8008f1c:	ea6f 0903 	mvn.w	r9, r3
 8008f20:	f04f 0800 	mov.w	r8, #0
 8008f24:	4621      	mov	r1, r4
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 fd04 	bl	8009934 <_Bfree>
 8008f2c:	2e00      	cmp	r6, #0
 8008f2e:	f43f aea4 	beq.w	8008c7a <_dtoa_r+0x6c2>
 8008f32:	f1b8 0f00 	cmp.w	r8, #0
 8008f36:	d005      	beq.n	8008f44 <_dtoa_r+0x98c>
 8008f38:	45b0      	cmp	r8, r6
 8008f3a:	d003      	beq.n	8008f44 <_dtoa_r+0x98c>
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f000 fcf8 	bl	8009934 <_Bfree>
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 fcf4 	bl	8009934 <_Bfree>
 8008f4c:	e695      	b.n	8008c7a <_dtoa_r+0x6c2>
 8008f4e:	2400      	movs	r4, #0
 8008f50:	4626      	mov	r6, r4
 8008f52:	e7e1      	b.n	8008f18 <_dtoa_r+0x960>
 8008f54:	46c1      	mov	r9, r8
 8008f56:	4626      	mov	r6, r4
 8008f58:	e594      	b.n	8008a84 <_dtoa_r+0x4cc>
 8008f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 80fc 	beq.w	800915e <_dtoa_r+0xba6>
 8008f66:	2f00      	cmp	r7, #0
 8008f68:	dd05      	ble.n	8008f76 <_dtoa_r+0x9be>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	463a      	mov	r2, r7
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 fefa 	bl	8009d68 <__lshift>
 8008f74:	4606      	mov	r6, r0
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	d05c      	beq.n	8009036 <_dtoa_r+0xa7e>
 8008f7c:	6871      	ldr	r1, [r6, #4]
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f000 fc98 	bl	80098b4 <_Balloc>
 8008f84:	4607      	mov	r7, r0
 8008f86:	b928      	cbnz	r0, 8008f94 <_dtoa_r+0x9dc>
 8008f88:	4b7f      	ldr	r3, [pc, #508]	; (8009188 <_dtoa_r+0xbd0>)
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f90:	f7ff bb26 	b.w	80085e0 <_dtoa_r+0x28>
 8008f94:	6932      	ldr	r2, [r6, #16]
 8008f96:	3202      	adds	r2, #2
 8008f98:	0092      	lsls	r2, r2, #2
 8008f9a:	f106 010c 	add.w	r1, r6, #12
 8008f9e:	300c      	adds	r0, #12
 8008fa0:	f000 fc7a 	bl	8009898 <memcpy>
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 fedd 	bl	8009d68 <__lshift>
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	9b08      	ldr	r3, [sp, #32]
 8008fb6:	445b      	add	r3, fp
 8008fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	46b0      	mov	r8, r6
 8008fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	9b02      	ldr	r3, [sp, #8]
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f103 3bff 	add.w	fp, r3, #4294967295
 8008fd0:	f7ff fa64 	bl	800849c <quorem>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	3330      	adds	r3, #48	; 0x30
 8008fd8:	9004      	str	r0, [sp, #16]
 8008fda:	4641      	mov	r1, r8
 8008fdc:	4650      	mov	r0, sl
 8008fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe0:	f000 ff2e 	bl	8009e40 <__mcmp>
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	9006      	str	r0, [sp, #24]
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4628      	mov	r0, r5
 8008fec:	f000 ff44 	bl	8009e78 <__mdiff>
 8008ff0:	68c2      	ldr	r2, [r0, #12]
 8008ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	bb02      	cbnz	r2, 800903a <_dtoa_r+0xa82>
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	f000 ff20 	bl	8009e40 <__mcmp>
 8009000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009002:	4602      	mov	r2, r0
 8009004:	4639      	mov	r1, r7
 8009006:	4628      	mov	r0, r5
 8009008:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800900c:	f000 fc92 	bl	8009934 <_Bfree>
 8009010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009014:	9f02      	ldr	r7, [sp, #8]
 8009016:	ea43 0102 	orr.w	r1, r3, r2
 800901a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901c:	430b      	orrs	r3, r1
 800901e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009020:	d10d      	bne.n	800903e <_dtoa_r+0xa86>
 8009022:	2b39      	cmp	r3, #57	; 0x39
 8009024:	d027      	beq.n	8009076 <_dtoa_r+0xabe>
 8009026:	9a06      	ldr	r2, [sp, #24]
 8009028:	2a00      	cmp	r2, #0
 800902a:	dd01      	ble.n	8009030 <_dtoa_r+0xa78>
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	3331      	adds	r3, #49	; 0x31
 8009030:	f88b 3000 	strb.w	r3, [fp]
 8009034:	e776      	b.n	8008f24 <_dtoa_r+0x96c>
 8009036:	4630      	mov	r0, r6
 8009038:	e7b9      	b.n	8008fae <_dtoa_r+0x9f6>
 800903a:	2201      	movs	r2, #1
 800903c:	e7e2      	b.n	8009004 <_dtoa_r+0xa4c>
 800903e:	9906      	ldr	r1, [sp, #24]
 8009040:	2900      	cmp	r1, #0
 8009042:	db04      	blt.n	800904e <_dtoa_r+0xa96>
 8009044:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009046:	4301      	orrs	r1, r0
 8009048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800904a:	4301      	orrs	r1, r0
 800904c:	d120      	bne.n	8009090 <_dtoa_r+0xad8>
 800904e:	2a00      	cmp	r2, #0
 8009050:	ddee      	ble.n	8009030 <_dtoa_r+0xa78>
 8009052:	4651      	mov	r1, sl
 8009054:	2201      	movs	r2, #1
 8009056:	4628      	mov	r0, r5
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	f000 fe85 	bl	8009d68 <__lshift>
 800905e:	4621      	mov	r1, r4
 8009060:	4682      	mov	sl, r0
 8009062:	f000 feed 	bl	8009e40 <__mcmp>
 8009066:	2800      	cmp	r0, #0
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	dc02      	bgt.n	8009072 <_dtoa_r+0xaba>
 800906c:	d1e0      	bne.n	8009030 <_dtoa_r+0xa78>
 800906e:	07da      	lsls	r2, r3, #31
 8009070:	d5de      	bpl.n	8009030 <_dtoa_r+0xa78>
 8009072:	2b39      	cmp	r3, #57	; 0x39
 8009074:	d1da      	bne.n	800902c <_dtoa_r+0xa74>
 8009076:	2339      	movs	r3, #57	; 0x39
 8009078:	f88b 3000 	strb.w	r3, [fp]
 800907c:	463b      	mov	r3, r7
 800907e:	461f      	mov	r7, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009086:	2a39      	cmp	r2, #57	; 0x39
 8009088:	d050      	beq.n	800912c <_dtoa_r+0xb74>
 800908a:	3201      	adds	r2, #1
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e749      	b.n	8008f24 <_dtoa_r+0x96c>
 8009090:	2a00      	cmp	r2, #0
 8009092:	dd03      	ble.n	800909c <_dtoa_r+0xae4>
 8009094:	2b39      	cmp	r3, #57	; 0x39
 8009096:	d0ee      	beq.n	8009076 <_dtoa_r+0xabe>
 8009098:	3301      	adds	r3, #1
 800909a:	e7c9      	b.n	8009030 <_dtoa_r+0xa78>
 800909c:	9a02      	ldr	r2, [sp, #8]
 800909e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090a4:	428a      	cmp	r2, r1
 80090a6:	d02a      	beq.n	80090fe <_dtoa_r+0xb46>
 80090a8:	4651      	mov	r1, sl
 80090aa:	2300      	movs	r3, #0
 80090ac:	220a      	movs	r2, #10
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 fc62 	bl	8009978 <__multadd>
 80090b4:	45b0      	cmp	r8, r6
 80090b6:	4682      	mov	sl, r0
 80090b8:	f04f 0300 	mov.w	r3, #0
 80090bc:	f04f 020a 	mov.w	r2, #10
 80090c0:	4641      	mov	r1, r8
 80090c2:	4628      	mov	r0, r5
 80090c4:	d107      	bne.n	80090d6 <_dtoa_r+0xb1e>
 80090c6:	f000 fc57 	bl	8009978 <__multadd>
 80090ca:	4680      	mov	r8, r0
 80090cc:	4606      	mov	r6, r0
 80090ce:	9b02      	ldr	r3, [sp, #8]
 80090d0:	3301      	adds	r3, #1
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	e777      	b.n	8008fc6 <_dtoa_r+0xa0e>
 80090d6:	f000 fc4f 	bl	8009978 <__multadd>
 80090da:	4631      	mov	r1, r6
 80090dc:	4680      	mov	r8, r0
 80090de:	2300      	movs	r3, #0
 80090e0:	220a      	movs	r2, #10
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 fc48 	bl	8009978 <__multadd>
 80090e8:	4606      	mov	r6, r0
 80090ea:	e7f0      	b.n	80090ce <_dtoa_r+0xb16>
 80090ec:	f1bb 0f00 	cmp.w	fp, #0
 80090f0:	9a08      	ldr	r2, [sp, #32]
 80090f2:	bfcc      	ite	gt
 80090f4:	465f      	movgt	r7, fp
 80090f6:	2701      	movle	r7, #1
 80090f8:	4417      	add	r7, r2
 80090fa:	f04f 0800 	mov.w	r8, #0
 80090fe:	4651      	mov	r1, sl
 8009100:	2201      	movs	r2, #1
 8009102:	4628      	mov	r0, r5
 8009104:	9302      	str	r3, [sp, #8]
 8009106:	f000 fe2f 	bl	8009d68 <__lshift>
 800910a:	4621      	mov	r1, r4
 800910c:	4682      	mov	sl, r0
 800910e:	f000 fe97 	bl	8009e40 <__mcmp>
 8009112:	2800      	cmp	r0, #0
 8009114:	dcb2      	bgt.n	800907c <_dtoa_r+0xac4>
 8009116:	d102      	bne.n	800911e <_dtoa_r+0xb66>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	07db      	lsls	r3, r3, #31
 800911c:	d4ae      	bmi.n	800907c <_dtoa_r+0xac4>
 800911e:	463b      	mov	r3, r7
 8009120:	461f      	mov	r7, r3
 8009122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009126:	2a30      	cmp	r2, #48	; 0x30
 8009128:	d0fa      	beq.n	8009120 <_dtoa_r+0xb68>
 800912a:	e6fb      	b.n	8008f24 <_dtoa_r+0x96c>
 800912c:	9a08      	ldr	r2, [sp, #32]
 800912e:	429a      	cmp	r2, r3
 8009130:	d1a5      	bne.n	800907e <_dtoa_r+0xac6>
 8009132:	2331      	movs	r3, #49	; 0x31
 8009134:	f109 0901 	add.w	r9, r9, #1
 8009138:	7013      	strb	r3, [r2, #0]
 800913a:	e6f3      	b.n	8008f24 <_dtoa_r+0x96c>
 800913c:	4b13      	ldr	r3, [pc, #76]	; (800918c <_dtoa_r+0xbd4>)
 800913e:	f7ff baa6 	b.w	800868e <_dtoa_r+0xd6>
 8009142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009144:	2b00      	cmp	r3, #0
 8009146:	f47f aa7f 	bne.w	8008648 <_dtoa_r+0x90>
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <_dtoa_r+0xbd8>)
 800914c:	f7ff ba9f 	b.w	800868e <_dtoa_r+0xd6>
 8009150:	f1bb 0f00 	cmp.w	fp, #0
 8009154:	dc03      	bgt.n	800915e <_dtoa_r+0xba6>
 8009156:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009158:	2b02      	cmp	r3, #2
 800915a:	f73f aecc 	bgt.w	8008ef6 <_dtoa_r+0x93e>
 800915e:	9f08      	ldr	r7, [sp, #32]
 8009160:	4621      	mov	r1, r4
 8009162:	4650      	mov	r0, sl
 8009164:	f7ff f99a 	bl	800849c <quorem>
 8009168:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800916c:	f807 3b01 	strb.w	r3, [r7], #1
 8009170:	9a08      	ldr	r2, [sp, #32]
 8009172:	1aba      	subs	r2, r7, r2
 8009174:	4593      	cmp	fp, r2
 8009176:	ddb9      	ble.n	80090ec <_dtoa_r+0xb34>
 8009178:	4651      	mov	r1, sl
 800917a:	2300      	movs	r3, #0
 800917c:	220a      	movs	r2, #10
 800917e:	4628      	mov	r0, r5
 8009180:	f000 fbfa 	bl	8009978 <__multadd>
 8009184:	4682      	mov	sl, r0
 8009186:	e7eb      	b.n	8009160 <_dtoa_r+0xba8>
 8009188:	0800b5e4 	.word	0x0800b5e4
 800918c:	0800b3e0 	.word	0x0800b3e0
 8009190:	0800b561 	.word	0x0800b561

08009194 <rshift>:
 8009194:	6903      	ldr	r3, [r0, #16]
 8009196:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800919a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800919e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091a2:	f100 0414 	add.w	r4, r0, #20
 80091a6:	dd45      	ble.n	8009234 <rshift+0xa0>
 80091a8:	f011 011f 	ands.w	r1, r1, #31
 80091ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091b4:	d10c      	bne.n	80091d0 <rshift+0x3c>
 80091b6:	f100 0710 	add.w	r7, r0, #16
 80091ba:	4629      	mov	r1, r5
 80091bc:	42b1      	cmp	r1, r6
 80091be:	d334      	bcc.n	800922a <rshift+0x96>
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	1eea      	subs	r2, r5, #3
 80091c6:	4296      	cmp	r6, r2
 80091c8:	bf38      	it	cc
 80091ca:	2300      	movcc	r3, #0
 80091cc:	4423      	add	r3, r4
 80091ce:	e015      	b.n	80091fc <rshift+0x68>
 80091d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091d4:	f1c1 0820 	rsb	r8, r1, #32
 80091d8:	40cf      	lsrs	r7, r1
 80091da:	f105 0e04 	add.w	lr, r5, #4
 80091de:	46a1      	mov	r9, r4
 80091e0:	4576      	cmp	r6, lr
 80091e2:	46f4      	mov	ip, lr
 80091e4:	d815      	bhi.n	8009212 <rshift+0x7e>
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	009a      	lsls	r2, r3, #2
 80091ea:	3a04      	subs	r2, #4
 80091ec:	3501      	adds	r5, #1
 80091ee:	42ae      	cmp	r6, r5
 80091f0:	bf38      	it	cc
 80091f2:	2200      	movcc	r2, #0
 80091f4:	18a3      	adds	r3, r4, r2
 80091f6:	50a7      	str	r7, [r4, r2]
 80091f8:	b107      	cbz	r7, 80091fc <rshift+0x68>
 80091fa:	3304      	adds	r3, #4
 80091fc:	1b1a      	subs	r2, r3, r4
 80091fe:	42a3      	cmp	r3, r4
 8009200:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009204:	bf08      	it	eq
 8009206:	2300      	moveq	r3, #0
 8009208:	6102      	str	r2, [r0, #16]
 800920a:	bf08      	it	eq
 800920c:	6143      	streq	r3, [r0, #20]
 800920e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009212:	f8dc c000 	ldr.w	ip, [ip]
 8009216:	fa0c fc08 	lsl.w	ip, ip, r8
 800921a:	ea4c 0707 	orr.w	r7, ip, r7
 800921e:	f849 7b04 	str.w	r7, [r9], #4
 8009222:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009226:	40cf      	lsrs	r7, r1
 8009228:	e7da      	b.n	80091e0 <rshift+0x4c>
 800922a:	f851 cb04 	ldr.w	ip, [r1], #4
 800922e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009232:	e7c3      	b.n	80091bc <rshift+0x28>
 8009234:	4623      	mov	r3, r4
 8009236:	e7e1      	b.n	80091fc <rshift+0x68>

08009238 <__hexdig_fun>:
 8009238:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800923c:	2b09      	cmp	r3, #9
 800923e:	d802      	bhi.n	8009246 <__hexdig_fun+0xe>
 8009240:	3820      	subs	r0, #32
 8009242:	b2c0      	uxtb	r0, r0
 8009244:	4770      	bx	lr
 8009246:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800924a:	2b05      	cmp	r3, #5
 800924c:	d801      	bhi.n	8009252 <__hexdig_fun+0x1a>
 800924e:	3847      	subs	r0, #71	; 0x47
 8009250:	e7f7      	b.n	8009242 <__hexdig_fun+0xa>
 8009252:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009256:	2b05      	cmp	r3, #5
 8009258:	d801      	bhi.n	800925e <__hexdig_fun+0x26>
 800925a:	3827      	subs	r0, #39	; 0x27
 800925c:	e7f1      	b.n	8009242 <__hexdig_fun+0xa>
 800925e:	2000      	movs	r0, #0
 8009260:	4770      	bx	lr
	...

08009264 <__gethex>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	b08b      	sub	sp, #44	; 0x2c
 800926a:	468b      	mov	fp, r1
 800926c:	9306      	str	r3, [sp, #24]
 800926e:	4bb9      	ldr	r3, [pc, #740]	; (8009554 <__gethex+0x2f0>)
 8009270:	9002      	str	r0, [sp, #8]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	9303      	str	r3, [sp, #12]
 8009276:	4618      	mov	r0, r3
 8009278:	4690      	mov	r8, r2
 800927a:	f7f6 ff81 	bl	8000180 <strlen>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	f8db 2000 	ldr.w	r2, [fp]
 8009284:	4403      	add	r3, r0
 8009286:	4682      	mov	sl, r0
 8009288:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	1c93      	adds	r3, r2, #2
 8009290:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009294:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009298:	32fe      	adds	r2, #254	; 0xfe
 800929a:	18d1      	adds	r1, r2, r3
 800929c:	461f      	mov	r7, r3
 800929e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092a2:	9101      	str	r1, [sp, #4]
 80092a4:	2830      	cmp	r0, #48	; 0x30
 80092a6:	d0f8      	beq.n	800929a <__gethex+0x36>
 80092a8:	f7ff ffc6 	bl	8009238 <__hexdig_fun>
 80092ac:	4604      	mov	r4, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d13a      	bne.n	8009328 <__gethex+0xc4>
 80092b2:	9903      	ldr	r1, [sp, #12]
 80092b4:	4652      	mov	r2, sl
 80092b6:	4638      	mov	r0, r7
 80092b8:	f001 f9d8 	bl	800a66c <strncmp>
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d166      	bne.n	8009390 <__gethex+0x12c>
 80092c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80092c6:	eb07 060a 	add.w	r6, r7, sl
 80092ca:	f7ff ffb5 	bl	8009238 <__hexdig_fun>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d060      	beq.n	8009394 <__gethex+0x130>
 80092d2:	4633      	mov	r3, r6
 80092d4:	7818      	ldrb	r0, [r3, #0]
 80092d6:	2830      	cmp	r0, #48	; 0x30
 80092d8:	461f      	mov	r7, r3
 80092da:	f103 0301 	add.w	r3, r3, #1
 80092de:	d0f9      	beq.n	80092d4 <__gethex+0x70>
 80092e0:	f7ff ffaa 	bl	8009238 <__hexdig_fun>
 80092e4:	2301      	movs	r3, #1
 80092e6:	fab0 f480 	clz	r4, r0
 80092ea:	0964      	lsrs	r4, r4, #5
 80092ec:	4635      	mov	r5, r6
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	463a      	mov	r2, r7
 80092f2:	4616      	mov	r6, r2
 80092f4:	3201      	adds	r2, #1
 80092f6:	7830      	ldrb	r0, [r6, #0]
 80092f8:	f7ff ff9e 	bl	8009238 <__hexdig_fun>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1f8      	bne.n	80092f2 <__gethex+0x8e>
 8009300:	9903      	ldr	r1, [sp, #12]
 8009302:	4652      	mov	r2, sl
 8009304:	4630      	mov	r0, r6
 8009306:	f001 f9b1 	bl	800a66c <strncmp>
 800930a:	b980      	cbnz	r0, 800932e <__gethex+0xca>
 800930c:	b94d      	cbnz	r5, 8009322 <__gethex+0xbe>
 800930e:	eb06 050a 	add.w	r5, r6, sl
 8009312:	462a      	mov	r2, r5
 8009314:	4616      	mov	r6, r2
 8009316:	3201      	adds	r2, #1
 8009318:	7830      	ldrb	r0, [r6, #0]
 800931a:	f7ff ff8d 	bl	8009238 <__hexdig_fun>
 800931e:	2800      	cmp	r0, #0
 8009320:	d1f8      	bne.n	8009314 <__gethex+0xb0>
 8009322:	1bad      	subs	r5, r5, r6
 8009324:	00ad      	lsls	r5, r5, #2
 8009326:	e004      	b.n	8009332 <__gethex+0xce>
 8009328:	2400      	movs	r4, #0
 800932a:	4625      	mov	r5, r4
 800932c:	e7e0      	b.n	80092f0 <__gethex+0x8c>
 800932e:	2d00      	cmp	r5, #0
 8009330:	d1f7      	bne.n	8009322 <__gethex+0xbe>
 8009332:	7833      	ldrb	r3, [r6, #0]
 8009334:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009338:	2b50      	cmp	r3, #80	; 0x50
 800933a:	d139      	bne.n	80093b0 <__gethex+0x14c>
 800933c:	7873      	ldrb	r3, [r6, #1]
 800933e:	2b2b      	cmp	r3, #43	; 0x2b
 8009340:	d02a      	beq.n	8009398 <__gethex+0x134>
 8009342:	2b2d      	cmp	r3, #45	; 0x2d
 8009344:	d02c      	beq.n	80093a0 <__gethex+0x13c>
 8009346:	1c71      	adds	r1, r6, #1
 8009348:	f04f 0900 	mov.w	r9, #0
 800934c:	7808      	ldrb	r0, [r1, #0]
 800934e:	f7ff ff73 	bl	8009238 <__hexdig_fun>
 8009352:	1e43      	subs	r3, r0, #1
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b18      	cmp	r3, #24
 8009358:	d82a      	bhi.n	80093b0 <__gethex+0x14c>
 800935a:	f1a0 0210 	sub.w	r2, r0, #16
 800935e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009362:	f7ff ff69 	bl	8009238 <__hexdig_fun>
 8009366:	1e43      	subs	r3, r0, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b18      	cmp	r3, #24
 800936c:	d91b      	bls.n	80093a6 <__gethex+0x142>
 800936e:	f1b9 0f00 	cmp.w	r9, #0
 8009372:	d000      	beq.n	8009376 <__gethex+0x112>
 8009374:	4252      	negs	r2, r2
 8009376:	4415      	add	r5, r2
 8009378:	f8cb 1000 	str.w	r1, [fp]
 800937c:	b1d4      	cbz	r4, 80093b4 <__gethex+0x150>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bf14      	ite	ne
 8009384:	2700      	movne	r7, #0
 8009386:	2706      	moveq	r7, #6
 8009388:	4638      	mov	r0, r7
 800938a:	b00b      	add	sp, #44	; 0x2c
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	463e      	mov	r6, r7
 8009392:	4625      	mov	r5, r4
 8009394:	2401      	movs	r4, #1
 8009396:	e7cc      	b.n	8009332 <__gethex+0xce>
 8009398:	f04f 0900 	mov.w	r9, #0
 800939c:	1cb1      	adds	r1, r6, #2
 800939e:	e7d5      	b.n	800934c <__gethex+0xe8>
 80093a0:	f04f 0901 	mov.w	r9, #1
 80093a4:	e7fa      	b.n	800939c <__gethex+0x138>
 80093a6:	230a      	movs	r3, #10
 80093a8:	fb03 0202 	mla	r2, r3, r2, r0
 80093ac:	3a10      	subs	r2, #16
 80093ae:	e7d6      	b.n	800935e <__gethex+0xfa>
 80093b0:	4631      	mov	r1, r6
 80093b2:	e7e1      	b.n	8009378 <__gethex+0x114>
 80093b4:	1bf3      	subs	r3, r6, r7
 80093b6:	3b01      	subs	r3, #1
 80093b8:	4621      	mov	r1, r4
 80093ba:	2b07      	cmp	r3, #7
 80093bc:	dc0a      	bgt.n	80093d4 <__gethex+0x170>
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	f000 fa78 	bl	80098b4 <_Balloc>
 80093c4:	4604      	mov	r4, r0
 80093c6:	b940      	cbnz	r0, 80093da <__gethex+0x176>
 80093c8:	4b63      	ldr	r3, [pc, #396]	; (8009558 <__gethex+0x2f4>)
 80093ca:	4602      	mov	r2, r0
 80093cc:	21de      	movs	r1, #222	; 0xde
 80093ce:	4863      	ldr	r0, [pc, #396]	; (800955c <__gethex+0x2f8>)
 80093d0:	f001 f96c 	bl	800a6ac <__assert_func>
 80093d4:	3101      	adds	r1, #1
 80093d6:	105b      	asrs	r3, r3, #1
 80093d8:	e7ef      	b.n	80093ba <__gethex+0x156>
 80093da:	f100 0914 	add.w	r9, r0, #20
 80093de:	f04f 0b00 	mov.w	fp, #0
 80093e2:	f1ca 0301 	rsb	r3, sl, #1
 80093e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80093ea:	f8cd b004 	str.w	fp, [sp, #4]
 80093ee:	9308      	str	r3, [sp, #32]
 80093f0:	42b7      	cmp	r7, r6
 80093f2:	d33f      	bcc.n	8009474 <__gethex+0x210>
 80093f4:	9f04      	ldr	r7, [sp, #16]
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	f847 3b04 	str.w	r3, [r7], #4
 80093fc:	eba7 0709 	sub.w	r7, r7, r9
 8009400:	10bf      	asrs	r7, r7, #2
 8009402:	6127      	str	r7, [r4, #16]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fb4b 	bl	8009aa0 <__hi0bits>
 800940a:	017f      	lsls	r7, r7, #5
 800940c:	f8d8 6000 	ldr.w	r6, [r8]
 8009410:	1a3f      	subs	r7, r7, r0
 8009412:	42b7      	cmp	r7, r6
 8009414:	dd62      	ble.n	80094dc <__gethex+0x278>
 8009416:	1bbf      	subs	r7, r7, r6
 8009418:	4639      	mov	r1, r7
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fedd 	bl	800a1da <__any_on>
 8009420:	4682      	mov	sl, r0
 8009422:	b1a8      	cbz	r0, 8009450 <__gethex+0x1ec>
 8009424:	1e7b      	subs	r3, r7, #1
 8009426:	1159      	asrs	r1, r3, #5
 8009428:	f003 021f 	and.w	r2, r3, #31
 800942c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009430:	f04f 0a01 	mov.w	sl, #1
 8009434:	fa0a f202 	lsl.w	r2, sl, r2
 8009438:	420a      	tst	r2, r1
 800943a:	d009      	beq.n	8009450 <__gethex+0x1ec>
 800943c:	4553      	cmp	r3, sl
 800943e:	dd05      	ble.n	800944c <__gethex+0x1e8>
 8009440:	1eb9      	subs	r1, r7, #2
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fec9 	bl	800a1da <__any_on>
 8009448:	2800      	cmp	r0, #0
 800944a:	d144      	bne.n	80094d6 <__gethex+0x272>
 800944c:	f04f 0a02 	mov.w	sl, #2
 8009450:	4639      	mov	r1, r7
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff fe9e 	bl	8009194 <rshift>
 8009458:	443d      	add	r5, r7
 800945a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800945e:	42ab      	cmp	r3, r5
 8009460:	da4a      	bge.n	80094f8 <__gethex+0x294>
 8009462:	9802      	ldr	r0, [sp, #8]
 8009464:	4621      	mov	r1, r4
 8009466:	f000 fa65 	bl	8009934 <_Bfree>
 800946a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800946c:	2300      	movs	r3, #0
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	27a3      	movs	r7, #163	; 0xa3
 8009472:	e789      	b.n	8009388 <__gethex+0x124>
 8009474:	1e73      	subs	r3, r6, #1
 8009476:	9a07      	ldr	r2, [sp, #28]
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800947e:	4293      	cmp	r3, r2
 8009480:	d019      	beq.n	80094b6 <__gethex+0x252>
 8009482:	f1bb 0f20 	cmp.w	fp, #32
 8009486:	d107      	bne.n	8009498 <__gethex+0x234>
 8009488:	9b04      	ldr	r3, [sp, #16]
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	f843 2b04 	str.w	r2, [r3], #4
 8009490:	9304      	str	r3, [sp, #16]
 8009492:	2300      	movs	r3, #0
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	469b      	mov	fp, r3
 8009498:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800949c:	f7ff fecc 	bl	8009238 <__hexdig_fun>
 80094a0:	9b01      	ldr	r3, [sp, #4]
 80094a2:	f000 000f 	and.w	r0, r0, #15
 80094a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80094aa:	4303      	orrs	r3, r0
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	f10b 0b04 	add.w	fp, fp, #4
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	e00d      	b.n	80094d2 <__gethex+0x26e>
 80094b6:	9b05      	ldr	r3, [sp, #20]
 80094b8:	9a08      	ldr	r2, [sp, #32]
 80094ba:	4413      	add	r3, r2
 80094bc:	42bb      	cmp	r3, r7
 80094be:	d3e0      	bcc.n	8009482 <__gethex+0x21e>
 80094c0:	4618      	mov	r0, r3
 80094c2:	9903      	ldr	r1, [sp, #12]
 80094c4:	9309      	str	r3, [sp, #36]	; 0x24
 80094c6:	4652      	mov	r2, sl
 80094c8:	f001 f8d0 	bl	800a66c <strncmp>
 80094cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1d7      	bne.n	8009482 <__gethex+0x21e>
 80094d2:	461e      	mov	r6, r3
 80094d4:	e78c      	b.n	80093f0 <__gethex+0x18c>
 80094d6:	f04f 0a03 	mov.w	sl, #3
 80094da:	e7b9      	b.n	8009450 <__gethex+0x1ec>
 80094dc:	da09      	bge.n	80094f2 <__gethex+0x28e>
 80094de:	1bf7      	subs	r7, r6, r7
 80094e0:	4621      	mov	r1, r4
 80094e2:	9802      	ldr	r0, [sp, #8]
 80094e4:	463a      	mov	r2, r7
 80094e6:	f000 fc3f 	bl	8009d68 <__lshift>
 80094ea:	1bed      	subs	r5, r5, r7
 80094ec:	4604      	mov	r4, r0
 80094ee:	f100 0914 	add.w	r9, r0, #20
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	e7b0      	b.n	800945a <__gethex+0x1f6>
 80094f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80094fc:	42a8      	cmp	r0, r5
 80094fe:	dd70      	ble.n	80095e2 <__gethex+0x37e>
 8009500:	1b45      	subs	r5, r0, r5
 8009502:	42ae      	cmp	r6, r5
 8009504:	dc34      	bgt.n	8009570 <__gethex+0x30c>
 8009506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d028      	beq.n	8009560 <__gethex+0x2fc>
 800950e:	2b03      	cmp	r3, #3
 8009510:	d02a      	beq.n	8009568 <__gethex+0x304>
 8009512:	2b01      	cmp	r3, #1
 8009514:	d115      	bne.n	8009542 <__gethex+0x2de>
 8009516:	42ae      	cmp	r6, r5
 8009518:	d113      	bne.n	8009542 <__gethex+0x2de>
 800951a:	2e01      	cmp	r6, #1
 800951c:	d10b      	bne.n	8009536 <__gethex+0x2d2>
 800951e:	9a06      	ldr	r2, [sp, #24]
 8009520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	2301      	movs	r3, #1
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	f8c9 3000 	str.w	r3, [r9]
 800952e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009530:	2762      	movs	r7, #98	; 0x62
 8009532:	601c      	str	r4, [r3, #0]
 8009534:	e728      	b.n	8009388 <__gethex+0x124>
 8009536:	1e71      	subs	r1, r6, #1
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fe4e 	bl	800a1da <__any_on>
 800953e:	2800      	cmp	r0, #0
 8009540:	d1ed      	bne.n	800951e <__gethex+0x2ba>
 8009542:	9802      	ldr	r0, [sp, #8]
 8009544:	4621      	mov	r1, r4
 8009546:	f000 f9f5 	bl	8009934 <_Bfree>
 800954a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800954c:	2300      	movs	r3, #0
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	2750      	movs	r7, #80	; 0x50
 8009552:	e719      	b.n	8009388 <__gethex+0x124>
 8009554:	0800b660 	.word	0x0800b660
 8009558:	0800b5e4 	.word	0x0800b5e4
 800955c:	0800b5f5 	.word	0x0800b5f5
 8009560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1ed      	bne.n	8009542 <__gethex+0x2de>
 8009566:	e7da      	b.n	800951e <__gethex+0x2ba>
 8009568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1d7      	bne.n	800951e <__gethex+0x2ba>
 800956e:	e7e8      	b.n	8009542 <__gethex+0x2de>
 8009570:	1e6f      	subs	r7, r5, #1
 8009572:	f1ba 0f00 	cmp.w	sl, #0
 8009576:	d131      	bne.n	80095dc <__gethex+0x378>
 8009578:	b127      	cbz	r7, 8009584 <__gethex+0x320>
 800957a:	4639      	mov	r1, r7
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fe2c 	bl	800a1da <__any_on>
 8009582:	4682      	mov	sl, r0
 8009584:	117b      	asrs	r3, r7, #5
 8009586:	2101      	movs	r1, #1
 8009588:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800958c:	f007 071f 	and.w	r7, r7, #31
 8009590:	fa01 f707 	lsl.w	r7, r1, r7
 8009594:	421f      	tst	r7, r3
 8009596:	4629      	mov	r1, r5
 8009598:	4620      	mov	r0, r4
 800959a:	bf18      	it	ne
 800959c:	f04a 0a02 	orrne.w	sl, sl, #2
 80095a0:	1b76      	subs	r6, r6, r5
 80095a2:	f7ff fdf7 	bl	8009194 <rshift>
 80095a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095aa:	2702      	movs	r7, #2
 80095ac:	f1ba 0f00 	cmp.w	sl, #0
 80095b0:	d048      	beq.n	8009644 <__gethex+0x3e0>
 80095b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d015      	beq.n	80095e6 <__gethex+0x382>
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d017      	beq.n	80095ee <__gethex+0x38a>
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d109      	bne.n	80095d6 <__gethex+0x372>
 80095c2:	f01a 0f02 	tst.w	sl, #2
 80095c6:	d006      	beq.n	80095d6 <__gethex+0x372>
 80095c8:	f8d9 0000 	ldr.w	r0, [r9]
 80095cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80095d0:	f01a 0f01 	tst.w	sl, #1
 80095d4:	d10e      	bne.n	80095f4 <__gethex+0x390>
 80095d6:	f047 0710 	orr.w	r7, r7, #16
 80095da:	e033      	b.n	8009644 <__gethex+0x3e0>
 80095dc:	f04f 0a01 	mov.w	sl, #1
 80095e0:	e7d0      	b.n	8009584 <__gethex+0x320>
 80095e2:	2701      	movs	r7, #1
 80095e4:	e7e2      	b.n	80095ac <__gethex+0x348>
 80095e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095e8:	f1c3 0301 	rsb	r3, r3, #1
 80095ec:	9315      	str	r3, [sp, #84]	; 0x54
 80095ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <__gethex+0x372>
 80095f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095f8:	f104 0314 	add.w	r3, r4, #20
 80095fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009600:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009604:	f04f 0c00 	mov.w	ip, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f853 2b04 	ldr.w	r2, [r3], #4
 800960e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009612:	d01c      	beq.n	800964e <__gethex+0x3ea>
 8009614:	3201      	adds	r2, #1
 8009616:	6002      	str	r2, [r0, #0]
 8009618:	2f02      	cmp	r7, #2
 800961a:	f104 0314 	add.w	r3, r4, #20
 800961e:	d13d      	bne.n	800969c <__gethex+0x438>
 8009620:	f8d8 2000 	ldr.w	r2, [r8]
 8009624:	3a01      	subs	r2, #1
 8009626:	42b2      	cmp	r2, r6
 8009628:	d10a      	bne.n	8009640 <__gethex+0x3dc>
 800962a:	1171      	asrs	r1, r6, #5
 800962c:	2201      	movs	r2, #1
 800962e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009632:	f006 061f 	and.w	r6, r6, #31
 8009636:	fa02 f606 	lsl.w	r6, r2, r6
 800963a:	421e      	tst	r6, r3
 800963c:	bf18      	it	ne
 800963e:	4617      	movne	r7, r2
 8009640:	f047 0720 	orr.w	r7, r7, #32
 8009644:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009646:	601c      	str	r4, [r3, #0]
 8009648:	9b06      	ldr	r3, [sp, #24]
 800964a:	601d      	str	r5, [r3, #0]
 800964c:	e69c      	b.n	8009388 <__gethex+0x124>
 800964e:	4299      	cmp	r1, r3
 8009650:	f843 cc04 	str.w	ip, [r3, #-4]
 8009654:	d8d8      	bhi.n	8009608 <__gethex+0x3a4>
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	459b      	cmp	fp, r3
 800965a:	db17      	blt.n	800968c <__gethex+0x428>
 800965c:	6861      	ldr	r1, [r4, #4]
 800965e:	9802      	ldr	r0, [sp, #8]
 8009660:	3101      	adds	r1, #1
 8009662:	f000 f927 	bl	80098b4 <_Balloc>
 8009666:	4681      	mov	r9, r0
 8009668:	b918      	cbnz	r0, 8009672 <__gethex+0x40e>
 800966a:	4b1a      	ldr	r3, [pc, #104]	; (80096d4 <__gethex+0x470>)
 800966c:	4602      	mov	r2, r0
 800966e:	2184      	movs	r1, #132	; 0x84
 8009670:	e6ad      	b.n	80093ce <__gethex+0x16a>
 8009672:	6922      	ldr	r2, [r4, #16]
 8009674:	3202      	adds	r2, #2
 8009676:	f104 010c 	add.w	r1, r4, #12
 800967a:	0092      	lsls	r2, r2, #2
 800967c:	300c      	adds	r0, #12
 800967e:	f000 f90b 	bl	8009898 <memcpy>
 8009682:	4621      	mov	r1, r4
 8009684:	9802      	ldr	r0, [sp, #8]
 8009686:	f000 f955 	bl	8009934 <_Bfree>
 800968a:	464c      	mov	r4, r9
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009694:	6122      	str	r2, [r4, #16]
 8009696:	2201      	movs	r2, #1
 8009698:	615a      	str	r2, [r3, #20]
 800969a:	e7bd      	b.n	8009618 <__gethex+0x3b4>
 800969c:	6922      	ldr	r2, [r4, #16]
 800969e:	455a      	cmp	r2, fp
 80096a0:	dd0b      	ble.n	80096ba <__gethex+0x456>
 80096a2:	2101      	movs	r1, #1
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff fd75 	bl	8009194 <rshift>
 80096aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096ae:	3501      	adds	r5, #1
 80096b0:	42ab      	cmp	r3, r5
 80096b2:	f6ff aed6 	blt.w	8009462 <__gethex+0x1fe>
 80096b6:	2701      	movs	r7, #1
 80096b8:	e7c2      	b.n	8009640 <__gethex+0x3dc>
 80096ba:	f016 061f 	ands.w	r6, r6, #31
 80096be:	d0fa      	beq.n	80096b6 <__gethex+0x452>
 80096c0:	449a      	add	sl, r3
 80096c2:	f1c6 0620 	rsb	r6, r6, #32
 80096c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80096ca:	f000 f9e9 	bl	8009aa0 <__hi0bits>
 80096ce:	42b0      	cmp	r0, r6
 80096d0:	dbe7      	blt.n	80096a2 <__gethex+0x43e>
 80096d2:	e7f0      	b.n	80096b6 <__gethex+0x452>
 80096d4:	0800b5e4 	.word	0x0800b5e4

080096d8 <L_shift>:
 80096d8:	f1c2 0208 	rsb	r2, r2, #8
 80096dc:	0092      	lsls	r2, r2, #2
 80096de:	b570      	push	{r4, r5, r6, lr}
 80096e0:	f1c2 0620 	rsb	r6, r2, #32
 80096e4:	6843      	ldr	r3, [r0, #4]
 80096e6:	6804      	ldr	r4, [r0, #0]
 80096e8:	fa03 f506 	lsl.w	r5, r3, r6
 80096ec:	432c      	orrs	r4, r5
 80096ee:	40d3      	lsrs	r3, r2
 80096f0:	6004      	str	r4, [r0, #0]
 80096f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80096f6:	4288      	cmp	r0, r1
 80096f8:	d3f4      	bcc.n	80096e4 <L_shift+0xc>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}

080096fc <__match>:
 80096fc:	b530      	push	{r4, r5, lr}
 80096fe:	6803      	ldr	r3, [r0, #0]
 8009700:	3301      	adds	r3, #1
 8009702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009706:	b914      	cbnz	r4, 800970e <__match+0x12>
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	2001      	movs	r0, #1
 800970c:	bd30      	pop	{r4, r5, pc}
 800970e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009712:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009716:	2d19      	cmp	r5, #25
 8009718:	bf98      	it	ls
 800971a:	3220      	addls	r2, #32
 800971c:	42a2      	cmp	r2, r4
 800971e:	d0f0      	beq.n	8009702 <__match+0x6>
 8009720:	2000      	movs	r0, #0
 8009722:	e7f3      	b.n	800970c <__match+0x10>

08009724 <__hexnan>:
 8009724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	680b      	ldr	r3, [r1, #0]
 800972a:	6801      	ldr	r1, [r0, #0]
 800972c:	115e      	asrs	r6, r3, #5
 800972e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009732:	f013 031f 	ands.w	r3, r3, #31
 8009736:	b087      	sub	sp, #28
 8009738:	bf18      	it	ne
 800973a:	3604      	addne	r6, #4
 800973c:	2500      	movs	r5, #0
 800973e:	1f37      	subs	r7, r6, #4
 8009740:	4682      	mov	sl, r0
 8009742:	4690      	mov	r8, r2
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	f846 5c04 	str.w	r5, [r6, #-4]
 800974a:	46b9      	mov	r9, r7
 800974c:	463c      	mov	r4, r7
 800974e:	9502      	str	r5, [sp, #8]
 8009750:	46ab      	mov	fp, r5
 8009752:	784a      	ldrb	r2, [r1, #1]
 8009754:	1c4b      	adds	r3, r1, #1
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	b342      	cbz	r2, 80097ac <__hexnan+0x88>
 800975a:	4610      	mov	r0, r2
 800975c:	9105      	str	r1, [sp, #20]
 800975e:	9204      	str	r2, [sp, #16]
 8009760:	f7ff fd6a 	bl	8009238 <__hexdig_fun>
 8009764:	2800      	cmp	r0, #0
 8009766:	d14f      	bne.n	8009808 <__hexnan+0xe4>
 8009768:	9a04      	ldr	r2, [sp, #16]
 800976a:	9905      	ldr	r1, [sp, #20]
 800976c:	2a20      	cmp	r2, #32
 800976e:	d818      	bhi.n	80097a2 <__hexnan+0x7e>
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	459b      	cmp	fp, r3
 8009774:	dd13      	ble.n	800979e <__hexnan+0x7a>
 8009776:	454c      	cmp	r4, r9
 8009778:	d206      	bcs.n	8009788 <__hexnan+0x64>
 800977a:	2d07      	cmp	r5, #7
 800977c:	dc04      	bgt.n	8009788 <__hexnan+0x64>
 800977e:	462a      	mov	r2, r5
 8009780:	4649      	mov	r1, r9
 8009782:	4620      	mov	r0, r4
 8009784:	f7ff ffa8 	bl	80096d8 <L_shift>
 8009788:	4544      	cmp	r4, r8
 800978a:	d950      	bls.n	800982e <__hexnan+0x10a>
 800978c:	2300      	movs	r3, #0
 800978e:	f1a4 0904 	sub.w	r9, r4, #4
 8009792:	f844 3c04 	str.w	r3, [r4, #-4]
 8009796:	f8cd b008 	str.w	fp, [sp, #8]
 800979a:	464c      	mov	r4, r9
 800979c:	461d      	mov	r5, r3
 800979e:	9903      	ldr	r1, [sp, #12]
 80097a0:	e7d7      	b.n	8009752 <__hexnan+0x2e>
 80097a2:	2a29      	cmp	r2, #41	; 0x29
 80097a4:	d156      	bne.n	8009854 <__hexnan+0x130>
 80097a6:	3102      	adds	r1, #2
 80097a8:	f8ca 1000 	str.w	r1, [sl]
 80097ac:	f1bb 0f00 	cmp.w	fp, #0
 80097b0:	d050      	beq.n	8009854 <__hexnan+0x130>
 80097b2:	454c      	cmp	r4, r9
 80097b4:	d206      	bcs.n	80097c4 <__hexnan+0xa0>
 80097b6:	2d07      	cmp	r5, #7
 80097b8:	dc04      	bgt.n	80097c4 <__hexnan+0xa0>
 80097ba:	462a      	mov	r2, r5
 80097bc:	4649      	mov	r1, r9
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff ff8a 	bl	80096d8 <L_shift>
 80097c4:	4544      	cmp	r4, r8
 80097c6:	d934      	bls.n	8009832 <__hexnan+0x10e>
 80097c8:	f1a8 0204 	sub.w	r2, r8, #4
 80097cc:	4623      	mov	r3, r4
 80097ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80097d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80097d6:	429f      	cmp	r7, r3
 80097d8:	d2f9      	bcs.n	80097ce <__hexnan+0xaa>
 80097da:	1b3b      	subs	r3, r7, r4
 80097dc:	f023 0303 	bic.w	r3, r3, #3
 80097e0:	3304      	adds	r3, #4
 80097e2:	3401      	adds	r4, #1
 80097e4:	3e03      	subs	r6, #3
 80097e6:	42b4      	cmp	r4, r6
 80097e8:	bf88      	it	hi
 80097ea:	2304      	movhi	r3, #4
 80097ec:	4443      	add	r3, r8
 80097ee:	2200      	movs	r2, #0
 80097f0:	f843 2b04 	str.w	r2, [r3], #4
 80097f4:	429f      	cmp	r7, r3
 80097f6:	d2fb      	bcs.n	80097f0 <__hexnan+0xcc>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	b91b      	cbnz	r3, 8009804 <__hexnan+0xe0>
 80097fc:	4547      	cmp	r7, r8
 80097fe:	d127      	bne.n	8009850 <__hexnan+0x12c>
 8009800:	2301      	movs	r3, #1
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	2005      	movs	r0, #5
 8009806:	e026      	b.n	8009856 <__hexnan+0x132>
 8009808:	3501      	adds	r5, #1
 800980a:	2d08      	cmp	r5, #8
 800980c:	f10b 0b01 	add.w	fp, fp, #1
 8009810:	dd06      	ble.n	8009820 <__hexnan+0xfc>
 8009812:	4544      	cmp	r4, r8
 8009814:	d9c3      	bls.n	800979e <__hexnan+0x7a>
 8009816:	2300      	movs	r3, #0
 8009818:	f844 3c04 	str.w	r3, [r4, #-4]
 800981c:	2501      	movs	r5, #1
 800981e:	3c04      	subs	r4, #4
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	f000 000f 	and.w	r0, r0, #15
 8009826:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800982a:	6022      	str	r2, [r4, #0]
 800982c:	e7b7      	b.n	800979e <__hexnan+0x7a>
 800982e:	2508      	movs	r5, #8
 8009830:	e7b5      	b.n	800979e <__hexnan+0x7a>
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0df      	beq.n	80097f8 <__hexnan+0xd4>
 8009838:	f04f 32ff 	mov.w	r2, #4294967295
 800983c:	f1c3 0320 	rsb	r3, r3, #32
 8009840:	fa22 f303 	lsr.w	r3, r2, r3
 8009844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009848:	401a      	ands	r2, r3
 800984a:	f846 2c04 	str.w	r2, [r6, #-4]
 800984e:	e7d3      	b.n	80097f8 <__hexnan+0xd4>
 8009850:	3f04      	subs	r7, #4
 8009852:	e7d1      	b.n	80097f8 <__hexnan+0xd4>
 8009854:	2004      	movs	r0, #4
 8009856:	b007      	add	sp, #28
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800985c <_localeconv_r>:
 800985c:	4800      	ldr	r0, [pc, #0]	; (8009860 <_localeconv_r+0x4>)
 800985e:	4770      	bx	lr
 8009860:	20000164 	.word	0x20000164

08009864 <malloc>:
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <malloc+0xc>)
 8009866:	4601      	mov	r1, r0
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	f000 bd33 	b.w	800a2d4 <_malloc_r>
 800986e:	bf00      	nop
 8009870:	2000000c 	.word	0x2000000c

08009874 <__ascii_mbtowc>:
 8009874:	b082      	sub	sp, #8
 8009876:	b901      	cbnz	r1, 800987a <__ascii_mbtowc+0x6>
 8009878:	a901      	add	r1, sp, #4
 800987a:	b142      	cbz	r2, 800988e <__ascii_mbtowc+0x1a>
 800987c:	b14b      	cbz	r3, 8009892 <__ascii_mbtowc+0x1e>
 800987e:	7813      	ldrb	r3, [r2, #0]
 8009880:	600b      	str	r3, [r1, #0]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	1e10      	subs	r0, r2, #0
 8009886:	bf18      	it	ne
 8009888:	2001      	movne	r0, #1
 800988a:	b002      	add	sp, #8
 800988c:	4770      	bx	lr
 800988e:	4610      	mov	r0, r2
 8009890:	e7fb      	b.n	800988a <__ascii_mbtowc+0x16>
 8009892:	f06f 0001 	mvn.w	r0, #1
 8009896:	e7f8      	b.n	800988a <__ascii_mbtowc+0x16>

08009898 <memcpy>:
 8009898:	440a      	add	r2, r1
 800989a:	4291      	cmp	r1, r2
 800989c:	f100 33ff 	add.w	r3, r0, #4294967295
 80098a0:	d100      	bne.n	80098a4 <memcpy+0xc>
 80098a2:	4770      	bx	lr
 80098a4:	b510      	push	{r4, lr}
 80098a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ae:	4291      	cmp	r1, r2
 80098b0:	d1f9      	bne.n	80098a6 <memcpy+0xe>
 80098b2:	bd10      	pop	{r4, pc}

080098b4 <_Balloc>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098b8:	4604      	mov	r4, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	b976      	cbnz	r6, 80098dc <_Balloc+0x28>
 80098be:	2010      	movs	r0, #16
 80098c0:	f7ff ffd0 	bl	8009864 <malloc>
 80098c4:	4602      	mov	r2, r0
 80098c6:	6260      	str	r0, [r4, #36]	; 0x24
 80098c8:	b920      	cbnz	r0, 80098d4 <_Balloc+0x20>
 80098ca:	4b18      	ldr	r3, [pc, #96]	; (800992c <_Balloc+0x78>)
 80098cc:	4818      	ldr	r0, [pc, #96]	; (8009930 <_Balloc+0x7c>)
 80098ce:	2166      	movs	r1, #102	; 0x66
 80098d0:	f000 feec 	bl	800a6ac <__assert_func>
 80098d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d8:	6006      	str	r6, [r0, #0]
 80098da:	60c6      	str	r6, [r0, #12]
 80098dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098de:	68f3      	ldr	r3, [r6, #12]
 80098e0:	b183      	cbz	r3, 8009904 <_Balloc+0x50>
 80098e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098ea:	b9b8      	cbnz	r0, 800991c <_Balloc+0x68>
 80098ec:	2101      	movs	r1, #1
 80098ee:	fa01 f605 	lsl.w	r6, r1, r5
 80098f2:	1d72      	adds	r2, r6, #5
 80098f4:	0092      	lsls	r2, r2, #2
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fc90 	bl	800a21c <_calloc_r>
 80098fc:	b160      	cbz	r0, 8009918 <_Balloc+0x64>
 80098fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009902:	e00e      	b.n	8009922 <_Balloc+0x6e>
 8009904:	2221      	movs	r2, #33	; 0x21
 8009906:	2104      	movs	r1, #4
 8009908:	4620      	mov	r0, r4
 800990a:	f000 fc87 	bl	800a21c <_calloc_r>
 800990e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009910:	60f0      	str	r0, [r6, #12]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e4      	bne.n	80098e2 <_Balloc+0x2e>
 8009918:	2000      	movs	r0, #0
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	6802      	ldr	r2, [r0, #0]
 800991e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009922:	2300      	movs	r3, #0
 8009924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009928:	e7f7      	b.n	800991a <_Balloc+0x66>
 800992a:	bf00      	nop
 800992c:	0800b56e 	.word	0x0800b56e
 8009930:	0800b674 	.word	0x0800b674

08009934 <_Bfree>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009938:	4605      	mov	r5, r0
 800993a:	460c      	mov	r4, r1
 800993c:	b976      	cbnz	r6, 800995c <_Bfree+0x28>
 800993e:	2010      	movs	r0, #16
 8009940:	f7ff ff90 	bl	8009864 <malloc>
 8009944:	4602      	mov	r2, r0
 8009946:	6268      	str	r0, [r5, #36]	; 0x24
 8009948:	b920      	cbnz	r0, 8009954 <_Bfree+0x20>
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <_Bfree+0x3c>)
 800994c:	4809      	ldr	r0, [pc, #36]	; (8009974 <_Bfree+0x40>)
 800994e:	218a      	movs	r1, #138	; 0x8a
 8009950:	f000 feac 	bl	800a6ac <__assert_func>
 8009954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009958:	6006      	str	r6, [r0, #0]
 800995a:	60c6      	str	r6, [r0, #12]
 800995c:	b13c      	cbz	r4, 800996e <_Bfree+0x3a>
 800995e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009960:	6862      	ldr	r2, [r4, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009968:	6021      	str	r1, [r4, #0]
 800996a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	0800b56e 	.word	0x0800b56e
 8009974:	0800b674 	.word	0x0800b674

08009978 <__multadd>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	690e      	ldr	r6, [r1, #16]
 800997e:	4607      	mov	r7, r0
 8009980:	4698      	mov	r8, r3
 8009982:	460c      	mov	r4, r1
 8009984:	f101 0014 	add.w	r0, r1, #20
 8009988:	2300      	movs	r3, #0
 800998a:	6805      	ldr	r5, [r0, #0]
 800998c:	b2a9      	uxth	r1, r5
 800998e:	fb02 8101 	mla	r1, r2, r1, r8
 8009992:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009996:	0c2d      	lsrs	r5, r5, #16
 8009998:	fb02 c505 	mla	r5, r2, r5, ip
 800999c:	b289      	uxth	r1, r1
 800999e:	3301      	adds	r3, #1
 80099a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80099a4:	429e      	cmp	r6, r3
 80099a6:	f840 1b04 	str.w	r1, [r0], #4
 80099aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80099ae:	dcec      	bgt.n	800998a <__multadd+0x12>
 80099b0:	f1b8 0f00 	cmp.w	r8, #0
 80099b4:	d022      	beq.n	80099fc <__multadd+0x84>
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	42b3      	cmp	r3, r6
 80099ba:	dc19      	bgt.n	80099f0 <__multadd+0x78>
 80099bc:	6861      	ldr	r1, [r4, #4]
 80099be:	4638      	mov	r0, r7
 80099c0:	3101      	adds	r1, #1
 80099c2:	f7ff ff77 	bl	80098b4 <_Balloc>
 80099c6:	4605      	mov	r5, r0
 80099c8:	b928      	cbnz	r0, 80099d6 <__multadd+0x5e>
 80099ca:	4602      	mov	r2, r0
 80099cc:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <__multadd+0x8c>)
 80099ce:	480e      	ldr	r0, [pc, #56]	; (8009a08 <__multadd+0x90>)
 80099d0:	21b5      	movs	r1, #181	; 0xb5
 80099d2:	f000 fe6b 	bl	800a6ac <__assert_func>
 80099d6:	6922      	ldr	r2, [r4, #16]
 80099d8:	3202      	adds	r2, #2
 80099da:	f104 010c 	add.w	r1, r4, #12
 80099de:	0092      	lsls	r2, r2, #2
 80099e0:	300c      	adds	r0, #12
 80099e2:	f7ff ff59 	bl	8009898 <memcpy>
 80099e6:	4621      	mov	r1, r4
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff ffa3 	bl	8009934 <_Bfree>
 80099ee:	462c      	mov	r4, r5
 80099f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80099f4:	3601      	adds	r6, #1
 80099f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80099fa:	6126      	str	r6, [r4, #16]
 80099fc:	4620      	mov	r0, r4
 80099fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a02:	bf00      	nop
 8009a04:	0800b5e4 	.word	0x0800b5e4
 8009a08:	0800b674 	.word	0x0800b674

08009a0c <__s2b>:
 8009a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	4615      	mov	r5, r2
 8009a14:	461f      	mov	r7, r3
 8009a16:	2209      	movs	r2, #9
 8009a18:	3308      	adds	r3, #8
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a20:	2100      	movs	r1, #0
 8009a22:	2201      	movs	r2, #1
 8009a24:	429a      	cmp	r2, r3
 8009a26:	db09      	blt.n	8009a3c <__s2b+0x30>
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff ff43 	bl	80098b4 <_Balloc>
 8009a2e:	b940      	cbnz	r0, 8009a42 <__s2b+0x36>
 8009a30:	4602      	mov	r2, r0
 8009a32:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <__s2b+0x8c>)
 8009a34:	4819      	ldr	r0, [pc, #100]	; (8009a9c <__s2b+0x90>)
 8009a36:	21ce      	movs	r1, #206	; 0xce
 8009a38:	f000 fe38 	bl	800a6ac <__assert_func>
 8009a3c:	0052      	lsls	r2, r2, #1
 8009a3e:	3101      	adds	r1, #1
 8009a40:	e7f0      	b.n	8009a24 <__s2b+0x18>
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	6143      	str	r3, [r0, #20]
 8009a46:	2d09      	cmp	r5, #9
 8009a48:	f04f 0301 	mov.w	r3, #1
 8009a4c:	6103      	str	r3, [r0, #16]
 8009a4e:	dd16      	ble.n	8009a7e <__s2b+0x72>
 8009a50:	f104 0909 	add.w	r9, r4, #9
 8009a54:	46c8      	mov	r8, r9
 8009a56:	442c      	add	r4, r5
 8009a58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a5c:	4601      	mov	r1, r0
 8009a5e:	3b30      	subs	r3, #48	; 0x30
 8009a60:	220a      	movs	r2, #10
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ff88 	bl	8009978 <__multadd>
 8009a68:	45a0      	cmp	r8, r4
 8009a6a:	d1f5      	bne.n	8009a58 <__s2b+0x4c>
 8009a6c:	f1a5 0408 	sub.w	r4, r5, #8
 8009a70:	444c      	add	r4, r9
 8009a72:	1b2d      	subs	r5, r5, r4
 8009a74:	1963      	adds	r3, r4, r5
 8009a76:	42bb      	cmp	r3, r7
 8009a78:	db04      	blt.n	8009a84 <__s2b+0x78>
 8009a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7e:	340a      	adds	r4, #10
 8009a80:	2509      	movs	r5, #9
 8009a82:	e7f6      	b.n	8009a72 <__s2b+0x66>
 8009a84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a88:	4601      	mov	r1, r0
 8009a8a:	3b30      	subs	r3, #48	; 0x30
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ff72 	bl	8009978 <__multadd>
 8009a94:	e7ee      	b.n	8009a74 <__s2b+0x68>
 8009a96:	bf00      	nop
 8009a98:	0800b5e4 	.word	0x0800b5e4
 8009a9c:	0800b674 	.word	0x0800b674

08009aa0 <__hi0bits>:
 8009aa0:	0c02      	lsrs	r2, r0, #16
 8009aa2:	0412      	lsls	r2, r2, #16
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	b9ca      	cbnz	r2, 8009adc <__hi0bits+0x3c>
 8009aa8:	0403      	lsls	r3, r0, #16
 8009aaa:	2010      	movs	r0, #16
 8009aac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ab0:	bf04      	itt	eq
 8009ab2:	021b      	lsleq	r3, r3, #8
 8009ab4:	3008      	addeq	r0, #8
 8009ab6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009aba:	bf04      	itt	eq
 8009abc:	011b      	lsleq	r3, r3, #4
 8009abe:	3004      	addeq	r0, #4
 8009ac0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ac4:	bf04      	itt	eq
 8009ac6:	009b      	lsleq	r3, r3, #2
 8009ac8:	3002      	addeq	r0, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	db05      	blt.n	8009ada <__hi0bits+0x3a>
 8009ace:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009ad2:	f100 0001 	add.w	r0, r0, #1
 8009ad6:	bf08      	it	eq
 8009ad8:	2020      	moveq	r0, #32
 8009ada:	4770      	bx	lr
 8009adc:	2000      	movs	r0, #0
 8009ade:	e7e5      	b.n	8009aac <__hi0bits+0xc>

08009ae0 <__lo0bits>:
 8009ae0:	6803      	ldr	r3, [r0, #0]
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	f013 0007 	ands.w	r0, r3, #7
 8009ae8:	d00b      	beq.n	8009b02 <__lo0bits+0x22>
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	d422      	bmi.n	8009b34 <__lo0bits+0x54>
 8009aee:	0798      	lsls	r0, r3, #30
 8009af0:	bf49      	itett	mi
 8009af2:	085b      	lsrmi	r3, r3, #1
 8009af4:	089b      	lsrpl	r3, r3, #2
 8009af6:	2001      	movmi	r0, #1
 8009af8:	6013      	strmi	r3, [r2, #0]
 8009afa:	bf5c      	itt	pl
 8009afc:	6013      	strpl	r3, [r2, #0]
 8009afe:	2002      	movpl	r0, #2
 8009b00:	4770      	bx	lr
 8009b02:	b299      	uxth	r1, r3
 8009b04:	b909      	cbnz	r1, 8009b0a <__lo0bits+0x2a>
 8009b06:	0c1b      	lsrs	r3, r3, #16
 8009b08:	2010      	movs	r0, #16
 8009b0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b0e:	bf04      	itt	eq
 8009b10:	0a1b      	lsreq	r3, r3, #8
 8009b12:	3008      	addeq	r0, #8
 8009b14:	0719      	lsls	r1, r3, #28
 8009b16:	bf04      	itt	eq
 8009b18:	091b      	lsreq	r3, r3, #4
 8009b1a:	3004      	addeq	r0, #4
 8009b1c:	0799      	lsls	r1, r3, #30
 8009b1e:	bf04      	itt	eq
 8009b20:	089b      	lsreq	r3, r3, #2
 8009b22:	3002      	addeq	r0, #2
 8009b24:	07d9      	lsls	r1, r3, #31
 8009b26:	d403      	bmi.n	8009b30 <__lo0bits+0x50>
 8009b28:	085b      	lsrs	r3, r3, #1
 8009b2a:	f100 0001 	add.w	r0, r0, #1
 8009b2e:	d003      	beq.n	8009b38 <__lo0bits+0x58>
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	4770      	bx	lr
 8009b34:	2000      	movs	r0, #0
 8009b36:	4770      	bx	lr
 8009b38:	2020      	movs	r0, #32
 8009b3a:	4770      	bx	lr

08009b3c <__i2b>:
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	460c      	mov	r4, r1
 8009b40:	2101      	movs	r1, #1
 8009b42:	f7ff feb7 	bl	80098b4 <_Balloc>
 8009b46:	4602      	mov	r2, r0
 8009b48:	b928      	cbnz	r0, 8009b56 <__i2b+0x1a>
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <__i2b+0x24>)
 8009b4c:	4805      	ldr	r0, [pc, #20]	; (8009b64 <__i2b+0x28>)
 8009b4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b52:	f000 fdab 	bl	800a6ac <__assert_func>
 8009b56:	2301      	movs	r3, #1
 8009b58:	6144      	str	r4, [r0, #20]
 8009b5a:	6103      	str	r3, [r0, #16]
 8009b5c:	bd10      	pop	{r4, pc}
 8009b5e:	bf00      	nop
 8009b60:	0800b5e4 	.word	0x0800b5e4
 8009b64:	0800b674 	.word	0x0800b674

08009b68 <__multiply>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	690a      	ldr	r2, [r1, #16]
 8009b70:	6923      	ldr	r3, [r4, #16]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	bfb8      	it	lt
 8009b76:	460b      	movlt	r3, r1
 8009b78:	460d      	mov	r5, r1
 8009b7a:	bfbc      	itt	lt
 8009b7c:	4625      	movlt	r5, r4
 8009b7e:	461c      	movlt	r4, r3
 8009b80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b88:	68ab      	ldr	r3, [r5, #8]
 8009b8a:	6869      	ldr	r1, [r5, #4]
 8009b8c:	eb0a 0709 	add.w	r7, sl, r9
 8009b90:	42bb      	cmp	r3, r7
 8009b92:	b085      	sub	sp, #20
 8009b94:	bfb8      	it	lt
 8009b96:	3101      	addlt	r1, #1
 8009b98:	f7ff fe8c 	bl	80098b4 <_Balloc>
 8009b9c:	b930      	cbnz	r0, 8009bac <__multiply+0x44>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	4b42      	ldr	r3, [pc, #264]	; (8009cac <__multiply+0x144>)
 8009ba2:	4843      	ldr	r0, [pc, #268]	; (8009cb0 <__multiply+0x148>)
 8009ba4:	f240 115d 	movw	r1, #349	; 0x15d
 8009ba8:	f000 fd80 	bl	800a6ac <__assert_func>
 8009bac:	f100 0614 	add.w	r6, r0, #20
 8009bb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009bb4:	4633      	mov	r3, r6
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4543      	cmp	r3, r8
 8009bba:	d31e      	bcc.n	8009bfa <__multiply+0x92>
 8009bbc:	f105 0c14 	add.w	ip, r5, #20
 8009bc0:	f104 0314 	add.w	r3, r4, #20
 8009bc4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009bc8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009bcc:	9202      	str	r2, [sp, #8]
 8009bce:	ebac 0205 	sub.w	r2, ip, r5
 8009bd2:	3a15      	subs	r2, #21
 8009bd4:	f022 0203 	bic.w	r2, r2, #3
 8009bd8:	3204      	adds	r2, #4
 8009bda:	f105 0115 	add.w	r1, r5, #21
 8009bde:	458c      	cmp	ip, r1
 8009be0:	bf38      	it	cc
 8009be2:	2204      	movcc	r2, #4
 8009be4:	9201      	str	r2, [sp, #4]
 8009be6:	9a02      	ldr	r2, [sp, #8]
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d808      	bhi.n	8009c00 <__multiply+0x98>
 8009bee:	2f00      	cmp	r7, #0
 8009bf0:	dc55      	bgt.n	8009c9e <__multiply+0x136>
 8009bf2:	6107      	str	r7, [r0, #16]
 8009bf4:	b005      	add	sp, #20
 8009bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfa:	f843 2b04 	str.w	r2, [r3], #4
 8009bfe:	e7db      	b.n	8009bb8 <__multiply+0x50>
 8009c00:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c04:	f1ba 0f00 	cmp.w	sl, #0
 8009c08:	d020      	beq.n	8009c4c <__multiply+0xe4>
 8009c0a:	f105 0e14 	add.w	lr, r5, #20
 8009c0e:	46b1      	mov	r9, r6
 8009c10:	2200      	movs	r2, #0
 8009c12:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c16:	f8d9 b000 	ldr.w	fp, [r9]
 8009c1a:	b2a1      	uxth	r1, r4
 8009c1c:	fa1f fb8b 	uxth.w	fp, fp
 8009c20:	fb0a b101 	mla	r1, sl, r1, fp
 8009c24:	4411      	add	r1, r2
 8009c26:	f8d9 2000 	ldr.w	r2, [r9]
 8009c2a:	0c24      	lsrs	r4, r4, #16
 8009c2c:	0c12      	lsrs	r2, r2, #16
 8009c2e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c36:	b289      	uxth	r1, r1
 8009c38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c3c:	45f4      	cmp	ip, lr
 8009c3e:	f849 1b04 	str.w	r1, [r9], #4
 8009c42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c46:	d8e4      	bhi.n	8009c12 <__multiply+0xaa>
 8009c48:	9901      	ldr	r1, [sp, #4]
 8009c4a:	5072      	str	r2, [r6, r1]
 8009c4c:	9a03      	ldr	r2, [sp, #12]
 8009c4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c52:	3304      	adds	r3, #4
 8009c54:	f1b9 0f00 	cmp.w	r9, #0
 8009c58:	d01f      	beq.n	8009c9a <__multiply+0x132>
 8009c5a:	6834      	ldr	r4, [r6, #0]
 8009c5c:	f105 0114 	add.w	r1, r5, #20
 8009c60:	46b6      	mov	lr, r6
 8009c62:	f04f 0a00 	mov.w	sl, #0
 8009c66:	880a      	ldrh	r2, [r1, #0]
 8009c68:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c6c:	fb09 b202 	mla	r2, r9, r2, fp
 8009c70:	4492      	add	sl, r2
 8009c72:	b2a4      	uxth	r4, r4
 8009c74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009c78:	f84e 4b04 	str.w	r4, [lr], #4
 8009c7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009c80:	f8be 2000 	ldrh.w	r2, [lr]
 8009c84:	0c24      	lsrs	r4, r4, #16
 8009c86:	fb09 2404 	mla	r4, r9, r4, r2
 8009c8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009c8e:	458c      	cmp	ip, r1
 8009c90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c94:	d8e7      	bhi.n	8009c66 <__multiply+0xfe>
 8009c96:	9a01      	ldr	r2, [sp, #4]
 8009c98:	50b4      	str	r4, [r6, r2]
 8009c9a:	3604      	adds	r6, #4
 8009c9c:	e7a3      	b.n	8009be6 <__multiply+0x7e>
 8009c9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1a5      	bne.n	8009bf2 <__multiply+0x8a>
 8009ca6:	3f01      	subs	r7, #1
 8009ca8:	e7a1      	b.n	8009bee <__multiply+0x86>
 8009caa:	bf00      	nop
 8009cac:	0800b5e4 	.word	0x0800b5e4
 8009cb0:	0800b674 	.word	0x0800b674

08009cb4 <__pow5mult>:
 8009cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	4615      	mov	r5, r2
 8009cba:	f012 0203 	ands.w	r2, r2, #3
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460f      	mov	r7, r1
 8009cc2:	d007      	beq.n	8009cd4 <__pow5mult+0x20>
 8009cc4:	4c25      	ldr	r4, [pc, #148]	; (8009d5c <__pow5mult+0xa8>)
 8009cc6:	3a01      	subs	r2, #1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cce:	f7ff fe53 	bl	8009978 <__multadd>
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	10ad      	asrs	r5, r5, #2
 8009cd6:	d03d      	beq.n	8009d54 <__pow5mult+0xa0>
 8009cd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cda:	b97c      	cbnz	r4, 8009cfc <__pow5mult+0x48>
 8009cdc:	2010      	movs	r0, #16
 8009cde:	f7ff fdc1 	bl	8009864 <malloc>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ce6:	b928      	cbnz	r0, 8009cf4 <__pow5mult+0x40>
 8009ce8:	4b1d      	ldr	r3, [pc, #116]	; (8009d60 <__pow5mult+0xac>)
 8009cea:	481e      	ldr	r0, [pc, #120]	; (8009d64 <__pow5mult+0xb0>)
 8009cec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009cf0:	f000 fcdc 	bl	800a6ac <__assert_func>
 8009cf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cf8:	6004      	str	r4, [r0, #0]
 8009cfa:	60c4      	str	r4, [r0, #12]
 8009cfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d04:	b94c      	cbnz	r4, 8009d1a <__pow5mult+0x66>
 8009d06:	f240 2171 	movw	r1, #625	; 0x271
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ff16 	bl	8009b3c <__i2b>
 8009d10:	2300      	movs	r3, #0
 8009d12:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d16:	4604      	mov	r4, r0
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	f04f 0900 	mov.w	r9, #0
 8009d1e:	07eb      	lsls	r3, r5, #31
 8009d20:	d50a      	bpl.n	8009d38 <__pow5mult+0x84>
 8009d22:	4639      	mov	r1, r7
 8009d24:	4622      	mov	r2, r4
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff ff1e 	bl	8009b68 <__multiply>
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	4680      	mov	r8, r0
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff fdff 	bl	8009934 <_Bfree>
 8009d36:	4647      	mov	r7, r8
 8009d38:	106d      	asrs	r5, r5, #1
 8009d3a:	d00b      	beq.n	8009d54 <__pow5mult+0xa0>
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	b938      	cbnz	r0, 8009d50 <__pow5mult+0x9c>
 8009d40:	4622      	mov	r2, r4
 8009d42:	4621      	mov	r1, r4
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff ff0f 	bl	8009b68 <__multiply>
 8009d4a:	6020      	str	r0, [r4, #0]
 8009d4c:	f8c0 9000 	str.w	r9, [r0]
 8009d50:	4604      	mov	r4, r0
 8009d52:	e7e4      	b.n	8009d1e <__pow5mult+0x6a>
 8009d54:	4638      	mov	r0, r7
 8009d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0800b7c8 	.word	0x0800b7c8
 8009d60:	0800b56e 	.word	0x0800b56e
 8009d64:	0800b674 	.word	0x0800b674

08009d68 <__lshift>:
 8009d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	6849      	ldr	r1, [r1, #4]
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d76:	68a3      	ldr	r3, [r4, #8]
 8009d78:	4607      	mov	r7, r0
 8009d7a:	4691      	mov	r9, r2
 8009d7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d80:	f108 0601 	add.w	r6, r8, #1
 8009d84:	42b3      	cmp	r3, r6
 8009d86:	db0b      	blt.n	8009da0 <__lshift+0x38>
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f7ff fd93 	bl	80098b4 <_Balloc>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	b948      	cbnz	r0, 8009da6 <__lshift+0x3e>
 8009d92:	4602      	mov	r2, r0
 8009d94:	4b28      	ldr	r3, [pc, #160]	; (8009e38 <__lshift+0xd0>)
 8009d96:	4829      	ldr	r0, [pc, #164]	; (8009e3c <__lshift+0xd4>)
 8009d98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d9c:	f000 fc86 	bl	800a6ac <__assert_func>
 8009da0:	3101      	adds	r1, #1
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	e7ee      	b.n	8009d84 <__lshift+0x1c>
 8009da6:	2300      	movs	r3, #0
 8009da8:	f100 0114 	add.w	r1, r0, #20
 8009dac:	f100 0210 	add.w	r2, r0, #16
 8009db0:	4618      	mov	r0, r3
 8009db2:	4553      	cmp	r3, sl
 8009db4:	db33      	blt.n	8009e1e <__lshift+0xb6>
 8009db6:	6920      	ldr	r0, [r4, #16]
 8009db8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dbc:	f104 0314 	add.w	r3, r4, #20
 8009dc0:	f019 091f 	ands.w	r9, r9, #31
 8009dc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dcc:	d02b      	beq.n	8009e26 <__lshift+0xbe>
 8009dce:	f1c9 0e20 	rsb	lr, r9, #32
 8009dd2:	468a      	mov	sl, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	fa00 f009 	lsl.w	r0, r0, r9
 8009ddc:	4302      	orrs	r2, r0
 8009dde:	f84a 2b04 	str.w	r2, [sl], #4
 8009de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de6:	459c      	cmp	ip, r3
 8009de8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dec:	d8f3      	bhi.n	8009dd6 <__lshift+0x6e>
 8009dee:	ebac 0304 	sub.w	r3, ip, r4
 8009df2:	3b15      	subs	r3, #21
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	3304      	adds	r3, #4
 8009dfa:	f104 0015 	add.w	r0, r4, #21
 8009dfe:	4584      	cmp	ip, r0
 8009e00:	bf38      	it	cc
 8009e02:	2304      	movcc	r3, #4
 8009e04:	50ca      	str	r2, [r1, r3]
 8009e06:	b10a      	cbz	r2, 8009e0c <__lshift+0xa4>
 8009e08:	f108 0602 	add.w	r6, r8, #2
 8009e0c:	3e01      	subs	r6, #1
 8009e0e:	4638      	mov	r0, r7
 8009e10:	612e      	str	r6, [r5, #16]
 8009e12:	4621      	mov	r1, r4
 8009e14:	f7ff fd8e 	bl	8009934 <_Bfree>
 8009e18:	4628      	mov	r0, r5
 8009e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e22:	3301      	adds	r3, #1
 8009e24:	e7c5      	b.n	8009db2 <__lshift+0x4a>
 8009e26:	3904      	subs	r1, #4
 8009e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e30:	459c      	cmp	ip, r3
 8009e32:	d8f9      	bhi.n	8009e28 <__lshift+0xc0>
 8009e34:	e7ea      	b.n	8009e0c <__lshift+0xa4>
 8009e36:	bf00      	nop
 8009e38:	0800b5e4 	.word	0x0800b5e4
 8009e3c:	0800b674 	.word	0x0800b674

08009e40 <__mcmp>:
 8009e40:	690a      	ldr	r2, [r1, #16]
 8009e42:	4603      	mov	r3, r0
 8009e44:	6900      	ldr	r0, [r0, #16]
 8009e46:	1a80      	subs	r0, r0, r2
 8009e48:	b530      	push	{r4, r5, lr}
 8009e4a:	d10d      	bne.n	8009e68 <__mcmp+0x28>
 8009e4c:	3314      	adds	r3, #20
 8009e4e:	3114      	adds	r1, #20
 8009e50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e60:	4295      	cmp	r5, r2
 8009e62:	d002      	beq.n	8009e6a <__mcmp+0x2a>
 8009e64:	d304      	bcc.n	8009e70 <__mcmp+0x30>
 8009e66:	2001      	movs	r0, #1
 8009e68:	bd30      	pop	{r4, r5, pc}
 8009e6a:	42a3      	cmp	r3, r4
 8009e6c:	d3f4      	bcc.n	8009e58 <__mcmp+0x18>
 8009e6e:	e7fb      	b.n	8009e68 <__mcmp+0x28>
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	e7f8      	b.n	8009e68 <__mcmp+0x28>
	...

08009e78 <__mdiff>:
 8009e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	4606      	mov	r6, r0
 8009e80:	4611      	mov	r1, r2
 8009e82:	4620      	mov	r0, r4
 8009e84:	4617      	mov	r7, r2
 8009e86:	f7ff ffdb 	bl	8009e40 <__mcmp>
 8009e8a:	1e05      	subs	r5, r0, #0
 8009e8c:	d111      	bne.n	8009eb2 <__mdiff+0x3a>
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7ff fd0f 	bl	80098b4 <_Balloc>
 8009e96:	4602      	mov	r2, r0
 8009e98:	b928      	cbnz	r0, 8009ea6 <__mdiff+0x2e>
 8009e9a:	4b3a      	ldr	r3, [pc, #232]	; (8009f84 <__mdiff+0x10c>)
 8009e9c:	f240 2132 	movw	r1, #562	; 0x232
 8009ea0:	4839      	ldr	r0, [pc, #228]	; (8009f88 <__mdiff+0x110>)
 8009ea2:	f000 fc03 	bl	800a6ac <__assert_func>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009eac:	4610      	mov	r0, r2
 8009eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	bfa4      	itt	ge
 8009eb4:	463b      	movge	r3, r7
 8009eb6:	4627      	movge	r7, r4
 8009eb8:	4630      	mov	r0, r6
 8009eba:	6879      	ldr	r1, [r7, #4]
 8009ebc:	bfa6      	itte	ge
 8009ebe:	461c      	movge	r4, r3
 8009ec0:	2500      	movge	r5, #0
 8009ec2:	2501      	movlt	r5, #1
 8009ec4:	f7ff fcf6 	bl	80098b4 <_Balloc>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	b918      	cbnz	r0, 8009ed4 <__mdiff+0x5c>
 8009ecc:	4b2d      	ldr	r3, [pc, #180]	; (8009f84 <__mdiff+0x10c>)
 8009ece:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ed2:	e7e5      	b.n	8009ea0 <__mdiff+0x28>
 8009ed4:	693e      	ldr	r6, [r7, #16]
 8009ed6:	60c5      	str	r5, [r0, #12]
 8009ed8:	6925      	ldr	r5, [r4, #16]
 8009eda:	f107 0114 	add.w	r1, r7, #20
 8009ede:	f100 0e14 	add.w	lr, r0, #20
 8009ee2:	f104 0914 	add.w	r9, r4, #20
 8009ee6:	f107 0010 	add.w	r0, r7, #16
 8009eea:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009eee:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ef2:	46f2      	mov	sl, lr
 8009ef4:	2700      	movs	r7, #0
 8009ef6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009efa:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009efe:	fa1f f883 	uxth.w	r8, r3
 8009f02:	fa17 f78b 	uxtah	r7, r7, fp
 8009f06:	0c1b      	lsrs	r3, r3, #16
 8009f08:	eba7 0808 	sub.w	r8, r7, r8
 8009f0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f10:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f14:	fa1f f888 	uxth.w	r8, r8
 8009f18:	141f      	asrs	r7, r3, #16
 8009f1a:	454d      	cmp	r5, r9
 8009f1c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f20:	f84a 3b04 	str.w	r3, [sl], #4
 8009f24:	d8e7      	bhi.n	8009ef6 <__mdiff+0x7e>
 8009f26:	1b2b      	subs	r3, r5, r4
 8009f28:	3b15      	subs	r3, #21
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	3304      	adds	r3, #4
 8009f30:	3415      	adds	r4, #21
 8009f32:	42a5      	cmp	r5, r4
 8009f34:	bf38      	it	cc
 8009f36:	2304      	movcc	r3, #4
 8009f38:	4419      	add	r1, r3
 8009f3a:	4473      	add	r3, lr
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	460d      	mov	r5, r1
 8009f40:	4565      	cmp	r5, ip
 8009f42:	d30e      	bcc.n	8009f62 <__mdiff+0xea>
 8009f44:	f10c 0003 	add.w	r0, ip, #3
 8009f48:	1a40      	subs	r0, r0, r1
 8009f4a:	f020 0003 	bic.w	r0, r0, #3
 8009f4e:	3903      	subs	r1, #3
 8009f50:	458c      	cmp	ip, r1
 8009f52:	bf38      	it	cc
 8009f54:	2000      	movcc	r0, #0
 8009f56:	4418      	add	r0, r3
 8009f58:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8009f5c:	b17b      	cbz	r3, 8009f7e <__mdiff+0x106>
 8009f5e:	6116      	str	r6, [r2, #16]
 8009f60:	e7a4      	b.n	8009eac <__mdiff+0x34>
 8009f62:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f66:	fa17 f488 	uxtah	r4, r7, r8
 8009f6a:	1420      	asrs	r0, r4, #16
 8009f6c:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009f70:	b2a4      	uxth	r4, r4
 8009f72:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8009f76:	f84e 4b04 	str.w	r4, [lr], #4
 8009f7a:	1407      	asrs	r7, r0, #16
 8009f7c:	e7e0      	b.n	8009f40 <__mdiff+0xc8>
 8009f7e:	3e01      	subs	r6, #1
 8009f80:	e7ea      	b.n	8009f58 <__mdiff+0xe0>
 8009f82:	bf00      	nop
 8009f84:	0800b5e4 	.word	0x0800b5e4
 8009f88:	0800b674 	.word	0x0800b674

08009f8c <__ulp>:
 8009f8c:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <__ulp+0x48>)
 8009f8e:	400b      	ands	r3, r1
 8009f90:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd02      	ble.n	8009f9e <__ulp+0x12>
 8009f98:	2000      	movs	r0, #0
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4770      	bx	lr
 8009f9e:	425b      	negs	r3, r3
 8009fa0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009fa4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fa8:	f04f 0000 	mov.w	r0, #0
 8009fac:	f04f 0100 	mov.w	r1, #0
 8009fb0:	da04      	bge.n	8009fbc <__ulp+0x30>
 8009fb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009fb6:	fa43 f102 	asr.w	r1, r3, r2
 8009fba:	4770      	bx	lr
 8009fbc:	f1a2 0314 	sub.w	r3, r2, #20
 8009fc0:	2b1e      	cmp	r3, #30
 8009fc2:	bfda      	itte	le
 8009fc4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009fc8:	fa22 f303 	lsrle.w	r3, r2, r3
 8009fcc:	2301      	movgt	r3, #1
 8009fce:	4618      	mov	r0, r3
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	7ff00000 	.word	0x7ff00000

08009fd8 <__b2d>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	6907      	ldr	r7, [r0, #16]
 8009fde:	f100 0914 	add.w	r9, r0, #20
 8009fe2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009fe6:	f1a7 0804 	sub.w	r8, r7, #4
 8009fea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f7ff fd56 	bl	8009aa0 <__hi0bits>
 8009ff4:	f1c0 0320 	rsb	r3, r0, #32
 8009ff8:	280a      	cmp	r0, #10
 8009ffa:	600b      	str	r3, [r1, #0]
 8009ffc:	491f      	ldr	r1, [pc, #124]	; (800a07c <__b2d+0xa4>)
 8009ffe:	dc17      	bgt.n	800a030 <__b2d+0x58>
 800a000:	f1c0 0c0b 	rsb	ip, r0, #11
 800a004:	45c1      	cmp	r9, r8
 800a006:	fa26 f30c 	lsr.w	r3, r6, ip
 800a00a:	bf38      	it	cc
 800a00c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a010:	ea43 0501 	orr.w	r5, r3, r1
 800a014:	bf28      	it	cs
 800a016:	2200      	movcs	r2, #0
 800a018:	f100 0315 	add.w	r3, r0, #21
 800a01c:	fa06 f303 	lsl.w	r3, r6, r3
 800a020:	fa22 f20c 	lsr.w	r2, r2, ip
 800a024:	ea43 0402 	orr.w	r4, r3, r2
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a030:	45c1      	cmp	r9, r8
 800a032:	bf3a      	itte	cc
 800a034:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a038:	f1a7 0808 	subcc.w	r8, r7, #8
 800a03c:	2200      	movcs	r2, #0
 800a03e:	f1b0 030b 	subs.w	r3, r0, #11
 800a042:	d016      	beq.n	800a072 <__b2d+0x9a>
 800a044:	f1c3 0720 	rsb	r7, r3, #32
 800a048:	fa22 f107 	lsr.w	r1, r2, r7
 800a04c:	45c8      	cmp	r8, r9
 800a04e:	fa06 f603 	lsl.w	r6, r6, r3
 800a052:	ea46 0601 	orr.w	r6, r6, r1
 800a056:	bf8c      	ite	hi
 800a058:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a05c:	2100      	movls	r1, #0
 800a05e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a062:	fa02 f003 	lsl.w	r0, r2, r3
 800a066:	40f9      	lsrs	r1, r7
 800a068:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a06c:	ea40 0401 	orr.w	r4, r0, r1
 800a070:	e7da      	b.n	800a028 <__b2d+0x50>
 800a072:	ea46 0501 	orr.w	r5, r6, r1
 800a076:	4614      	mov	r4, r2
 800a078:	e7d6      	b.n	800a028 <__b2d+0x50>
 800a07a:	bf00      	nop
 800a07c:	3ff00000 	.word	0x3ff00000

0800a080 <__d2b>:
 800a080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a084:	2101      	movs	r1, #1
 800a086:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a08a:	4690      	mov	r8, r2
 800a08c:	461d      	mov	r5, r3
 800a08e:	f7ff fc11 	bl	80098b4 <_Balloc>
 800a092:	4604      	mov	r4, r0
 800a094:	b930      	cbnz	r0, 800a0a4 <__d2b+0x24>
 800a096:	4602      	mov	r2, r0
 800a098:	4b25      	ldr	r3, [pc, #148]	; (800a130 <__d2b+0xb0>)
 800a09a:	4826      	ldr	r0, [pc, #152]	; (800a134 <__d2b+0xb4>)
 800a09c:	f240 310a 	movw	r1, #778	; 0x30a
 800a0a0:	f000 fb04 	bl	800a6ac <__assert_func>
 800a0a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a0a8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a0ac:	bb2d      	cbnz	r5, 800a0fa <__d2b+0x7a>
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	f1b8 0300 	subs.w	r3, r8, #0
 800a0b4:	d026      	beq.n	800a104 <__d2b+0x84>
 800a0b6:	4668      	mov	r0, sp
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	f7ff fd11 	bl	8009ae0 <__lo0bits>
 800a0be:	9900      	ldr	r1, [sp, #0]
 800a0c0:	b1f0      	cbz	r0, 800a100 <__d2b+0x80>
 800a0c2:	9a01      	ldr	r2, [sp, #4]
 800a0c4:	f1c0 0320 	rsb	r3, r0, #32
 800a0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0cc:	430b      	orrs	r3, r1
 800a0ce:	40c2      	lsrs	r2, r0
 800a0d0:	6163      	str	r3, [r4, #20]
 800a0d2:	9201      	str	r2, [sp, #4]
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	61a3      	str	r3, [r4, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	bf14      	ite	ne
 800a0dc:	2102      	movne	r1, #2
 800a0de:	2101      	moveq	r1, #1
 800a0e0:	6121      	str	r1, [r4, #16]
 800a0e2:	b1c5      	cbz	r5, 800a116 <__d2b+0x96>
 800a0e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0e8:	4405      	add	r5, r0
 800a0ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0ee:	603d      	str	r5, [r7, #0]
 800a0f0:	6030      	str	r0, [r6, #0]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	b002      	add	sp, #8
 800a0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0fe:	e7d6      	b.n	800a0ae <__d2b+0x2e>
 800a100:	6161      	str	r1, [r4, #20]
 800a102:	e7e7      	b.n	800a0d4 <__d2b+0x54>
 800a104:	a801      	add	r0, sp, #4
 800a106:	f7ff fceb 	bl	8009ae0 <__lo0bits>
 800a10a:	9b01      	ldr	r3, [sp, #4]
 800a10c:	6163      	str	r3, [r4, #20]
 800a10e:	2101      	movs	r1, #1
 800a110:	6121      	str	r1, [r4, #16]
 800a112:	3020      	adds	r0, #32
 800a114:	e7e5      	b.n	800a0e2 <__d2b+0x62>
 800a116:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a11a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a11e:	6038      	str	r0, [r7, #0]
 800a120:	6918      	ldr	r0, [r3, #16]
 800a122:	f7ff fcbd 	bl	8009aa0 <__hi0bits>
 800a126:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a12a:	6031      	str	r1, [r6, #0]
 800a12c:	e7e1      	b.n	800a0f2 <__d2b+0x72>
 800a12e:	bf00      	nop
 800a130:	0800b5e4 	.word	0x0800b5e4
 800a134:	0800b674 	.word	0x0800b674

0800a138 <__ratio>:
 800a138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	4688      	mov	r8, r1
 800a13e:	4669      	mov	r1, sp
 800a140:	4681      	mov	r9, r0
 800a142:	f7ff ff49 	bl	8009fd8 <__b2d>
 800a146:	460f      	mov	r7, r1
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	4640      	mov	r0, r8
 800a14e:	a901      	add	r1, sp, #4
 800a150:	f7ff ff42 	bl	8009fd8 <__b2d>
 800a154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a158:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a15c:	eba3 0c02 	sub.w	ip, r3, r2
 800a160:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	bfd5      	itete	le
 800a16e:	460a      	movle	r2, r1
 800a170:	462a      	movgt	r2, r5
 800a172:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a176:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a17a:	468b      	mov	fp, r1
 800a17c:	bfd8      	it	le
 800a17e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a182:	465b      	mov	r3, fp
 800a184:	4602      	mov	r2, r0
 800a186:	4639      	mov	r1, r7
 800a188:	4620      	mov	r0, r4
 800a18a:	f7f6 fb37 	bl	80007fc <__aeabi_ddiv>
 800a18e:	b003      	add	sp, #12
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a194 <__copybits>:
 800a194:	3901      	subs	r1, #1
 800a196:	b570      	push	{r4, r5, r6, lr}
 800a198:	1149      	asrs	r1, r1, #5
 800a19a:	6914      	ldr	r4, [r2, #16]
 800a19c:	3101      	adds	r1, #1
 800a19e:	f102 0314 	add.w	r3, r2, #20
 800a1a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1aa:	1f05      	subs	r5, r0, #4
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	d30c      	bcc.n	800a1ca <__copybits+0x36>
 800a1b0:	1aa3      	subs	r3, r4, r2
 800a1b2:	3b11      	subs	r3, #17
 800a1b4:	f023 0303 	bic.w	r3, r3, #3
 800a1b8:	3211      	adds	r2, #17
 800a1ba:	42a2      	cmp	r2, r4
 800a1bc:	bf88      	it	hi
 800a1be:	2300      	movhi	r3, #0
 800a1c0:	4418      	add	r0, r3
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4288      	cmp	r0, r1
 800a1c6:	d305      	bcc.n	800a1d4 <__copybits+0x40>
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1d2:	e7eb      	b.n	800a1ac <__copybits+0x18>
 800a1d4:	f840 3b04 	str.w	r3, [r0], #4
 800a1d8:	e7f4      	b.n	800a1c4 <__copybits+0x30>

0800a1da <__any_on>:
 800a1da:	f100 0214 	add.w	r2, r0, #20
 800a1de:	6900      	ldr	r0, [r0, #16]
 800a1e0:	114b      	asrs	r3, r1, #5
 800a1e2:	4298      	cmp	r0, r3
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	db11      	blt.n	800a20c <__any_on+0x32>
 800a1e8:	dd0a      	ble.n	800a200 <__any_on+0x26>
 800a1ea:	f011 011f 	ands.w	r1, r1, #31
 800a1ee:	d007      	beq.n	800a200 <__any_on+0x26>
 800a1f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1f4:	fa24 f001 	lsr.w	r0, r4, r1
 800a1f8:	fa00 f101 	lsl.w	r1, r0, r1
 800a1fc:	428c      	cmp	r4, r1
 800a1fe:	d10b      	bne.n	800a218 <__any_on+0x3e>
 800a200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a204:	4293      	cmp	r3, r2
 800a206:	d803      	bhi.n	800a210 <__any_on+0x36>
 800a208:	2000      	movs	r0, #0
 800a20a:	bd10      	pop	{r4, pc}
 800a20c:	4603      	mov	r3, r0
 800a20e:	e7f7      	b.n	800a200 <__any_on+0x26>
 800a210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a214:	2900      	cmp	r1, #0
 800a216:	d0f5      	beq.n	800a204 <__any_on+0x2a>
 800a218:	2001      	movs	r0, #1
 800a21a:	e7f6      	b.n	800a20a <__any_on+0x30>

0800a21c <_calloc_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	fb02 f501 	mul.w	r5, r2, r1
 800a222:	4629      	mov	r1, r5
 800a224:	f000 f856 	bl	800a2d4 <_malloc_r>
 800a228:	4604      	mov	r4, r0
 800a22a:	b118      	cbz	r0, 800a234 <_calloc_r+0x18>
 800a22c:	462a      	mov	r2, r5
 800a22e:	2100      	movs	r1, #0
 800a230:	f7fc fbf6 	bl	8006a20 <memset>
 800a234:	4620      	mov	r0, r4
 800a236:	bd38      	pop	{r3, r4, r5, pc}

0800a238 <_free_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4605      	mov	r5, r0
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d045      	beq.n	800a2cc <_free_r+0x94>
 800a240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a244:	1f0c      	subs	r4, r1, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	bfb8      	it	lt
 800a24a:	18e4      	addlt	r4, r4, r3
 800a24c:	f000 fa78 	bl	800a740 <__malloc_lock>
 800a250:	4a1f      	ldr	r2, [pc, #124]	; (800a2d0 <_free_r+0x98>)
 800a252:	6813      	ldr	r3, [r2, #0]
 800a254:	4610      	mov	r0, r2
 800a256:	b933      	cbnz	r3, 800a266 <_free_r+0x2e>
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	6014      	str	r4, [r2, #0]
 800a25c:	4628      	mov	r0, r5
 800a25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a262:	f000 ba73 	b.w	800a74c <__malloc_unlock>
 800a266:	42a3      	cmp	r3, r4
 800a268:	d90b      	bls.n	800a282 <_free_r+0x4a>
 800a26a:	6821      	ldr	r1, [r4, #0]
 800a26c:	1862      	adds	r2, r4, r1
 800a26e:	4293      	cmp	r3, r2
 800a270:	bf04      	itt	eq
 800a272:	681a      	ldreq	r2, [r3, #0]
 800a274:	685b      	ldreq	r3, [r3, #4]
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	bf04      	itt	eq
 800a27a:	1852      	addeq	r2, r2, r1
 800a27c:	6022      	streq	r2, [r4, #0]
 800a27e:	6004      	str	r4, [r0, #0]
 800a280:	e7ec      	b.n	800a25c <_free_r+0x24>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x54>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x4a>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1850      	adds	r0, r2, r1
 800a290:	42a0      	cmp	r0, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x74>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	4401      	add	r1, r0
 800a298:	1850      	adds	r0, r2, r1
 800a29a:	4283      	cmp	r3, r0
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1dd      	bne.n	800a25c <_free_r+0x24>
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	6053      	str	r3, [r2, #4]
 800a2a6:	4401      	add	r1, r0
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	e7d7      	b.n	800a25c <_free_r+0x24>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x7c>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	e7d3      	b.n	800a25c <_free_r+0x24>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	1821      	adds	r1, r4, r0
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf04      	itt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	bf04      	itt	eq
 800a2c4:	1809      	addeq	r1, r1, r0
 800a2c6:	6021      	streq	r1, [r4, #0]
 800a2c8:	6054      	str	r4, [r2, #4]
 800a2ca:	e7c7      	b.n	800a25c <_free_r+0x24>
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000218 	.word	0x20000218

0800a2d4 <_malloc_r>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	1ccd      	adds	r5, r1, #3
 800a2d8:	f025 0503 	bic.w	r5, r5, #3
 800a2dc:	3508      	adds	r5, #8
 800a2de:	2d0c      	cmp	r5, #12
 800a2e0:	bf38      	it	cc
 800a2e2:	250c      	movcc	r5, #12
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	db01      	blt.n	800a2ee <_malloc_r+0x1a>
 800a2ea:	42a9      	cmp	r1, r5
 800a2ec:	d903      	bls.n	800a2f6 <_malloc_r+0x22>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	6033      	str	r3, [r6, #0]
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f6:	f000 fa23 	bl	800a740 <__malloc_lock>
 800a2fa:	4921      	ldr	r1, [pc, #132]	; (800a380 <_malloc_r+0xac>)
 800a2fc:	680a      	ldr	r2, [r1, #0]
 800a2fe:	4614      	mov	r4, r2
 800a300:	b99c      	cbnz	r4, 800a32a <_malloc_r+0x56>
 800a302:	4f20      	ldr	r7, [pc, #128]	; (800a384 <_malloc_r+0xb0>)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	b923      	cbnz	r3, 800a312 <_malloc_r+0x3e>
 800a308:	4621      	mov	r1, r4
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 f99e 	bl	800a64c <_sbrk_r>
 800a310:	6038      	str	r0, [r7, #0]
 800a312:	4629      	mov	r1, r5
 800a314:	4630      	mov	r0, r6
 800a316:	f000 f999 	bl	800a64c <_sbrk_r>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d123      	bne.n	800a366 <_malloc_r+0x92>
 800a31e:	230c      	movs	r3, #12
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	4630      	mov	r0, r6
 800a324:	f000 fa12 	bl	800a74c <__malloc_unlock>
 800a328:	e7e3      	b.n	800a2f2 <_malloc_r+0x1e>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	1b5b      	subs	r3, r3, r5
 800a32e:	d417      	bmi.n	800a360 <_malloc_r+0x8c>
 800a330:	2b0b      	cmp	r3, #11
 800a332:	d903      	bls.n	800a33c <_malloc_r+0x68>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	441c      	add	r4, r3
 800a338:	6025      	str	r5, [r4, #0]
 800a33a:	e004      	b.n	800a346 <_malloc_r+0x72>
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	42a2      	cmp	r2, r4
 800a340:	bf0c      	ite	eq
 800a342:	600b      	streq	r3, [r1, #0]
 800a344:	6053      	strne	r3, [r2, #4]
 800a346:	4630      	mov	r0, r6
 800a348:	f000 fa00 	bl	800a74c <__malloc_unlock>
 800a34c:	f104 000b 	add.w	r0, r4, #11
 800a350:	1d23      	adds	r3, r4, #4
 800a352:	f020 0007 	bic.w	r0, r0, #7
 800a356:	1ac2      	subs	r2, r0, r3
 800a358:	d0cc      	beq.n	800a2f4 <_malloc_r+0x20>
 800a35a:	1a1b      	subs	r3, r3, r0
 800a35c:	50a3      	str	r3, [r4, r2]
 800a35e:	e7c9      	b.n	800a2f4 <_malloc_r+0x20>
 800a360:	4622      	mov	r2, r4
 800a362:	6864      	ldr	r4, [r4, #4]
 800a364:	e7cc      	b.n	800a300 <_malloc_r+0x2c>
 800a366:	1cc4      	adds	r4, r0, #3
 800a368:	f024 0403 	bic.w	r4, r4, #3
 800a36c:	42a0      	cmp	r0, r4
 800a36e:	d0e3      	beq.n	800a338 <_malloc_r+0x64>
 800a370:	1a21      	subs	r1, r4, r0
 800a372:	4630      	mov	r0, r6
 800a374:	f000 f96a 	bl	800a64c <_sbrk_r>
 800a378:	3001      	adds	r0, #1
 800a37a:	d1dd      	bne.n	800a338 <_malloc_r+0x64>
 800a37c:	e7cf      	b.n	800a31e <_malloc_r+0x4a>
 800a37e:	bf00      	nop
 800a380:	20000218 	.word	0x20000218
 800a384:	2000021c 	.word	0x2000021c

0800a388 <__ssputs_r>:
 800a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a38c:	688e      	ldr	r6, [r1, #8]
 800a38e:	429e      	cmp	r6, r3
 800a390:	4682      	mov	sl, r0
 800a392:	460c      	mov	r4, r1
 800a394:	4690      	mov	r8, r2
 800a396:	461f      	mov	r7, r3
 800a398:	d838      	bhi.n	800a40c <__ssputs_r+0x84>
 800a39a:	898a      	ldrh	r2, [r1, #12]
 800a39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a0:	d032      	beq.n	800a408 <__ssputs_r+0x80>
 800a3a2:	6825      	ldr	r5, [r4, #0]
 800a3a4:	6909      	ldr	r1, [r1, #16]
 800a3a6:	eba5 0901 	sub.w	r9, r5, r1
 800a3aa:	6965      	ldr	r5, [r4, #20]
 800a3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	444b      	add	r3, r9
 800a3b8:	106d      	asrs	r5, r5, #1
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	bf38      	it	cc
 800a3be:	461d      	movcc	r5, r3
 800a3c0:	0553      	lsls	r3, r2, #21
 800a3c2:	d531      	bpl.n	800a428 <__ssputs_r+0xa0>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7ff ff85 	bl	800a2d4 <_malloc_r>
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	b950      	cbnz	r0, 800a3e4 <__ssputs_r+0x5c>
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	f8ca 3000 	str.w	r3, [sl]
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e4:	6921      	ldr	r1, [r4, #16]
 800a3e6:	464a      	mov	r2, r9
 800a3e8:	f7ff fa56 	bl	8009898 <memcpy>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f6:	81a3      	strh	r3, [r4, #12]
 800a3f8:	6126      	str	r6, [r4, #16]
 800a3fa:	6165      	str	r5, [r4, #20]
 800a3fc:	444e      	add	r6, r9
 800a3fe:	eba5 0509 	sub.w	r5, r5, r9
 800a402:	6026      	str	r6, [r4, #0]
 800a404:	60a5      	str	r5, [r4, #8]
 800a406:	463e      	mov	r6, r7
 800a408:	42be      	cmp	r6, r7
 800a40a:	d900      	bls.n	800a40e <__ssputs_r+0x86>
 800a40c:	463e      	mov	r6, r7
 800a40e:	4632      	mov	r2, r6
 800a410:	6820      	ldr	r0, [r4, #0]
 800a412:	4641      	mov	r1, r8
 800a414:	f000 f97a 	bl	800a70c <memmove>
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	1b9b      	subs	r3, r3, r6
 800a41e:	4432      	add	r2, r6
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	2000      	movs	r0, #0
 800a426:	e7db      	b.n	800a3e0 <__ssputs_r+0x58>
 800a428:	462a      	mov	r2, r5
 800a42a:	f000 f995 	bl	800a758 <_realloc_r>
 800a42e:	4606      	mov	r6, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	d1e1      	bne.n	800a3f8 <__ssputs_r+0x70>
 800a434:	6921      	ldr	r1, [r4, #16]
 800a436:	4650      	mov	r0, sl
 800a438:	f7ff fefe 	bl	800a238 <_free_r>
 800a43c:	e7c7      	b.n	800a3ce <__ssputs_r+0x46>
	...

0800a440 <_svfiprintf_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4698      	mov	r8, r3
 800a446:	898b      	ldrh	r3, [r1, #12]
 800a448:	061b      	lsls	r3, r3, #24
 800a44a:	b09d      	sub	sp, #116	; 0x74
 800a44c:	4607      	mov	r7, r0
 800a44e:	460d      	mov	r5, r1
 800a450:	4614      	mov	r4, r2
 800a452:	d50e      	bpl.n	800a472 <_svfiprintf_r+0x32>
 800a454:	690b      	ldr	r3, [r1, #16]
 800a456:	b963      	cbnz	r3, 800a472 <_svfiprintf_r+0x32>
 800a458:	2140      	movs	r1, #64	; 0x40
 800a45a:	f7ff ff3b 	bl	800a2d4 <_malloc_r>
 800a45e:	6028      	str	r0, [r5, #0]
 800a460:	6128      	str	r0, [r5, #16]
 800a462:	b920      	cbnz	r0, 800a46e <_svfiprintf_r+0x2e>
 800a464:	230c      	movs	r3, #12
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	e0d1      	b.n	800a612 <_svfiprintf_r+0x1d2>
 800a46e:	2340      	movs	r3, #64	; 0x40
 800a470:	616b      	str	r3, [r5, #20]
 800a472:	2300      	movs	r3, #0
 800a474:	9309      	str	r3, [sp, #36]	; 0x24
 800a476:	2320      	movs	r3, #32
 800a478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a47c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a480:	2330      	movs	r3, #48	; 0x30
 800a482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a62c <_svfiprintf_r+0x1ec>
 800a486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48a:	f04f 0901 	mov.w	r9, #1
 800a48e:	4623      	mov	r3, r4
 800a490:	469a      	mov	sl, r3
 800a492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a496:	b10a      	cbz	r2, 800a49c <_svfiprintf_r+0x5c>
 800a498:	2a25      	cmp	r2, #37	; 0x25
 800a49a:	d1f9      	bne.n	800a490 <_svfiprintf_r+0x50>
 800a49c:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a0:	d00b      	beq.n	800a4ba <_svfiprintf_r+0x7a>
 800a4a2:	465b      	mov	r3, fp
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff ff6d 	bl	800a388 <__ssputs_r>
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f000 80aa 	beq.w	800a608 <_svfiprintf_r+0x1c8>
 800a4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b6:	445a      	add	r2, fp
 800a4b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 80a2 	beq.w	800a608 <_svfiprintf_r+0x1c8>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ce:	f10a 0a01 	add.w	sl, sl, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	9307      	str	r3, [sp, #28]
 800a4d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4da:	931a      	str	r3, [sp, #104]	; 0x68
 800a4dc:	4654      	mov	r4, sl
 800a4de:	2205      	movs	r2, #5
 800a4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e4:	4851      	ldr	r0, [pc, #324]	; (800a62c <_svfiprintf_r+0x1ec>)
 800a4e6:	f7f5 fe53 	bl	8000190 <memchr>
 800a4ea:	9a04      	ldr	r2, [sp, #16]
 800a4ec:	b9d8      	cbnz	r0, 800a526 <_svfiprintf_r+0xe6>
 800a4ee:	06d0      	lsls	r0, r2, #27
 800a4f0:	bf44      	itt	mi
 800a4f2:	2320      	movmi	r3, #32
 800a4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f8:	0711      	lsls	r1, r2, #28
 800a4fa:	bf44      	itt	mi
 800a4fc:	232b      	movmi	r3, #43	; 0x2b
 800a4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a502:	f89a 3000 	ldrb.w	r3, [sl]
 800a506:	2b2a      	cmp	r3, #42	; 0x2a
 800a508:	d015      	beq.n	800a536 <_svfiprintf_r+0xf6>
 800a50a:	9a07      	ldr	r2, [sp, #28]
 800a50c:	4654      	mov	r4, sl
 800a50e:	2000      	movs	r0, #0
 800a510:	f04f 0c0a 	mov.w	ip, #10
 800a514:	4621      	mov	r1, r4
 800a516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51a:	3b30      	subs	r3, #48	; 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d94e      	bls.n	800a5be <_svfiprintf_r+0x17e>
 800a520:	b1b0      	cbz	r0, 800a550 <_svfiprintf_r+0x110>
 800a522:	9207      	str	r2, [sp, #28]
 800a524:	e014      	b.n	800a550 <_svfiprintf_r+0x110>
 800a526:	eba0 0308 	sub.w	r3, r0, r8
 800a52a:	fa09 f303 	lsl.w	r3, r9, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	46a2      	mov	sl, r4
 800a534:	e7d2      	b.n	800a4dc <_svfiprintf_r+0x9c>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	1d19      	adds	r1, r3, #4
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	9103      	str	r1, [sp, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfbb      	ittet	lt
 800a542:	425b      	neglt	r3, r3
 800a544:	f042 0202 	orrlt.w	r2, r2, #2
 800a548:	9307      	strge	r3, [sp, #28]
 800a54a:	9307      	strlt	r3, [sp, #28]
 800a54c:	bfb8      	it	lt
 800a54e:	9204      	strlt	r2, [sp, #16]
 800a550:	7823      	ldrb	r3, [r4, #0]
 800a552:	2b2e      	cmp	r3, #46	; 0x2e
 800a554:	d10c      	bne.n	800a570 <_svfiprintf_r+0x130>
 800a556:	7863      	ldrb	r3, [r4, #1]
 800a558:	2b2a      	cmp	r3, #42	; 0x2a
 800a55a:	d135      	bne.n	800a5c8 <_svfiprintf_r+0x188>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	1d1a      	adds	r2, r3, #4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	9203      	str	r2, [sp, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfb8      	it	lt
 800a568:	f04f 33ff 	movlt.w	r3, #4294967295
 800a56c:	3402      	adds	r4, #2
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a63c <_svfiprintf_r+0x1fc>
 800a574:	7821      	ldrb	r1, [r4, #0]
 800a576:	2203      	movs	r2, #3
 800a578:	4650      	mov	r0, sl
 800a57a:	f7f5 fe09 	bl	8000190 <memchr>
 800a57e:	b140      	cbz	r0, 800a592 <_svfiprintf_r+0x152>
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	eba0 000a 	sub.w	r0, r0, sl
 800a586:	fa03 f000 	lsl.w	r0, r3, r0
 800a58a:	9b04      	ldr	r3, [sp, #16]
 800a58c:	4303      	orrs	r3, r0
 800a58e:	3401      	adds	r4, #1
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a596:	4826      	ldr	r0, [pc, #152]	; (800a630 <_svfiprintf_r+0x1f0>)
 800a598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59c:	2206      	movs	r2, #6
 800a59e:	f7f5 fdf7 	bl	8000190 <memchr>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d038      	beq.n	800a618 <_svfiprintf_r+0x1d8>
 800a5a6:	4b23      	ldr	r3, [pc, #140]	; (800a634 <_svfiprintf_r+0x1f4>)
 800a5a8:	bb1b      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x1b2>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	f023 0307 	bic.w	r3, r3, #7
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	9303      	str	r3, [sp, #12]
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	4433      	add	r3, r6
 800a5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a5bc:	e767      	b.n	800a48e <_svfiprintf_r+0x4e>
 800a5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	e7a5      	b.n	800a514 <_svfiprintf_r+0xd4>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	3401      	adds	r4, #1
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f04f 0c0a 	mov.w	ip, #10
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5da:	3a30      	subs	r2, #48	; 0x30
 800a5dc:	2a09      	cmp	r2, #9
 800a5de:	d903      	bls.n	800a5e8 <_svfiprintf_r+0x1a8>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0c5      	beq.n	800a570 <_svfiprintf_r+0x130>
 800a5e4:	9105      	str	r1, [sp, #20]
 800a5e6:	e7c3      	b.n	800a570 <_svfiprintf_r+0x130>
 800a5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e7f0      	b.n	800a5d4 <_svfiprintf_r+0x194>
 800a5f2:	ab03      	add	r3, sp, #12
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	462a      	mov	r2, r5
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <_svfiprintf_r+0x1f8>)
 800a5fa:	a904      	add	r1, sp, #16
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f7fc fab5 	bl	8006b6c <_printf_float>
 800a602:	1c42      	adds	r2, r0, #1
 800a604:	4606      	mov	r6, r0
 800a606:	d1d6      	bne.n	800a5b6 <_svfiprintf_r+0x176>
 800a608:	89ab      	ldrh	r3, [r5, #12]
 800a60a:	065b      	lsls	r3, r3, #25
 800a60c:	f53f af2c 	bmi.w	800a468 <_svfiprintf_r+0x28>
 800a610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a612:	b01d      	add	sp, #116	; 0x74
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	462a      	mov	r2, r5
 800a61e:	4b06      	ldr	r3, [pc, #24]	; (800a638 <_svfiprintf_r+0x1f8>)
 800a620:	a904      	add	r1, sp, #16
 800a622:	4638      	mov	r0, r7
 800a624:	f7fc fd3a 	bl	800709c <_printf_i>
 800a628:	e7eb      	b.n	800a602 <_svfiprintf_r+0x1c2>
 800a62a:	bf00      	nop
 800a62c:	0800b7d4 	.word	0x0800b7d4
 800a630:	0800b7de 	.word	0x0800b7de
 800a634:	08006b6d 	.word	0x08006b6d
 800a638:	0800a389 	.word	0x0800a389
 800a63c:	0800b7da 	.word	0x0800b7da

0800a640 <nan>:
 800a640:	4901      	ldr	r1, [pc, #4]	; (800a648 <nan+0x8>)
 800a642:	2000      	movs	r0, #0
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	7ff80000 	.word	0x7ff80000

0800a64c <_sbrk_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d06      	ldr	r5, [pc, #24]	; (800a668 <_sbrk_r+0x1c>)
 800a650:	2300      	movs	r3, #0
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f7 facc 	bl	8001bf4 <_sbrk>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_sbrk_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_sbrk_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	200003f0 	.word	0x200003f0

0800a66c <strncmp>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	b16a      	cbz	r2, 800a68c <strncmp+0x20>
 800a670:	3901      	subs	r1, #1
 800a672:	1884      	adds	r4, r0, r2
 800a674:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a678:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d103      	bne.n	800a688 <strncmp+0x1c>
 800a680:	42a0      	cmp	r0, r4
 800a682:	d001      	beq.n	800a688 <strncmp+0x1c>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1f5      	bne.n	800a674 <strncmp+0x8>
 800a688:	1a98      	subs	r0, r3, r2
 800a68a:	bd10      	pop	{r4, pc}
 800a68c:	4610      	mov	r0, r2
 800a68e:	e7fc      	b.n	800a68a <strncmp+0x1e>

0800a690 <__ascii_wctomb>:
 800a690:	4603      	mov	r3, r0
 800a692:	4608      	mov	r0, r1
 800a694:	b141      	cbz	r1, 800a6a8 <__ascii_wctomb+0x18>
 800a696:	2aff      	cmp	r2, #255	; 0xff
 800a698:	d904      	bls.n	800a6a4 <__ascii_wctomb+0x14>
 800a69a:	228a      	movs	r2, #138	; 0x8a
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a2:	4770      	bx	lr
 800a6a4:	700a      	strb	r2, [r1, #0]
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	4770      	bx	lr
	...

0800a6ac <__assert_func>:
 800a6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ae:	4614      	mov	r4, r2
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <__assert_func+0x2c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	68d8      	ldr	r0, [r3, #12]
 800a6ba:	b14c      	cbz	r4, 800a6d0 <__assert_func+0x24>
 800a6bc:	4b07      	ldr	r3, [pc, #28]	; (800a6dc <__assert_func+0x30>)
 800a6be:	9100      	str	r1, [sp, #0]
 800a6c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6c4:	4906      	ldr	r1, [pc, #24]	; (800a6e0 <__assert_func+0x34>)
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	f000 f80e 	bl	800a6e8 <fiprintf>
 800a6cc:	f000 fa82 	bl	800abd4 <abort>
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <__assert_func+0x38>)
 800a6d2:	461c      	mov	r4, r3
 800a6d4:	e7f3      	b.n	800a6be <__assert_func+0x12>
 800a6d6:	bf00      	nop
 800a6d8:	2000000c 	.word	0x2000000c
 800a6dc:	0800b7e5 	.word	0x0800b7e5
 800a6e0:	0800b7f2 	.word	0x0800b7f2
 800a6e4:	0800b820 	.word	0x0800b820

0800a6e8 <fiprintf>:
 800a6e8:	b40e      	push	{r1, r2, r3}
 800a6ea:	b503      	push	{r0, r1, lr}
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	ab03      	add	r3, sp, #12
 800a6f0:	4805      	ldr	r0, [pc, #20]	; (800a708 <fiprintf+0x20>)
 800a6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f6:	6800      	ldr	r0, [r0, #0]
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	f000 f87b 	bl	800a7f4 <_vfiprintf_r>
 800a6fe:	b002      	add	sp, #8
 800a700:	f85d eb04 	ldr.w	lr, [sp], #4
 800a704:	b003      	add	sp, #12
 800a706:	4770      	bx	lr
 800a708:	2000000c 	.word	0x2000000c

0800a70c <memmove>:
 800a70c:	4288      	cmp	r0, r1
 800a70e:	b510      	push	{r4, lr}
 800a710:	eb01 0402 	add.w	r4, r1, r2
 800a714:	d902      	bls.n	800a71c <memmove+0x10>
 800a716:	4284      	cmp	r4, r0
 800a718:	4623      	mov	r3, r4
 800a71a:	d807      	bhi.n	800a72c <memmove+0x20>
 800a71c:	1e43      	subs	r3, r0, #1
 800a71e:	42a1      	cmp	r1, r4
 800a720:	d008      	beq.n	800a734 <memmove+0x28>
 800a722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a72a:	e7f8      	b.n	800a71e <memmove+0x12>
 800a72c:	4402      	add	r2, r0
 800a72e:	4601      	mov	r1, r0
 800a730:	428a      	cmp	r2, r1
 800a732:	d100      	bne.n	800a736 <memmove+0x2a>
 800a734:	bd10      	pop	{r4, pc}
 800a736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a73e:	e7f7      	b.n	800a730 <memmove+0x24>

0800a740 <__malloc_lock>:
 800a740:	4801      	ldr	r0, [pc, #4]	; (800a748 <__malloc_lock+0x8>)
 800a742:	f000 bc07 	b.w	800af54 <__retarget_lock_acquire_recursive>
 800a746:	bf00      	nop
 800a748:	200003f8 	.word	0x200003f8

0800a74c <__malloc_unlock>:
 800a74c:	4801      	ldr	r0, [pc, #4]	; (800a754 <__malloc_unlock+0x8>)
 800a74e:	f000 bc02 	b.w	800af56 <__retarget_lock_release_recursive>
 800a752:	bf00      	nop
 800a754:	200003f8 	.word	0x200003f8

0800a758 <_realloc_r>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	4607      	mov	r7, r0
 800a75c:	4614      	mov	r4, r2
 800a75e:	460e      	mov	r6, r1
 800a760:	b921      	cbnz	r1, 800a76c <_realloc_r+0x14>
 800a762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a766:	4611      	mov	r1, r2
 800a768:	f7ff bdb4 	b.w	800a2d4 <_malloc_r>
 800a76c:	b922      	cbnz	r2, 800a778 <_realloc_r+0x20>
 800a76e:	f7ff fd63 	bl	800a238 <_free_r>
 800a772:	4625      	mov	r5, r4
 800a774:	4628      	mov	r0, r5
 800a776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a778:	f000 fc52 	bl	800b020 <_malloc_usable_size_r>
 800a77c:	42a0      	cmp	r0, r4
 800a77e:	d20f      	bcs.n	800a7a0 <_realloc_r+0x48>
 800a780:	4621      	mov	r1, r4
 800a782:	4638      	mov	r0, r7
 800a784:	f7ff fda6 	bl	800a2d4 <_malloc_r>
 800a788:	4605      	mov	r5, r0
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d0f2      	beq.n	800a774 <_realloc_r+0x1c>
 800a78e:	4631      	mov	r1, r6
 800a790:	4622      	mov	r2, r4
 800a792:	f7ff f881 	bl	8009898 <memcpy>
 800a796:	4631      	mov	r1, r6
 800a798:	4638      	mov	r0, r7
 800a79a:	f7ff fd4d 	bl	800a238 <_free_r>
 800a79e:	e7e9      	b.n	800a774 <_realloc_r+0x1c>
 800a7a0:	4635      	mov	r5, r6
 800a7a2:	e7e7      	b.n	800a774 <_realloc_r+0x1c>

0800a7a4 <__sfputc_r>:
 800a7a4:	6893      	ldr	r3, [r2, #8]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	b410      	push	{r4}
 800a7ac:	6093      	str	r3, [r2, #8]
 800a7ae:	da07      	bge.n	800a7c0 <__sfputc_r+0x1c>
 800a7b0:	6994      	ldr	r4, [r2, #24]
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	db01      	blt.n	800a7ba <__sfputc_r+0x16>
 800a7b6:	290a      	cmp	r1, #10
 800a7b8:	d102      	bne.n	800a7c0 <__sfputc_r+0x1c>
 800a7ba:	bc10      	pop	{r4}
 800a7bc:	f000 b94a 	b.w	800aa54 <__swbuf_r>
 800a7c0:	6813      	ldr	r3, [r2, #0]
 800a7c2:	1c58      	adds	r0, r3, #1
 800a7c4:	6010      	str	r0, [r2, #0]
 800a7c6:	7019      	strb	r1, [r3, #0]
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	bc10      	pop	{r4}
 800a7cc:	4770      	bx	lr

0800a7ce <__sfputs_r>:
 800a7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	460f      	mov	r7, r1
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	18d5      	adds	r5, r2, r3
 800a7d8:	42ac      	cmp	r4, r5
 800a7da:	d101      	bne.n	800a7e0 <__sfputs_r+0x12>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e007      	b.n	800a7f0 <__sfputs_r+0x22>
 800a7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e4:	463a      	mov	r2, r7
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7ff ffdc 	bl	800a7a4 <__sfputc_r>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d1f3      	bne.n	800a7d8 <__sfputs_r+0xa>
 800a7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7f4 <_vfiprintf_r>:
 800a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	b09d      	sub	sp, #116	; 0x74
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	4698      	mov	r8, r3
 800a800:	4606      	mov	r6, r0
 800a802:	b118      	cbz	r0, 800a80c <_vfiprintf_r+0x18>
 800a804:	6983      	ldr	r3, [r0, #24]
 800a806:	b90b      	cbnz	r3, 800a80c <_vfiprintf_r+0x18>
 800a808:	f000 fb06 	bl	800ae18 <__sinit>
 800a80c:	4b89      	ldr	r3, [pc, #548]	; (800aa34 <_vfiprintf_r+0x240>)
 800a80e:	429d      	cmp	r5, r3
 800a810:	d11b      	bne.n	800a84a <_vfiprintf_r+0x56>
 800a812:	6875      	ldr	r5, [r6, #4]
 800a814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a816:	07d9      	lsls	r1, r3, #31
 800a818:	d405      	bmi.n	800a826 <_vfiprintf_r+0x32>
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	059a      	lsls	r2, r3, #22
 800a81e:	d402      	bmi.n	800a826 <_vfiprintf_r+0x32>
 800a820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a822:	f000 fb97 	bl	800af54 <__retarget_lock_acquire_recursive>
 800a826:	89ab      	ldrh	r3, [r5, #12]
 800a828:	071b      	lsls	r3, r3, #28
 800a82a:	d501      	bpl.n	800a830 <_vfiprintf_r+0x3c>
 800a82c:	692b      	ldr	r3, [r5, #16]
 800a82e:	b9eb      	cbnz	r3, 800a86c <_vfiprintf_r+0x78>
 800a830:	4629      	mov	r1, r5
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f960 	bl	800aaf8 <__swsetup_r>
 800a838:	b1c0      	cbz	r0, 800a86c <_vfiprintf_r+0x78>
 800a83a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a83c:	07dc      	lsls	r4, r3, #31
 800a83e:	d50e      	bpl.n	800a85e <_vfiprintf_r+0x6a>
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	b01d      	add	sp, #116	; 0x74
 800a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84a:	4b7b      	ldr	r3, [pc, #492]	; (800aa38 <_vfiprintf_r+0x244>)
 800a84c:	429d      	cmp	r5, r3
 800a84e:	d101      	bne.n	800a854 <_vfiprintf_r+0x60>
 800a850:	68b5      	ldr	r5, [r6, #8]
 800a852:	e7df      	b.n	800a814 <_vfiprintf_r+0x20>
 800a854:	4b79      	ldr	r3, [pc, #484]	; (800aa3c <_vfiprintf_r+0x248>)
 800a856:	429d      	cmp	r5, r3
 800a858:	bf08      	it	eq
 800a85a:	68f5      	ldreq	r5, [r6, #12]
 800a85c:	e7da      	b.n	800a814 <_vfiprintf_r+0x20>
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	0598      	lsls	r0, r3, #22
 800a862:	d4ed      	bmi.n	800a840 <_vfiprintf_r+0x4c>
 800a864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a866:	f000 fb76 	bl	800af56 <__retarget_lock_release_recursive>
 800a86a:	e7e9      	b.n	800a840 <_vfiprintf_r+0x4c>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9309      	str	r3, [sp, #36]	; 0x24
 800a870:	2320      	movs	r3, #32
 800a872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a876:	f8cd 800c 	str.w	r8, [sp, #12]
 800a87a:	2330      	movs	r3, #48	; 0x30
 800a87c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa40 <_vfiprintf_r+0x24c>
 800a880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a884:	f04f 0901 	mov.w	r9, #1
 800a888:	4623      	mov	r3, r4
 800a88a:	469a      	mov	sl, r3
 800a88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a890:	b10a      	cbz	r2, 800a896 <_vfiprintf_r+0xa2>
 800a892:	2a25      	cmp	r2, #37	; 0x25
 800a894:	d1f9      	bne.n	800a88a <_vfiprintf_r+0x96>
 800a896:	ebba 0b04 	subs.w	fp, sl, r4
 800a89a:	d00b      	beq.n	800a8b4 <_vfiprintf_r+0xc0>
 800a89c:	465b      	mov	r3, fp
 800a89e:	4622      	mov	r2, r4
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7ff ff93 	bl	800a7ce <__sfputs_r>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	f000 80aa 	beq.w	800aa02 <_vfiprintf_r+0x20e>
 800a8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b0:	445a      	add	r2, fp
 800a8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 80a2 	beq.w	800aa02 <_vfiprintf_r+0x20e>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c8:	f10a 0a01 	add.w	sl, sl, #1
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8d6:	4654      	mov	r4, sl
 800a8d8:	2205      	movs	r2, #5
 800a8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8de:	4858      	ldr	r0, [pc, #352]	; (800aa40 <_vfiprintf_r+0x24c>)
 800a8e0:	f7f5 fc56 	bl	8000190 <memchr>
 800a8e4:	9a04      	ldr	r2, [sp, #16]
 800a8e6:	b9d8      	cbnz	r0, 800a920 <_vfiprintf_r+0x12c>
 800a8e8:	06d1      	lsls	r1, r2, #27
 800a8ea:	bf44      	itt	mi
 800a8ec:	2320      	movmi	r3, #32
 800a8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f2:	0713      	lsls	r3, r2, #28
 800a8f4:	bf44      	itt	mi
 800a8f6:	232b      	movmi	r3, #43	; 0x2b
 800a8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a900:	2b2a      	cmp	r3, #42	; 0x2a
 800a902:	d015      	beq.n	800a930 <_vfiprintf_r+0x13c>
 800a904:	9a07      	ldr	r2, [sp, #28]
 800a906:	4654      	mov	r4, sl
 800a908:	2000      	movs	r0, #0
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4621      	mov	r1, r4
 800a910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a914:	3b30      	subs	r3, #48	; 0x30
 800a916:	2b09      	cmp	r3, #9
 800a918:	d94e      	bls.n	800a9b8 <_vfiprintf_r+0x1c4>
 800a91a:	b1b0      	cbz	r0, 800a94a <_vfiprintf_r+0x156>
 800a91c:	9207      	str	r2, [sp, #28]
 800a91e:	e014      	b.n	800a94a <_vfiprintf_r+0x156>
 800a920:	eba0 0308 	sub.w	r3, r0, r8
 800a924:	fa09 f303 	lsl.w	r3, r9, r3
 800a928:	4313      	orrs	r3, r2
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	46a2      	mov	sl, r4
 800a92e:	e7d2      	b.n	800a8d6 <_vfiprintf_r+0xe2>
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	1d19      	adds	r1, r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	9103      	str	r1, [sp, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bfbb      	ittet	lt
 800a93c:	425b      	neglt	r3, r3
 800a93e:	f042 0202 	orrlt.w	r2, r2, #2
 800a942:	9307      	strge	r3, [sp, #28]
 800a944:	9307      	strlt	r3, [sp, #28]
 800a946:	bfb8      	it	lt
 800a948:	9204      	strlt	r2, [sp, #16]
 800a94a:	7823      	ldrb	r3, [r4, #0]
 800a94c:	2b2e      	cmp	r3, #46	; 0x2e
 800a94e:	d10c      	bne.n	800a96a <_vfiprintf_r+0x176>
 800a950:	7863      	ldrb	r3, [r4, #1]
 800a952:	2b2a      	cmp	r3, #42	; 0x2a
 800a954:	d135      	bne.n	800a9c2 <_vfiprintf_r+0x1ce>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	1d1a      	adds	r2, r3, #4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	9203      	str	r2, [sp, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	bfb8      	it	lt
 800a962:	f04f 33ff 	movlt.w	r3, #4294967295
 800a966:	3402      	adds	r4, #2
 800a968:	9305      	str	r3, [sp, #20]
 800a96a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa50 <_vfiprintf_r+0x25c>
 800a96e:	7821      	ldrb	r1, [r4, #0]
 800a970:	2203      	movs	r2, #3
 800a972:	4650      	mov	r0, sl
 800a974:	f7f5 fc0c 	bl	8000190 <memchr>
 800a978:	b140      	cbz	r0, 800a98c <_vfiprintf_r+0x198>
 800a97a:	2340      	movs	r3, #64	; 0x40
 800a97c:	eba0 000a 	sub.w	r0, r0, sl
 800a980:	fa03 f000 	lsl.w	r0, r3, r0
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	4303      	orrs	r3, r0
 800a988:	3401      	adds	r4, #1
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a990:	482c      	ldr	r0, [pc, #176]	; (800aa44 <_vfiprintf_r+0x250>)
 800a992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a996:	2206      	movs	r2, #6
 800a998:	f7f5 fbfa 	bl	8000190 <memchr>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d03f      	beq.n	800aa20 <_vfiprintf_r+0x22c>
 800a9a0:	4b29      	ldr	r3, [pc, #164]	; (800aa48 <_vfiprintf_r+0x254>)
 800a9a2:	bb1b      	cbnz	r3, 800a9ec <_vfiprintf_r+0x1f8>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	3307      	adds	r3, #7
 800a9a8:	f023 0307 	bic.w	r3, r3, #7
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	9303      	str	r3, [sp, #12]
 800a9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b2:	443b      	add	r3, r7
 800a9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b6:	e767      	b.n	800a888 <_vfiprintf_r+0x94>
 800a9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9bc:	460c      	mov	r4, r1
 800a9be:	2001      	movs	r0, #1
 800a9c0:	e7a5      	b.n	800a90e <_vfiprintf_r+0x11a>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	3401      	adds	r4, #1
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	f04f 0c0a 	mov.w	ip, #10
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9d4:	3a30      	subs	r2, #48	; 0x30
 800a9d6:	2a09      	cmp	r2, #9
 800a9d8:	d903      	bls.n	800a9e2 <_vfiprintf_r+0x1ee>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0c5      	beq.n	800a96a <_vfiprintf_r+0x176>
 800a9de:	9105      	str	r1, [sp, #20]
 800a9e0:	e7c3      	b.n	800a96a <_vfiprintf_r+0x176>
 800a9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e7f0      	b.n	800a9ce <_vfiprintf_r+0x1da>
 800a9ec:	ab03      	add	r3, sp, #12
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	4b16      	ldr	r3, [pc, #88]	; (800aa4c <_vfiprintf_r+0x258>)
 800a9f4:	a904      	add	r1, sp, #16
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7fc f8b8 	bl	8006b6c <_printf_float>
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	1c78      	adds	r0, r7, #1
 800aa00:	d1d6      	bne.n	800a9b0 <_vfiprintf_r+0x1bc>
 800aa02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa04:	07d9      	lsls	r1, r3, #31
 800aa06:	d405      	bmi.n	800aa14 <_vfiprintf_r+0x220>
 800aa08:	89ab      	ldrh	r3, [r5, #12]
 800aa0a:	059a      	lsls	r2, r3, #22
 800aa0c:	d402      	bmi.n	800aa14 <_vfiprintf_r+0x220>
 800aa0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa10:	f000 faa1 	bl	800af56 <__retarget_lock_release_recursive>
 800aa14:	89ab      	ldrh	r3, [r5, #12]
 800aa16:	065b      	lsls	r3, r3, #25
 800aa18:	f53f af12 	bmi.w	800a840 <_vfiprintf_r+0x4c>
 800aa1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa1e:	e711      	b.n	800a844 <_vfiprintf_r+0x50>
 800aa20:	ab03      	add	r3, sp, #12
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	462a      	mov	r2, r5
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <_vfiprintf_r+0x258>)
 800aa28:	a904      	add	r1, sp, #16
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7fc fb36 	bl	800709c <_printf_i>
 800aa30:	e7e4      	b.n	800a9fc <_vfiprintf_r+0x208>
 800aa32:	bf00      	nop
 800aa34:	0800b844 	.word	0x0800b844
 800aa38:	0800b864 	.word	0x0800b864
 800aa3c:	0800b824 	.word	0x0800b824
 800aa40:	0800b7d4 	.word	0x0800b7d4
 800aa44:	0800b7de 	.word	0x0800b7de
 800aa48:	08006b6d 	.word	0x08006b6d
 800aa4c:	0800a7cf 	.word	0x0800a7cf
 800aa50:	0800b7da 	.word	0x0800b7da

0800aa54 <__swbuf_r>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	460e      	mov	r6, r1
 800aa58:	4614      	mov	r4, r2
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	b118      	cbz	r0, 800aa66 <__swbuf_r+0x12>
 800aa5e:	6983      	ldr	r3, [r0, #24]
 800aa60:	b90b      	cbnz	r3, 800aa66 <__swbuf_r+0x12>
 800aa62:	f000 f9d9 	bl	800ae18 <__sinit>
 800aa66:	4b21      	ldr	r3, [pc, #132]	; (800aaec <__swbuf_r+0x98>)
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	d12b      	bne.n	800aac4 <__swbuf_r+0x70>
 800aa6c:	686c      	ldr	r4, [r5, #4]
 800aa6e:	69a3      	ldr	r3, [r4, #24]
 800aa70:	60a3      	str	r3, [r4, #8]
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	071a      	lsls	r2, r3, #28
 800aa76:	d52f      	bpl.n	800aad8 <__swbuf_r+0x84>
 800aa78:	6923      	ldr	r3, [r4, #16]
 800aa7a:	b36b      	cbz	r3, 800aad8 <__swbuf_r+0x84>
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	1ac0      	subs	r0, r0, r3
 800aa82:	6963      	ldr	r3, [r4, #20]
 800aa84:	b2f6      	uxtb	r6, r6
 800aa86:	4283      	cmp	r3, r0
 800aa88:	4637      	mov	r7, r6
 800aa8a:	dc04      	bgt.n	800aa96 <__swbuf_r+0x42>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f92e 	bl	800acf0 <_fflush_r>
 800aa94:	bb30      	cbnz	r0, 800aae4 <__swbuf_r+0x90>
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	60a3      	str	r3, [r4, #8]
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	6022      	str	r2, [r4, #0]
 800aaa2:	701e      	strb	r6, [r3, #0]
 800aaa4:	6963      	ldr	r3, [r4, #20]
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	4283      	cmp	r3, r0
 800aaaa:	d004      	beq.n	800aab6 <__swbuf_r+0x62>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	07db      	lsls	r3, r3, #31
 800aab0:	d506      	bpl.n	800aac0 <__swbuf_r+0x6c>
 800aab2:	2e0a      	cmp	r6, #10
 800aab4:	d104      	bne.n	800aac0 <__swbuf_r+0x6c>
 800aab6:	4621      	mov	r1, r4
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 f919 	bl	800acf0 <_fflush_r>
 800aabe:	b988      	cbnz	r0, 800aae4 <__swbuf_r+0x90>
 800aac0:	4638      	mov	r0, r7
 800aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <__swbuf_r+0x9c>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d101      	bne.n	800aace <__swbuf_r+0x7a>
 800aaca:	68ac      	ldr	r4, [r5, #8]
 800aacc:	e7cf      	b.n	800aa6e <__swbuf_r+0x1a>
 800aace:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <__swbuf_r+0xa0>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	bf08      	it	eq
 800aad4:	68ec      	ldreq	r4, [r5, #12]
 800aad6:	e7ca      	b.n	800aa6e <__swbuf_r+0x1a>
 800aad8:	4621      	mov	r1, r4
 800aada:	4628      	mov	r0, r5
 800aadc:	f000 f80c 	bl	800aaf8 <__swsetup_r>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0cb      	beq.n	800aa7c <__swbuf_r+0x28>
 800aae4:	f04f 37ff 	mov.w	r7, #4294967295
 800aae8:	e7ea      	b.n	800aac0 <__swbuf_r+0x6c>
 800aaea:	bf00      	nop
 800aaec:	0800b844 	.word	0x0800b844
 800aaf0:	0800b864 	.word	0x0800b864
 800aaf4:	0800b824 	.word	0x0800b824

0800aaf8 <__swsetup_r>:
 800aaf8:	4b32      	ldr	r3, [pc, #200]	; (800abc4 <__swsetup_r+0xcc>)
 800aafa:	b570      	push	{r4, r5, r6, lr}
 800aafc:	681d      	ldr	r5, [r3, #0]
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	b125      	cbz	r5, 800ab0e <__swsetup_r+0x16>
 800ab04:	69ab      	ldr	r3, [r5, #24]
 800ab06:	b913      	cbnz	r3, 800ab0e <__swsetup_r+0x16>
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f000 f985 	bl	800ae18 <__sinit>
 800ab0e:	4b2e      	ldr	r3, [pc, #184]	; (800abc8 <__swsetup_r+0xd0>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d10f      	bne.n	800ab34 <__swsetup_r+0x3c>
 800ab14:	686c      	ldr	r4, [r5, #4]
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab1c:	0719      	lsls	r1, r3, #28
 800ab1e:	d42c      	bmi.n	800ab7a <__swsetup_r+0x82>
 800ab20:	06dd      	lsls	r5, r3, #27
 800ab22:	d411      	bmi.n	800ab48 <__swsetup_r+0x50>
 800ab24:	2309      	movs	r3, #9
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	e03e      	b.n	800abb2 <__swsetup_r+0xba>
 800ab34:	4b25      	ldr	r3, [pc, #148]	; (800abcc <__swsetup_r+0xd4>)
 800ab36:	429c      	cmp	r4, r3
 800ab38:	d101      	bne.n	800ab3e <__swsetup_r+0x46>
 800ab3a:	68ac      	ldr	r4, [r5, #8]
 800ab3c:	e7eb      	b.n	800ab16 <__swsetup_r+0x1e>
 800ab3e:	4b24      	ldr	r3, [pc, #144]	; (800abd0 <__swsetup_r+0xd8>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	bf08      	it	eq
 800ab44:	68ec      	ldreq	r4, [r5, #12]
 800ab46:	e7e6      	b.n	800ab16 <__swsetup_r+0x1e>
 800ab48:	0758      	lsls	r0, r3, #29
 800ab4a:	d512      	bpl.n	800ab72 <__swsetup_r+0x7a>
 800ab4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab4e:	b141      	cbz	r1, 800ab62 <__swsetup_r+0x6a>
 800ab50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab54:	4299      	cmp	r1, r3
 800ab56:	d002      	beq.n	800ab5e <__swsetup_r+0x66>
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fb6d 	bl	800a238 <_free_r>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6363      	str	r3, [r4, #52]	; 0x34
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f043 0308 	orr.w	r3, r3, #8
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	b94b      	cbnz	r3, 800ab92 <__swsetup_r+0x9a>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab88:	d003      	beq.n	800ab92 <__swsetup_r+0x9a>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 fa07 	bl	800afa0 <__smakebuf_r>
 800ab92:	89a0      	ldrh	r0, [r4, #12]
 800ab94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab98:	f010 0301 	ands.w	r3, r0, #1
 800ab9c:	d00a      	beq.n	800abb4 <__swsetup_r+0xbc>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60a3      	str	r3, [r4, #8]
 800aba2:	6963      	ldr	r3, [r4, #20]
 800aba4:	425b      	negs	r3, r3
 800aba6:	61a3      	str	r3, [r4, #24]
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	b943      	cbnz	r3, 800abbe <__swsetup_r+0xc6>
 800abac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abb0:	d1ba      	bne.n	800ab28 <__swsetup_r+0x30>
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	0781      	lsls	r1, r0, #30
 800abb6:	bf58      	it	pl
 800abb8:	6963      	ldrpl	r3, [r4, #20]
 800abba:	60a3      	str	r3, [r4, #8]
 800abbc:	e7f4      	b.n	800aba8 <__swsetup_r+0xb0>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e7f7      	b.n	800abb2 <__swsetup_r+0xba>
 800abc2:	bf00      	nop
 800abc4:	2000000c 	.word	0x2000000c
 800abc8:	0800b844 	.word	0x0800b844
 800abcc:	0800b864 	.word	0x0800b864
 800abd0:	0800b824 	.word	0x0800b824

0800abd4 <abort>:
 800abd4:	b508      	push	{r3, lr}
 800abd6:	2006      	movs	r0, #6
 800abd8:	f000 fa52 	bl	800b080 <raise>
 800abdc:	2001      	movs	r0, #1
 800abde:	f7f6 ff95 	bl	8001b0c <_exit>
	...

0800abe4 <__sflush_r>:
 800abe4:	898a      	ldrh	r2, [r1, #12]
 800abe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abea:	4605      	mov	r5, r0
 800abec:	0710      	lsls	r0, r2, #28
 800abee:	460c      	mov	r4, r1
 800abf0:	d458      	bmi.n	800aca4 <__sflush_r+0xc0>
 800abf2:	684b      	ldr	r3, [r1, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	dc05      	bgt.n	800ac04 <__sflush_r+0x20>
 800abf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dc02      	bgt.n	800ac04 <__sflush_r+0x20>
 800abfe:	2000      	movs	r0, #0
 800ac00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac06:	2e00      	cmp	r6, #0
 800ac08:	d0f9      	beq.n	800abfe <__sflush_r+0x1a>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac10:	682f      	ldr	r7, [r5, #0]
 800ac12:	602b      	str	r3, [r5, #0]
 800ac14:	d032      	beq.n	800ac7c <__sflush_r+0x98>
 800ac16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	075a      	lsls	r2, r3, #29
 800ac1c:	d505      	bpl.n	800ac2a <__sflush_r+0x46>
 800ac1e:	6863      	ldr	r3, [r4, #4]
 800ac20:	1ac0      	subs	r0, r0, r3
 800ac22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac24:	b10b      	cbz	r3, 800ac2a <__sflush_r+0x46>
 800ac26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac28:	1ac0      	subs	r0, r0, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac30:	6a21      	ldr	r1, [r4, #32]
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b0      	blx	r6
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	d106      	bne.n	800ac4a <__sflush_r+0x66>
 800ac3c:	6829      	ldr	r1, [r5, #0]
 800ac3e:	291d      	cmp	r1, #29
 800ac40:	d82c      	bhi.n	800ac9c <__sflush_r+0xb8>
 800ac42:	4a2a      	ldr	r2, [pc, #168]	; (800acec <__sflush_r+0x108>)
 800ac44:	40ca      	lsrs	r2, r1
 800ac46:	07d6      	lsls	r6, r2, #31
 800ac48:	d528      	bpl.n	800ac9c <__sflush_r+0xb8>
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	6062      	str	r2, [r4, #4]
 800ac4e:	04d9      	lsls	r1, r3, #19
 800ac50:	6922      	ldr	r2, [r4, #16]
 800ac52:	6022      	str	r2, [r4, #0]
 800ac54:	d504      	bpl.n	800ac60 <__sflush_r+0x7c>
 800ac56:	1c42      	adds	r2, r0, #1
 800ac58:	d101      	bne.n	800ac5e <__sflush_r+0x7a>
 800ac5a:	682b      	ldr	r3, [r5, #0]
 800ac5c:	b903      	cbnz	r3, 800ac60 <__sflush_r+0x7c>
 800ac5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac62:	602f      	str	r7, [r5, #0]
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d0ca      	beq.n	800abfe <__sflush_r+0x1a>
 800ac68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	d002      	beq.n	800ac76 <__sflush_r+0x92>
 800ac70:	4628      	mov	r0, r5
 800ac72:	f7ff fae1 	bl	800a238 <_free_r>
 800ac76:	2000      	movs	r0, #0
 800ac78:	6360      	str	r0, [r4, #52]	; 0x34
 800ac7a:	e7c1      	b.n	800ac00 <__sflush_r+0x1c>
 800ac7c:	6a21      	ldr	r1, [r4, #32]
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4628      	mov	r0, r5
 800ac82:	47b0      	blx	r6
 800ac84:	1c41      	adds	r1, r0, #1
 800ac86:	d1c7      	bne.n	800ac18 <__sflush_r+0x34>
 800ac88:	682b      	ldr	r3, [r5, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0c4      	beq.n	800ac18 <__sflush_r+0x34>
 800ac8e:	2b1d      	cmp	r3, #29
 800ac90:	d001      	beq.n	800ac96 <__sflush_r+0xb2>
 800ac92:	2b16      	cmp	r3, #22
 800ac94:	d101      	bne.n	800ac9a <__sflush_r+0xb6>
 800ac96:	602f      	str	r7, [r5, #0]
 800ac98:	e7b1      	b.n	800abfe <__sflush_r+0x1a>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	e7ad      	b.n	800ac00 <__sflush_r+0x1c>
 800aca4:	690f      	ldr	r7, [r1, #16]
 800aca6:	2f00      	cmp	r7, #0
 800aca8:	d0a9      	beq.n	800abfe <__sflush_r+0x1a>
 800acaa:	0793      	lsls	r3, r2, #30
 800acac:	680e      	ldr	r6, [r1, #0]
 800acae:	bf08      	it	eq
 800acb0:	694b      	ldreq	r3, [r1, #20]
 800acb2:	600f      	str	r7, [r1, #0]
 800acb4:	bf18      	it	ne
 800acb6:	2300      	movne	r3, #0
 800acb8:	eba6 0807 	sub.w	r8, r6, r7
 800acbc:	608b      	str	r3, [r1, #8]
 800acbe:	f1b8 0f00 	cmp.w	r8, #0
 800acc2:	dd9c      	ble.n	800abfe <__sflush_r+0x1a>
 800acc4:	6a21      	ldr	r1, [r4, #32]
 800acc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acc8:	4643      	mov	r3, r8
 800acca:	463a      	mov	r2, r7
 800accc:	4628      	mov	r0, r5
 800acce:	47b0      	blx	r6
 800acd0:	2800      	cmp	r0, #0
 800acd2:	dc06      	bgt.n	800ace2 <__sflush_r+0xfe>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	e78e      	b.n	800ac00 <__sflush_r+0x1c>
 800ace2:	4407      	add	r7, r0
 800ace4:	eba8 0800 	sub.w	r8, r8, r0
 800ace8:	e7e9      	b.n	800acbe <__sflush_r+0xda>
 800acea:	bf00      	nop
 800acec:	20400001 	.word	0x20400001

0800acf0 <_fflush_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	690b      	ldr	r3, [r1, #16]
 800acf4:	4605      	mov	r5, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	b913      	cbnz	r3, 800ad00 <_fflush_r+0x10>
 800acfa:	2500      	movs	r5, #0
 800acfc:	4628      	mov	r0, r5
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	b118      	cbz	r0, 800ad0a <_fflush_r+0x1a>
 800ad02:	6983      	ldr	r3, [r0, #24]
 800ad04:	b90b      	cbnz	r3, 800ad0a <_fflush_r+0x1a>
 800ad06:	f000 f887 	bl	800ae18 <__sinit>
 800ad0a:	4b14      	ldr	r3, [pc, #80]	; (800ad5c <_fflush_r+0x6c>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d11b      	bne.n	800ad48 <_fflush_r+0x58>
 800ad10:	686c      	ldr	r4, [r5, #4]
 800ad12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0ef      	beq.n	800acfa <_fflush_r+0xa>
 800ad1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad1c:	07d0      	lsls	r0, r2, #31
 800ad1e:	d404      	bmi.n	800ad2a <_fflush_r+0x3a>
 800ad20:	0599      	lsls	r1, r3, #22
 800ad22:	d402      	bmi.n	800ad2a <_fflush_r+0x3a>
 800ad24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad26:	f000 f915 	bl	800af54 <__retarget_lock_acquire_recursive>
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	f7ff ff59 	bl	800abe4 <__sflush_r>
 800ad32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad34:	07da      	lsls	r2, r3, #31
 800ad36:	4605      	mov	r5, r0
 800ad38:	d4e0      	bmi.n	800acfc <_fflush_r+0xc>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	059b      	lsls	r3, r3, #22
 800ad3e:	d4dd      	bmi.n	800acfc <_fflush_r+0xc>
 800ad40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad42:	f000 f908 	bl	800af56 <__retarget_lock_release_recursive>
 800ad46:	e7d9      	b.n	800acfc <_fflush_r+0xc>
 800ad48:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <_fflush_r+0x70>)
 800ad4a:	429c      	cmp	r4, r3
 800ad4c:	d101      	bne.n	800ad52 <_fflush_r+0x62>
 800ad4e:	68ac      	ldr	r4, [r5, #8]
 800ad50:	e7df      	b.n	800ad12 <_fflush_r+0x22>
 800ad52:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <_fflush_r+0x74>)
 800ad54:	429c      	cmp	r4, r3
 800ad56:	bf08      	it	eq
 800ad58:	68ec      	ldreq	r4, [r5, #12]
 800ad5a:	e7da      	b.n	800ad12 <_fflush_r+0x22>
 800ad5c:	0800b844 	.word	0x0800b844
 800ad60:	0800b864 	.word	0x0800b864
 800ad64:	0800b824 	.word	0x0800b824

0800ad68 <std>:
 800ad68:	2300      	movs	r3, #0
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad76:	6083      	str	r3, [r0, #8]
 800ad78:	8181      	strh	r1, [r0, #12]
 800ad7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad7c:	81c2      	strh	r2, [r0, #14]
 800ad7e:	6183      	str	r3, [r0, #24]
 800ad80:	4619      	mov	r1, r3
 800ad82:	2208      	movs	r2, #8
 800ad84:	305c      	adds	r0, #92	; 0x5c
 800ad86:	f7fb fe4b 	bl	8006a20 <memset>
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <std+0x38>)
 800ad8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <std+0x3c>)
 800ad90:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <std+0x40>)
 800ad94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <std+0x44>)
 800ad98:	6224      	str	r4, [r4, #32]
 800ad9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad9c:	bd10      	pop	{r4, pc}
 800ad9e:	bf00      	nop
 800ada0:	0800b0b9 	.word	0x0800b0b9
 800ada4:	0800b0db 	.word	0x0800b0db
 800ada8:	0800b113 	.word	0x0800b113
 800adac:	0800b137 	.word	0x0800b137

0800adb0 <_cleanup_r>:
 800adb0:	4901      	ldr	r1, [pc, #4]	; (800adb8 <_cleanup_r+0x8>)
 800adb2:	f000 b8af 	b.w	800af14 <_fwalk_reent>
 800adb6:	bf00      	nop
 800adb8:	0800acf1 	.word	0x0800acf1

0800adbc <__sfmoreglue>:
 800adbc:	b570      	push	{r4, r5, r6, lr}
 800adbe:	1e4a      	subs	r2, r1, #1
 800adc0:	2568      	movs	r5, #104	; 0x68
 800adc2:	4355      	muls	r5, r2
 800adc4:	460e      	mov	r6, r1
 800adc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adca:	f7ff fa83 	bl	800a2d4 <_malloc_r>
 800adce:	4604      	mov	r4, r0
 800add0:	b140      	cbz	r0, 800ade4 <__sfmoreglue+0x28>
 800add2:	2100      	movs	r1, #0
 800add4:	e9c0 1600 	strd	r1, r6, [r0]
 800add8:	300c      	adds	r0, #12
 800adda:	60a0      	str	r0, [r4, #8]
 800addc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ade0:	f7fb fe1e 	bl	8006a20 <memset>
 800ade4:	4620      	mov	r0, r4
 800ade6:	bd70      	pop	{r4, r5, r6, pc}

0800ade8 <__sfp_lock_acquire>:
 800ade8:	4801      	ldr	r0, [pc, #4]	; (800adf0 <__sfp_lock_acquire+0x8>)
 800adea:	f000 b8b3 	b.w	800af54 <__retarget_lock_acquire_recursive>
 800adee:	bf00      	nop
 800adf0:	200003fc 	.word	0x200003fc

0800adf4 <__sfp_lock_release>:
 800adf4:	4801      	ldr	r0, [pc, #4]	; (800adfc <__sfp_lock_release+0x8>)
 800adf6:	f000 b8ae 	b.w	800af56 <__retarget_lock_release_recursive>
 800adfa:	bf00      	nop
 800adfc:	200003fc 	.word	0x200003fc

0800ae00 <__sinit_lock_acquire>:
 800ae00:	4801      	ldr	r0, [pc, #4]	; (800ae08 <__sinit_lock_acquire+0x8>)
 800ae02:	f000 b8a7 	b.w	800af54 <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	200003f7 	.word	0x200003f7

0800ae0c <__sinit_lock_release>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	; (800ae14 <__sinit_lock_release+0x8>)
 800ae0e:	f000 b8a2 	b.w	800af56 <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	200003f7 	.word	0x200003f7

0800ae18 <__sinit>:
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	f7ff fff0 	bl	800ae00 <__sinit_lock_acquire>
 800ae20:	69a3      	ldr	r3, [r4, #24]
 800ae22:	b11b      	cbz	r3, 800ae2c <__sinit+0x14>
 800ae24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae28:	f7ff bff0 	b.w	800ae0c <__sinit_lock_release>
 800ae2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae30:	6523      	str	r3, [r4, #80]	; 0x50
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <__sinit+0x68>)
 800ae34:	4a13      	ldr	r2, [pc, #76]	; (800ae84 <__sinit+0x6c>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae3a:	42a3      	cmp	r3, r4
 800ae3c:	bf04      	itt	eq
 800ae3e:	2301      	moveq	r3, #1
 800ae40:	61a3      	streq	r3, [r4, #24]
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 f820 	bl	800ae88 <__sfp>
 800ae48:	6060      	str	r0, [r4, #4]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 f81c 	bl	800ae88 <__sfp>
 800ae50:	60a0      	str	r0, [r4, #8]
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 f818 	bl	800ae88 <__sfp>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	60e0      	str	r0, [r4, #12]
 800ae5c:	2104      	movs	r1, #4
 800ae5e:	6860      	ldr	r0, [r4, #4]
 800ae60:	f7ff ff82 	bl	800ad68 <std>
 800ae64:	68a0      	ldr	r0, [r4, #8]
 800ae66:	2201      	movs	r2, #1
 800ae68:	2109      	movs	r1, #9
 800ae6a:	f7ff ff7d 	bl	800ad68 <std>
 800ae6e:	68e0      	ldr	r0, [r4, #12]
 800ae70:	2202      	movs	r2, #2
 800ae72:	2112      	movs	r1, #18
 800ae74:	f7ff ff78 	bl	800ad68 <std>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	61a3      	str	r3, [r4, #24]
 800ae7c:	e7d2      	b.n	800ae24 <__sinit+0xc>
 800ae7e:	bf00      	nop
 800ae80:	0800b3cc 	.word	0x0800b3cc
 800ae84:	0800adb1 	.word	0x0800adb1

0800ae88 <__sfp>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	f7ff ffac 	bl	800ade8 <__sfp_lock_acquire>
 800ae90:	4b1e      	ldr	r3, [pc, #120]	; (800af0c <__sfp+0x84>)
 800ae92:	681e      	ldr	r6, [r3, #0]
 800ae94:	69b3      	ldr	r3, [r6, #24]
 800ae96:	b913      	cbnz	r3, 800ae9e <__sfp+0x16>
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff ffbd 	bl	800ae18 <__sinit>
 800ae9e:	3648      	adds	r6, #72	; 0x48
 800aea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	d503      	bpl.n	800aeb0 <__sfp+0x28>
 800aea8:	6833      	ldr	r3, [r6, #0]
 800aeaa:	b30b      	cbz	r3, 800aef0 <__sfp+0x68>
 800aeac:	6836      	ldr	r6, [r6, #0]
 800aeae:	e7f7      	b.n	800aea0 <__sfp+0x18>
 800aeb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aeb4:	b9d5      	cbnz	r5, 800aeec <__sfp+0x64>
 800aeb6:	4b16      	ldr	r3, [pc, #88]	; (800af10 <__sfp+0x88>)
 800aeb8:	60e3      	str	r3, [r4, #12]
 800aeba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aebe:	6665      	str	r5, [r4, #100]	; 0x64
 800aec0:	f000 f847 	bl	800af52 <__retarget_lock_init_recursive>
 800aec4:	f7ff ff96 	bl	800adf4 <__sfp_lock_release>
 800aec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aed0:	6025      	str	r5, [r4, #0]
 800aed2:	61a5      	str	r5, [r4, #24]
 800aed4:	2208      	movs	r2, #8
 800aed6:	4629      	mov	r1, r5
 800aed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aedc:	f7fb fda0 	bl	8006a20 <memset>
 800aee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aee8:	4620      	mov	r0, r4
 800aeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeec:	3468      	adds	r4, #104	; 0x68
 800aeee:	e7d9      	b.n	800aea4 <__sfp+0x1c>
 800aef0:	2104      	movs	r1, #4
 800aef2:	4638      	mov	r0, r7
 800aef4:	f7ff ff62 	bl	800adbc <__sfmoreglue>
 800aef8:	4604      	mov	r4, r0
 800aefa:	6030      	str	r0, [r6, #0]
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1d5      	bne.n	800aeac <__sfp+0x24>
 800af00:	f7ff ff78 	bl	800adf4 <__sfp_lock_release>
 800af04:	230c      	movs	r3, #12
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	e7ee      	b.n	800aee8 <__sfp+0x60>
 800af0a:	bf00      	nop
 800af0c:	0800b3cc 	.word	0x0800b3cc
 800af10:	ffff0001 	.word	0xffff0001

0800af14 <_fwalk_reent>:
 800af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af18:	4606      	mov	r6, r0
 800af1a:	4688      	mov	r8, r1
 800af1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af20:	2700      	movs	r7, #0
 800af22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af26:	f1b9 0901 	subs.w	r9, r9, #1
 800af2a:	d505      	bpl.n	800af38 <_fwalk_reent+0x24>
 800af2c:	6824      	ldr	r4, [r4, #0]
 800af2e:	2c00      	cmp	r4, #0
 800af30:	d1f7      	bne.n	800af22 <_fwalk_reent+0xe>
 800af32:	4638      	mov	r0, r7
 800af34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af38:	89ab      	ldrh	r3, [r5, #12]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d907      	bls.n	800af4e <_fwalk_reent+0x3a>
 800af3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af42:	3301      	adds	r3, #1
 800af44:	d003      	beq.n	800af4e <_fwalk_reent+0x3a>
 800af46:	4629      	mov	r1, r5
 800af48:	4630      	mov	r0, r6
 800af4a:	47c0      	blx	r8
 800af4c:	4307      	orrs	r7, r0
 800af4e:	3568      	adds	r5, #104	; 0x68
 800af50:	e7e9      	b.n	800af26 <_fwalk_reent+0x12>

0800af52 <__retarget_lock_init_recursive>:
 800af52:	4770      	bx	lr

0800af54 <__retarget_lock_acquire_recursive>:
 800af54:	4770      	bx	lr

0800af56 <__retarget_lock_release_recursive>:
 800af56:	4770      	bx	lr

0800af58 <__swhatbuf_r>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	460e      	mov	r6, r1
 800af5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af60:	2900      	cmp	r1, #0
 800af62:	b096      	sub	sp, #88	; 0x58
 800af64:	4614      	mov	r4, r2
 800af66:	461d      	mov	r5, r3
 800af68:	da07      	bge.n	800af7a <__swhatbuf_r+0x22>
 800af6a:	2300      	movs	r3, #0
 800af6c:	602b      	str	r3, [r5, #0]
 800af6e:	89b3      	ldrh	r3, [r6, #12]
 800af70:	061a      	lsls	r2, r3, #24
 800af72:	d410      	bmi.n	800af96 <__swhatbuf_r+0x3e>
 800af74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af78:	e00e      	b.n	800af98 <__swhatbuf_r+0x40>
 800af7a:	466a      	mov	r2, sp
 800af7c:	f000 f902 	bl	800b184 <_fstat_r>
 800af80:	2800      	cmp	r0, #0
 800af82:	dbf2      	blt.n	800af6a <__swhatbuf_r+0x12>
 800af84:	9a01      	ldr	r2, [sp, #4]
 800af86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af8e:	425a      	negs	r2, r3
 800af90:	415a      	adcs	r2, r3
 800af92:	602a      	str	r2, [r5, #0]
 800af94:	e7ee      	b.n	800af74 <__swhatbuf_r+0x1c>
 800af96:	2340      	movs	r3, #64	; 0x40
 800af98:	2000      	movs	r0, #0
 800af9a:	6023      	str	r3, [r4, #0]
 800af9c:	b016      	add	sp, #88	; 0x58
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <__smakebuf_r>:
 800afa0:	898b      	ldrh	r3, [r1, #12]
 800afa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afa4:	079d      	lsls	r5, r3, #30
 800afa6:	4606      	mov	r6, r0
 800afa8:	460c      	mov	r4, r1
 800afaa:	d507      	bpl.n	800afbc <__smakebuf_r+0x1c>
 800afac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	6123      	str	r3, [r4, #16]
 800afb4:	2301      	movs	r3, #1
 800afb6:	6163      	str	r3, [r4, #20]
 800afb8:	b002      	add	sp, #8
 800afba:	bd70      	pop	{r4, r5, r6, pc}
 800afbc:	ab01      	add	r3, sp, #4
 800afbe:	466a      	mov	r2, sp
 800afc0:	f7ff ffca 	bl	800af58 <__swhatbuf_r>
 800afc4:	9900      	ldr	r1, [sp, #0]
 800afc6:	4605      	mov	r5, r0
 800afc8:	4630      	mov	r0, r6
 800afca:	f7ff f983 	bl	800a2d4 <_malloc_r>
 800afce:	b948      	cbnz	r0, 800afe4 <__smakebuf_r+0x44>
 800afd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd4:	059a      	lsls	r2, r3, #22
 800afd6:	d4ef      	bmi.n	800afb8 <__smakebuf_r+0x18>
 800afd8:	f023 0303 	bic.w	r3, r3, #3
 800afdc:	f043 0302 	orr.w	r3, r3, #2
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	e7e3      	b.n	800afac <__smakebuf_r+0xc>
 800afe4:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <__smakebuf_r+0x7c>)
 800afe6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	6163      	str	r3, [r4, #20]
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	6120      	str	r0, [r4, #16]
 800affa:	b15b      	cbz	r3, 800b014 <__smakebuf_r+0x74>
 800affc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b000:	4630      	mov	r0, r6
 800b002:	f000 f8d1 	bl	800b1a8 <_isatty_r>
 800b006:	b128      	cbz	r0, 800b014 <__smakebuf_r+0x74>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f023 0303 	bic.w	r3, r3, #3
 800b00e:	f043 0301 	orr.w	r3, r3, #1
 800b012:	81a3      	strh	r3, [r4, #12]
 800b014:	89a0      	ldrh	r0, [r4, #12]
 800b016:	4305      	orrs	r5, r0
 800b018:	81a5      	strh	r5, [r4, #12]
 800b01a:	e7cd      	b.n	800afb8 <__smakebuf_r+0x18>
 800b01c:	0800adb1 	.word	0x0800adb1

0800b020 <_malloc_usable_size_r>:
 800b020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b024:	1f18      	subs	r0, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbc      	itt	lt
 800b02a:	580b      	ldrlt	r3, [r1, r0]
 800b02c:	18c0      	addlt	r0, r0, r3
 800b02e:	4770      	bx	lr

0800b030 <_raise_r>:
 800b030:	291f      	cmp	r1, #31
 800b032:	b538      	push	{r3, r4, r5, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	d904      	bls.n	800b044 <_raise_r+0x14>
 800b03a:	2316      	movs	r3, #22
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b046:	b112      	cbz	r2, 800b04e <_raise_r+0x1e>
 800b048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b04c:	b94b      	cbnz	r3, 800b062 <_raise_r+0x32>
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 f830 	bl	800b0b4 <_getpid_r>
 800b054:	462a      	mov	r2, r5
 800b056:	4601      	mov	r1, r0
 800b058:	4620      	mov	r0, r4
 800b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b05e:	f000 b817 	b.w	800b090 <_kill_r>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d00a      	beq.n	800b07c <_raise_r+0x4c>
 800b066:	1c59      	adds	r1, r3, #1
 800b068:	d103      	bne.n	800b072 <_raise_r+0x42>
 800b06a:	2316      	movs	r3, #22
 800b06c:	6003      	str	r3, [r0, #0]
 800b06e:	2001      	movs	r0, #1
 800b070:	e7e7      	b.n	800b042 <_raise_r+0x12>
 800b072:	2400      	movs	r4, #0
 800b074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b078:	4628      	mov	r0, r5
 800b07a:	4798      	blx	r3
 800b07c:	2000      	movs	r0, #0
 800b07e:	e7e0      	b.n	800b042 <_raise_r+0x12>

0800b080 <raise>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <raise+0xc>)
 800b082:	4601      	mov	r1, r0
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f7ff bfd3 	b.w	800b030 <_raise_r>
 800b08a:	bf00      	nop
 800b08c:	2000000c 	.word	0x2000000c

0800b090 <_kill_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_kill_r+0x20>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	f7f6 fd25 	bl	8001aec <_kill>
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d102      	bne.n	800b0ac <_kill_r+0x1c>
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	b103      	cbz	r3, 800b0ac <_kill_r+0x1c>
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200003f0 	.word	0x200003f0

0800b0b4 <_getpid_r>:
 800b0b4:	f7f6 bd13 	b.w	8001ade <_getpid>

0800b0b8 <__sread>:
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c0:	f000 f894 	bl	800b1ec <_read_r>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	bfab      	itete	ge
 800b0c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b0cc:	181b      	addge	r3, r3, r0
 800b0ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0d2:	bfac      	ite	ge
 800b0d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0d6:	81a3      	strhlt	r3, [r4, #12]
 800b0d8:	bd10      	pop	{r4, pc}

0800b0da <__swrite>:
 800b0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0de:	461f      	mov	r7, r3
 800b0e0:	898b      	ldrh	r3, [r1, #12]
 800b0e2:	05db      	lsls	r3, r3, #23
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	4616      	mov	r6, r2
 800b0ea:	d505      	bpl.n	800b0f8 <__swrite+0x1e>
 800b0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f000 f868 	bl	800b1c8 <_lseek_r>
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	4632      	mov	r2, r6
 800b106:	463b      	mov	r3, r7
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b10e:	f000 b817 	b.w	800b140 <_write_r>

0800b112 <__sseek>:
 800b112:	b510      	push	{r4, lr}
 800b114:	460c      	mov	r4, r1
 800b116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11a:	f000 f855 	bl	800b1c8 <_lseek_r>
 800b11e:	1c43      	adds	r3, r0, #1
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	bf15      	itete	ne
 800b124:	6560      	strne	r0, [r4, #84]	; 0x54
 800b126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b12a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b12e:	81a3      	strheq	r3, [r4, #12]
 800b130:	bf18      	it	ne
 800b132:	81a3      	strhne	r3, [r4, #12]
 800b134:	bd10      	pop	{r4, pc}

0800b136 <__sclose>:
 800b136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13a:	f000 b813 	b.w	800b164 <_close_r>
	...

0800b140 <_write_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	4d07      	ldr	r5, [pc, #28]	; (800b160 <_write_r+0x20>)
 800b144:	4604      	mov	r4, r0
 800b146:	4608      	mov	r0, r1
 800b148:	4611      	mov	r1, r2
 800b14a:	2200      	movs	r2, #0
 800b14c:	602a      	str	r2, [r5, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	f7f6 fd03 	bl	8001b5a <_write>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_write_r+0x1e>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_write_r+0x1e>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	200003f0 	.word	0x200003f0

0800b164 <_close_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4d06      	ldr	r5, [pc, #24]	; (800b180 <_close_r+0x1c>)
 800b168:	2300      	movs	r3, #0
 800b16a:	4604      	mov	r4, r0
 800b16c:	4608      	mov	r0, r1
 800b16e:	602b      	str	r3, [r5, #0]
 800b170:	f7f6 fd0f 	bl	8001b92 <_close>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d102      	bne.n	800b17e <_close_r+0x1a>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	b103      	cbz	r3, 800b17e <_close_r+0x1a>
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	bd38      	pop	{r3, r4, r5, pc}
 800b180:	200003f0 	.word	0x200003f0

0800b184 <_fstat_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d07      	ldr	r5, [pc, #28]	; (800b1a4 <_fstat_r+0x20>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	602b      	str	r3, [r5, #0]
 800b192:	f7f6 fd09 	bl	8001ba8 <_fstat>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d102      	bne.n	800b1a0 <_fstat_r+0x1c>
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	b103      	cbz	r3, 800b1a0 <_fstat_r+0x1c>
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200003f0 	.word	0x200003f0

0800b1a8 <_isatty_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d06      	ldr	r5, [pc, #24]	; (800b1c4 <_isatty_r+0x1c>)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	f7f6 fd07 	bl	8001bc6 <_isatty>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_isatty_r+0x1a>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_isatty_r+0x1a>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	200003f0 	.word	0x200003f0

0800b1c8 <_lseek_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_lseek_r+0x20>)
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7f6 fcff 	bl	8001bda <_lseek>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_lseek_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_lseek_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	200003f0 	.word	0x200003f0

0800b1ec <_read_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d07      	ldr	r5, [pc, #28]	; (800b20c <_read_r+0x20>)
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	4608      	mov	r0, r1
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	602a      	str	r2, [r5, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f7f6 fc90 	bl	8001b20 <_read>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_read_r+0x1e>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	b103      	cbz	r3, 800b20a <_read_r+0x1e>
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	200003f0 	.word	0x200003f0

0800b210 <_init>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	bf00      	nop
 800b214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b216:	bc08      	pop	{r3}
 800b218:	469e      	mov	lr, r3
 800b21a:	4770      	bx	lr

0800b21c <_fini>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	bf00      	nop
 800b220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b222:	bc08      	pop	{r3}
 800b224:	469e      	mov	lr, r3
 800b226:	4770      	bx	lr
